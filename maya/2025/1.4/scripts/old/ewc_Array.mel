/**********************************************
:: Author:	Ed Caspersen
:: Email:	ed.caspersen@gmail.com
:: URL:		www.undeclared-variable.com
:: Credits:	Craig Davies, Kevin Mannens
:: Script:	ewc_Array.mel
:: Version:	1.2.1
:: Revision:	r453
:: Date:	Feb 24, 2010
-----------------------------------------------
:: Description:	This script is an emulation of
:: the 3ds Max Array tool. 
::
:: The Scatter controls will randomly generate
:: offsets from the local attributes of each
:: element of the array. As of 1.1 the root
:: object maybe be repositioned, the arrayed
:: will update accordingly.
**********************************************/




/*|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
||||||||||WARNING: EDIT ANYTHING PAST THIS POINT AT YOUR OWN RISK||||||||||||
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*/

//===========================================
// GLOBAL VARIABLES
global string	$ewc_arrayVarTempArraySuffix;
global string	$ewc_arrayVarTargetNameFullPath;
global string	$ewc_arrayVarNodePreviewArray1D[];
global string	$ewc_arrayVarNodePreviewArray2D[];
global string	$ewc_arrayVarNodePreviewArray3D[];

// preview
global float	$ewc_arrayVarPreviewTransformX[];
global float	$ewc_arrayVarPreviewTransformY[];
global float	$ewc_arrayVarPreviewTransformZ[];
global float	$ewc_arrayVarPreviewRotationX[];
global float	$ewc_arrayVarPreviewRotationY[];
global float	$ewc_arrayVarPreviewRotationZ[];
global float	$ewc_arrayVarPreviewScaleX[];
global float	$ewc_arrayVarPreviewScaleY[];
global float	$ewc_arrayVarPreviewScaleZ[];

// scatter
global float	$ewc_arrayVarScatterTransformX[];
global float	$ewc_arrayVarScatterTransformY[];
global float	$ewc_arrayVarScatterTransformZ[];
global float	$ewc_arrayVarScatterRotationX[];
global float	$ewc_arrayVarScatterRotationY[];
global float	$ewc_arrayVarScatterRotationZ[];
global float	$ewc_arrayVarScatterScaleX[];
global float	$ewc_arrayVarScatterScaleY[];
global float	$ewc_arrayVarScatterScaleZ[];
global int	$ewc_arrayVarScatterEnabled[9];

// Store scale values for uniform toggle
global float	$ewc_arrayVarOriginalYZScaleValues[4];
global float	$ewc_arrayVarOriginalScatterValues[4];


// active side: 0: transform 1: rotate 2: scale
global int	$ewc_arrayVarStoreActiveSide[3];

// 
global string	$ewc_arrayVarConstrainedPlaneAxisLabel;
global string	$ewc_arrayVarReorientStoreActiveSide;
global string	$ewc_arrayVarStoreCurrentPlaneConstraint;
global int	$ewc_arrayVarActivePreviewStatus = 0;



//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// BEGIN INTERFACE PROCEDURES
//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||



//===========================================
// Function to hold the default step values
global proc int ewc_arrayDefaultIntegerValues(int $case)
{
	switch ($case)
	{
		case 1: // Precision values
			return 1;
			break;
		case 2: // 1D count
			return 10;
			break;
	}
	
}




//===========================================
// Control Names
global proc string[] ewc_arrayControlNames(int $case, int $start, int $end)
{
	string $return[];
	
	// Eval $case
	switch ($case)
	{
		case 0: // Window
			string $window[] = {"ewc_winArrayMainUserInterfaceWindow"};
			$return[$start] = $window[$start];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 1: // Layouts
			string $layout[] = {	"ewc_formMainArrayForm",	"ewc_scrollMainArrayWindow",	"ewc_formArrayFrameHolder",	"ewc_frameArrayTransforms",
						"ewc_formTransformControls",	"ewc_frameGeometryGroup",	"ewc_formGeometryGrpControls",	"ewc_frameArrayDimensions",
						"ewc_formArrayDimensionsCtrls",	"ewc_frameArrayPreview",	"ewc_formArrayPreviewCtrls",	"ewc_frameArrayScatter",
						"ewc_formArrayScatterControls",	"ewc_frameArrayCountShell",	"ewc_colArrayTextHolder",	"ewc_frameArrayRename",
						"ewc_formArrayRename",		"ewc_frameArrayRootPosition",	"ewc_formArrayRootPosition",	"ewc_frameArrayInfoMainUI",
						"ewc_formArrayInfoMainUI"};
						
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $layout[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 2: // Main UI controls
			string $control[] = {	"ewc_btnResetAllParameters",	"ewc_btnOkArrayParameters",	"ewc_btnCancelArrayParams",
						"ewc_txtArrayCountLabel",	"ewc_txtArrayCountDisplay",	"ewc_txtArrayPrecisionTitle",
						"ewc_fltFldFieldPrecision"};
			
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $control[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 3: // Array transformation check boxes
			string $cbox[] = {"ewc_cboxReOrientArray", "ewc_cboxUniformArray"};
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $cbox[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 4: // Array tranformation float fields
			string $field[] = {	"ewc_fltFldIncrMoveX",	"ewc_fltFldIncrMoveY",	"ewc_fltFldIncrMoveZ",
						"ewc_fltFldIncrRotX",	"ewc_fltFldIncrRotY",	"ewc_fltFldIncrRotZ",
						"ewc_fltFldIncrScaleX",	"ewc_fltFldIncrScaleY",	"ewc_fltFldIncrScaleZ",
						"ewc_fltFldTtlMoveX",	"ewc_fltFldTtlMoveY",	"ewc_fltFldTtlMoveZ",
						"ewc_fltFldTtlRotX",	"ewc_fltFldTtlRotY",	"ewc_fltFldTtlRotZ",
						"ewc_fltFldTtlScaleX",	"ewc_fltFldTtlScaleY",	"ewc_fltFldTtlScaleZ"};
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $field[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 5: // Geometry and grouping
			string $rad[] = { 	"ewc_radGeometryGroupType",	"ewc_radGeometryGroupCopy",	"ewc_radGeometryGroupInstance",
						"ewc_radGeometryGroupUnder",	"ewc_radGeometryGroupParent",	"ewc_radGeometryGroupWorld",
						"ewc_radGeometryGroupGroup"};
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $rad[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 6: // Array dimension radio buttons
			string $rad[] = {	"ewc_radArrayDimensions_Coll",	"ewc_radArrayDimensions_One",
						"ewc_radArrayDimensions_Two",	"ewc_radArrayDimensions_Three"};
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $rad[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 7: // Array dimension integer fields
			string $int[] = { 	"ewc_intFldDimensionCount1D",	"ewc_intFldDimensionCount2D",	"ewc_intFldDimensionCount3D"};
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $int[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 8: // Array dimesnion float fields
			string $float[] = {	"ewc_fltFldDimensionOffset2X",	"ewc_fltFldDimensionOffset2Y",	"ewc_fltFldDimensionOffset2Z",
						"ewc_fltFldDimensionOffset3X",	"ewc_fltFldDimensionOffset3Y",	"ewc_fltFldDimensionOffset3Z"};
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $float[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 9: // Preview frame check boxes
			string $cbox[] = {	"ewc_cboxPreviewBoundingBox",	"ewc_cboxPreviewWireFrame",	"ewc_cboxPreviewVisibility"};
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $cbox[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 10: // Scatter frame check boxes
			string $cbox[] = { 	"ewc_cboxArrayMoveScatter", "ewc_cboxArrayRotateScatter", "ewc_cboxArrayScaleScatter",
						"ewc_cboxConstrainScaleToPlane", "ewc_cboxToggleScaleIncOffset"};
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $cbox[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 11: // Scatter frame float fields
			string $float[] = {	"ewc_fltFldScatterMoveXhi",	"ewc_fltFldScatterMoveXlo",	"ewc_fltFldScatterMoveYhi",	"ewc_fltFldScatterMoveYlo",
						"ewc_fltFldScatterMoveZhi",	"ewc_fltFldScatterMoveZlo",	"ewc_fltFldScatterRotateXhi",	"ewc_fltFldScatterRotateXlo",
						"ewc_fltFldScatterRotateYhi",	"ewc_fltFldScatterRotateYlo",	"ewc_fltFldScatterRotateZhi",	"ewc_fltFldScatterRotateZlo",
						"ewc_fltFldScatterScaleXhi",	"ewc_fltFldScatterScaleXlo",	"ewc_fltFldScatterScaleYhi",	"ewc_fltFldScatterScaleYlo",
						"ewc_fltFldScatterScaleZhi",	"ewc_fltFldScatterScaleZlo"};
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $float[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 12: // Rename controls
			string $rename[] = {	"ewc_txtUserDefineName",	"ewc_txtUserDefineSuffix",	"ewc_txtfldUserDefineName",
						"ewc_intfldUserDefineSuffix",	"ewc_cboxRenameToggle"};
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $rename[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 13: // Button names
			string $btn[] = {	"ewc_btnArrayTransformUp",	"ewc_btnArrayTransformDown",	"ewc_btnArrayIncrementalOrTotal",
						"ewc_btnArrayDimensionsUp",	"ewc_btnArrayDimensionsDown",	"ewc_btnCreateArrayPreview",
						"ewc_btnArrayScatterValueUp",	"ewc_btnArrayScatterValueDown",	"ewc_btnArrayScatterTransform",
						"ewc_btnArrayScatterRotate",	"ewc_btnArrayScatterScale",	"ewc_btnApplySeedTransformX",
						"ewc_btnApplySeedTransformY",	"ewc_btnApplySeedTransformZ",	"ewc_btnApplySeedRotateX",
						"ewc_btnApplySeedRotateY",	"ewc_btnApplySeedRotateZ",	"ewc_btnApplySeedScaleX",
						"ewc_btnApplySeedScaleY",	"ewc_btnApplySeedScaleZ"};
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $btn[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 14: // Text and separators
			string $txt[] = {	"ewc_txtArrayTransformFrameLabels",	"ewc_txtArrayDimensionsLabels",	"ewc_txtArrayScatterLabels",
						"ewc_sepArrayGeometryGroupFrame",	"ewc_sepArrayPreviewFrame"};
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $txt[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 15: // Reposition Controls
			string $repo[] = {	"ewc_fldArrayRootTranslateX",	"ewc_fldArrayRootTranslateY",	"ewc_fldArrayRootTranslateZ",
						"ewc_fldArrayRootRotateX",	"ewc_fldArrayRootRotateY",	"ewc_fldArrayRootRotateZ",
						"ewc_fldArrayRootScaleX",	"ewc_fldArrayRootScaleY",	"ewc_fldArrayRootScaleZ",
						"ewc_btnArrayRootPlus",		"ewc_btnArrayRootMinus",	"ewc_txtArrayRootTranslate",
						"ewc_txtArrayRootRotate",	"ewc_txtArrayRootScale",	"ewc_txtArrayRootTransformX",
						"ewc_txtArrayRootTransformY",	"ewc_txtArrayRootTransformZ",	"ewc_cboxArrayToggleXformPivot",
						"ewc_radArrayPivotCollection",	"ewc_radArrayUseRotate",	"ewc_radArrayUseScale"};
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $repo[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 16: // Info Controls
			string $info[] = {	"ewc_txtArrayInfoMainUI",	"ewc_btnArrayInfoShowMore",	"ewc_winArrayReleaseInfo",
						"ewc_formArrayReleaseInfo",	"ewc_scrollArrayReleaseInfo",	"ewc_btnArrayCloseReleaseInfo"};
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $info[$start + $i];
			break;
			
		//_________________________________________________________________________________________________________________________________________________
		case 17: // Info Controls
			string $hidden[] = {	"ewc_fldPivotPointX",	"ewc_fldPivotPointY",	"ewc_fldPivotPointZ"};
			for ($i = 0; $i < $end; $i++)
				$return[$i] = $hidden[$start + $i];
			break;
		
	} // End switch
	
	return $return;
} // End ewc_arrayControlNames()



//===========================================
// Main procedure that checks for selection
// before creating the main interface
global proc ewc_Array()
{
	global int	$ewc_arrayVarActivePreviewStatus;
	$ewc_arrayVarActivePreviewStatus = 0;
	// Clear the globals of potential data
	ewc_arrayClearGlobals();
	
	// Store the selection
	global string	$ewc_arrayVarTargetNameFullPath;
	string $sel[] = `ls -selection -transforms -objectsOnly -flatten`;
	$ewc_arrayVarTargetNameFullPath = $sel[0];
	
	// Test for correct selection
	if ($ewc_arrayVarTargetNameFullPath == "")
	{
		warning "You must select a transform object to use the Array dialog.";
		confirmDialog
		    -title "WARNING"
		    -message "No valid selection detected!\nPlease make a selection."
		    -messageAlign "center"
		    -button "OK"
		    -defaultButton "OK"
		    -cancelButton "OK"
		    -dismissString "OK";
		return;
	}
	
	float $scale[3];
	$scale[0] = getAttr ($ewc_arrayVarTargetNameFullPath + ".scaleX");
	$scale[1] = getAttr ($ewc_arrayVarTargetNameFullPath + ".scaleY");
	$scale[2] = getAttr ($ewc_arrayVarTargetNameFullPath + ".scaleZ");
	
	if ($scale[0] <= 0 || $scale[1] <= 0 || $scale[2] <= 0)
	{
		confirmDialog
		    -title "Inverted Geometry Detected"
		    -message (	"Array for Maya has detected that your geometry\n"
		    		+ "is inverted in at least one of its scale axes.\n\n"
				+ "This will need to be fixed before using the Array.")
		    -messageAlign "center"
		    -button "OK"
		    -defaultButton "OK"
		    -cancelButton "OK"
		    -dismissString "OK";
		return;
	}
	
	// Create the suffix and load the main UI
	ewc_arrayLoadCurrentSuffix();
	ewc_arrayArrayMainFrames();
	
	select -clear;
	
	// message
	print "<<< Array for Maya >>>\n";
} // End ewc_Array()



//===========================================
// Interface procedure, main window only
global proc ewc_arrayArrayMainFrames()
{
	// Query the OS
	string $os = `about -os`;
	int $unix, $w, $h;
	if ($os == "linux64" || $os == "mac")
		$unix = true;
	else
		$unix = false;
	
	string $label;
	
	// Import main UI string
	string $mainWindow[] = ewc_arrayControlNames(0, 0, 1);
	
	if (`window -exists $mainWindow[0]`)
		deleteUI $mainWindow[0];
	
	if (`about -win`)
		$w = 690;
	else if (`about -li`)	
		$w = 698;
	else if (`about -mac`)
		$w = 718;
	
	// Create Main ui
	$label = (($unix) ? "Array for Maya | Version 1.2.1":"  Array for Maya | Version 1.2.1");
	window
		-title $label
		//-toolbox true
		-maximizeButton off
		-widthHeight $w ((`about -mac`)?375:395)
		$mainWindow[0];
	
	// Array for the layout names
	string $layout[] = ewc_arrayControlNames(1, 0, 22);
	
	// Main formLayout
	formLayout
		//-width 680
		//-height 350
		$layout[0];
	
		// Create the controls
		ewc_arrayMainInterfaceControls(1);
		
		// Main scrollLayout
		scrollLayout
			//-horizontalScrollBarThickness 0
			$layout[1];
		
			formLayout $layout[2];
			
				int $frameHeight;
				
				if (`about -mac`) {
					$frameHeight = 150;
				} else {
					$frameHeight = 145;
				}
				
				// Frame holding transformation controls
				$label = ($unix) ? "Array Transformation (Use Pivot Point Center)": " Array Transformation (Use Pivot Point Center) ";
				
				if (`about -win`)
					$w = 650;
				else if (`about -li`)
					$w = 656;
				else if (`about -mac`)
					$w = 690;
				frameLayout
					-label $label
					-labelAlign ((`about -li`) ? "top" : "center")
					-width $w
					-height $frameHeight
					-borderStyle "etchedIn"
					-labelIndent 10
					$layout[3];
					
					formLayout $layout[4];
						
						// Text controls
						ewc_arrayTransformTextControls(1);
						
						// floatField controls
						ewc_arrayTransformFieldControls(1);
						
						// Button controls
						ewc_arrayTransformButtonControls(1);
					
					// Close formLayout $layout[4]
					setParent $layout[3];
					
				// Close frameLayout
				setParent $layout[2];
				
				// Frame holding object type controls
				$label = (($unix) ? "Geometry/Group": " Geometry/Group ");
				if (`about -win`)
					$w = 140;
				else if (`about -li`)
					$w = 142;
				else if (`about -mac`)
					$w = 156;
				$h = (`about -win`) ? 125: 135;
				frameLayout
					-label $label
					-labelAlign ((`about -li`) ? "top" : "center")
					-width $w
					-height $h
					-borderStyle "etchedIn"
					-labelIndent 10
					$layout[5];
					
					formLayout $layout[6];
					
						// Controls
						ewc_arrayGeometryGroupControls(1);
					
					// Close formLayout $layout[6]
					setParent $layout[5];
					
				// Close frameLayout
				setParent $layout[2];
				
				// Frame holding dimensional controls
				$label = (($unix) ? "Array Dimensions": " Array Dimensions ");
				if (`about -win`)
					$w = 335;
				else if (`about -li`)
					$w = 337;
				else if (`about -mac`)
					$w = 347;
				frameLayout
					-label $label
					-labelAlign ((`about -li`) ? "top" : "center")
					-width $w
					-height $h
					-borderStyle "etchedIn"
					-labelIndent 10
					$layout[7];
					
					formLayout $layout[8];
					
					// Controls
					ewc_arrayDimensionsControls(1);
					
					// Close formLayout $layout[8]
					setParent $layout[7];
					
				// Close frameLayout
				setParent $layout[2];
				
				// Frame holding preview controls
				$label = (($unix) ? "Drawing Control": " Drawing Control ");
				if (`about -win`)
					$w = 155;
				else if (`about -li`)
					$w = 157;
				else if (`about -mac`)
					$w = 167;
				frameLayout
					-label $label
					-labelAlign ((`about -li`) ? "top" : "center")
					-width $w
					-height $h
					-borderStyle "etchedIn"
					-labelIndent 10
					$layout[9];
					
					formLayout $layout[10];
					
					// Controls
					ewc_arrayPreviewFrameControls(1);
					
					// Close formLayout $layout[10]
					setParent $layout[9];
					
				// Close frameLayout
				setParent $layout[2];
				
				// Frame holding scatter controls
				$label = (($unix) ? "Scatter" : " Scatter ");
				
				if (`about -win`)
					$w = 650;
				else if (`about -li`)
					$w = 656;
				else if (`about -mac`)
					$w = 690;
				$h = (`about -mac`) ? 145: ((`about -win`)?135:140);
				frameLayout
					-label $label
					-labelAlign ((`about -li`) ? "top" : "center")
					-width $w
					-height $h
					-borderStyle "etchedIn"
					-labelIndent 10
					$layout[11];
					
					formLayout $layout[12];
					
					// Controls
					ewc_arrayScatterFrameControls(1);
					
					// Close formLayout $layout[12]
					setParent $layout[11];
					
				// Close frameLayout
				setParent $layout[2];
				
				$h = (`about -win`) ? 160: 185;
				
				// Frame holding rename controls
				$label = (($unix) ? "Rename" : " Rename " );
				if (`about -win`)
					$w = 160;
				else if (`about -li`)
					$w = 162;
				else if (`about -mac`)
					$w = 172;
				frameLayout
					-label $label
					-labelAlign ((`about -li`) ? "top" : "center")
					-width $w
					-height $h
					-borderStyle "etchedIn"
					-labelIndent 10
					$layout[15];
					
					formLayout $layout[16];
					
					// Controls
					ewc_arrayRenameControls(1);
					
					// Close formLayout $layout[12]
					setParent $layout[15];
					
				// Close frameLayout
				setParent $layout[2];
				
				// Frame holding reposition controls
				$label = (($unix) ? "Reposition Root Object" : " Reposition Root Object " );
				
				if (`about -win`)
					$w = 270;
				else if (`about -li`)
					$w = 272;
				else if (`about -mac`)
					$w = 284;
				frameLayout
					-label $label
					-labelAlign ((`about -li`) ? "top" : "center")
					-width $w
					-height $h
					-borderStyle "etchedIn"
					-labelIndent 10
					$layout[17];
					
					formLayout $layout[18];
					
					// Controls
					ewc_arrayTransformRootControls(1);
					
					// Close formLayout $layout[12]
					setParent $layout[17];
					
				// Close frameLayout
				setParent $layout[2];
				
				// Frame holding reposition controls
				$label = (($unix) ? "About..." : " About... " );
				$w = (`about -win`) ? 200: 202;
				if (`about -win`)
					$w = 200;
				else if (`about -li`)
					$w = 202;
				else if (`about -mac`)
					$w = 214;
				frameLayout
					-label $label
					-labelAlign ((`about -li`)? "top" : "center")
					-width $w
					-height $h
					-borderStyle "etchedIn"
					-labelIndent 10
					$layout[19];
					
					formLayout $layout[20];
					
					// Controls
					ewc_arrayInformationControls(1);
					
					// Close formLayout $layout[12]
					setParent $layout[19];
					
				// Close frameLayout
				setParent $layout[2];
				
			// Close formLayout $layout[2]
			setParent $layout[1];
		
	//_______________________
	// EDIT LAYOUTS
	
	// Variable for edge positions
	string $l = "left";
	string $r = "right";
	string $t = "top";
	string $b = "bottom";
	
	// Position the scrollLayout
	formLayout
		-edit
		
		-attachForm	$layout[1]	$l	0
		-attachForm	$layout[1]	$r	0
		-attachForm	$layout[1]	$t	0
		-attachForm	$layout[1]	$b	35
		
		$layout[0];
	
	// Position frames in the scrollLayout
	formLayout -edit
	
		// Transform frame
		-attachForm	$layout[3]	$l	5
		-attachForm	$layout[3]	$t	15
		
		// Object type frame
		-attachControl	$layout[5]	$t	15	$layout[3]
		-attachForm	$layout[5]	$l	5
		
		// Dimension frame
		-attachControl	$layout[7]	$t	15	$layout[3]
		-attachControl	$layout[7]	$l	10	$layout[5]
		
		// Preview frame
		-attachControl	$layout[9]	$t	15	$layout[3]
		-attachControl	$layout[9]	$l	10	$layout[7]
		
		// Scatter frame
		-attachForm	$layout[11]	$l	5
		-attachControl	$layout[11]	$t	10	$layout[7]
		
		// Rename frame
		-attachForm	$layout[15]	$l	5
		-attachControl	$layout[15]	$t	10	$layout[11]
		
		// Reposition frame
		-attachControl	$layout[17]	$l	10	$layout[15]
		-attachControl	$layout[17]	$t	10	$layout[11]
		
		// About frame
		-attachControl	$layout[19]	$l	10	$layout[17]
		-attachControl	$layout[19]	$t	10	$layout[11]
		
		$layout[2];
	
	//_______________________
	// EDIT EXTERNAL LAYOUTS
	
	// Top level of controls
	ewc_arrayMainInterfaceControls(2);
	
	// Transform Frame________
	
		// Text controls
		ewc_arrayTransformTextControls(2);
		
		// Float Field controls
		ewc_arrayTransformFieldControls(2);
		
		// Button controls
		ewc_arrayTransformButtonControls(2);
	
	// Type of Object frame________
	ewc_arrayGeometryGroupControls(2);
		
	// Dimensions Frame________
	ewc_arrayDimensionsControls(2);
	ewc_arrayDimensionsControls(3);
	
	// Preview Frame________
	ewc_arrayPreviewFrameControls(2);
	
	// Scatter Frame________
	ewc_arrayScatterFrameControls(2);
	ewc_arrayScatterFrameControls(3);
	ewc_arrayScatterFrameControls(4);
	
	// Rename Frame_______
	ewc_arrayRenameControls(2);
	
	// Reposition Frame________
	ewc_arrayTransformRootControls(2);
	
	// About Frame
	ewc_arrayInformationControls(2);
	
	// Load active side for Re-Orient/Incr proc
	ewc_arrayToggleReorientStates(2);
	ewc_arrayToggleIncrementalScaling(2);
	
	// SCRIPTJOB____
	// Delete window and clear array
	scriptJob
		-parent $mainWindow[0]
		-uiDeleted $mainWindow[0]
		"ewc_arrayCancelMainWindow()";
	scriptJob
		-parent $mainWindow[0]
		-event "deleteAll" "ewc_arrayCancelMainWindow()";
	scriptJob
		-parent $mainWindow[0]
		-event "NewSceneOpened" "ewc_arrayCancelMainWindow()";
	scriptJob
		-parent $mainWindow[0]
		-event "SceneOpened" "ewc_arrayCancelMainWindow()";
	scriptJob
		-parent $mainWindow[0]
		-event "SelectionChanged" "ewc_arrayScriptJobs(1)";
	
	showWindow $mainWindow[0];
	
} // End ewc_arrayArrayMainFrames()




//===========================================
// Main interface controls
global proc ewc_arrayMainInterfaceControls(int $case)
{
	// Import layout names	
	string $layout[] = ewc_arrayControlNames(1, 0, 15);
	
	for ($i = 2; $i < 13; $i++)
		stringArrayRemoveAtIndex(2, $layout);
	
	// Import control names
	string $control[] =  ewc_arrayControlNames(2, 0, 7);
	
	//___________________
	// Evaluate $case____
	switch($case)
	{
		case 1: // Create the controls
		
			// Bottom controls
			button
				-label "Reset All Parameters"
				-width ((`about -win`) ? 125: 145)
				-command "ewc_arrayResetArrayParameters()"
				-annotation "Reset all fields and delete the array."
				$control[0];
			
			button
				-label "OK"
				-width 75
				-annotation "Except the current settings and create the array."
				-command "ewc_arrayCreateFinal()"
				$control[1];
				
			button
				-label "Cancel"
				-width 75
				-command "ewc_arrayCancelMainWindow()"
				-annotation "Cancel the Array dialog and destroy the duplicated geometry."
				$control[2];
			
			
			// Array count controls
			text
				-label "Total in Array:"
				$control[3];
				
			// os fix
			int $h1;
			if (`about -win`)
				$h1 = 22;
			else if (`about -mac`)
				$h1 = 22;
			else if (`about -li`)
				$h1 = 22;
				
			frameLayout
				-labelVisible false
				-width 50
				-height $h1
				$layout[2];
				
				columnLayout
					-adjustableColumn true
					$layout[3];
				
				// This is the control that will be edited
				// to reflect the total array count
				text
					-label (ewc_arrayDefaultIntegerValues(2))
					$control[4];
				
				// Close columnLayout $layout[3]
				setParent $layout[2];
				
			// Close frameLayout $layout[2]
			setParent $layout[0];
			
			text
				-label "Precision:"
				-annotation "Incremental step value for the Transformation, 2D offset, and 3D offset buttons."
				$control[5];
			
			floatField
				-value (ewc_arrayDefaultIntegerValues(1))
				-minValue 0.001
				-precision 0
				-width 35
				-annotation "Incremental step value for the Transformation, 2D offset, and 3D offset buttons."
				$control[6];
			
			break;
			
		case 2: // Position the controls
		
			// Variable for edge positions
			string $l = "left";
			string $r = "right";
			string $t = "top";
			string $b = "bottom";
	
			formLayout
				-edit
				
				// Cancel button
				-attachForm	$control[2]	$r	15
				-attachControl	$control[2]	$t	5	$layout[1]
				
				// OK button
				-attachControl	$control[1]	$r	15	$control[2]
				-attachControl	$control[1]	$t	5	$layout[1]
				
				// Reset All button
				-attachControl	$control[0]	$r	15	$control[1]
				-attachControl	$control[0]	$t	5	$layout[1]
				
				// Array count (textField)
				-attachForm	$control[3]	$l	5
				-attachControl	$control[3]	$t	10	$layout[1]
				
				// Array count (frameLayout)
				-attachControl	$layout[2]	$l	5	$control[3]
				-attachControl	$layout[2]	$t	8	$layout[1]
				
				// Precision label
				-attachControl	$control[5]	$l	55	$layout[2]
				-attachControl	$control[5]	$t	10	$layout[1]
				
				// Precision field
				-attachControl	$control[6]	$l	1	$control[5]
				-attachControl	$control[6]	$t	7	$layout[1]
				
				
				$layout[0];
		
			break;
	} // End switch
	
	//ewc_arrayTotalInArrayUpdate();
} // End ewc_arrayMainInterfaceControls()
//===========================================
// Button controls for the Transform frame
global proc ewc_arrayTransformButtonControls(int $case)
{
	global int	$ewc_arrayVarStoreActiveSide[];
	
	// Button control names
	string $btn[] = ewc_arrayControlNames(13, 0, 3);
	
	// Command arguments
	
	string $stateArgs[] = 
	{
		"true,false,0,1",	// 0 move - inc
		"true,false,3,4",	// 1 rotate - inc
		"true,false,6,7",	// 2 scale - inc
		"false,true,0,1",	// 3 move - total
		"false,true,3,4",	// 4 rotate - total
		"false,true,6,7"	// 5 scale - total
	};
	
	
	string $btnArgs[] =
	{
		"\"ewc_fltFldIncrMoveX\", \"ewc_fltFldTtlMoveX\", ",	/* 0 */		"\"ewc_fltFldIncrMoveY\", \"ewc_fltFldTtlMoveY\", ",	/* 1 */
		"\"ewc_fltFldIncrMoveZ\", \"ewc_fltFldTtlMoveZ\", ",	/* 2 */		"\"ewc_fltFldIncrRotX\", \"ewc_fltFldTtlRotX\", ",	/* 3 */
		"\"ewc_fltFldIncrRotY\", \"ewc_fltFldTtlRotY\", ",	/* 4 */		"\"ewc_fltFldIncrRotZ\", \"ewc_fltFldTtlRotZ\", ",	/* 5 */
		"\"ewc_fltFldIncrScaleX\", \"ewc_fltFldTtlScaleX\", ",	/* 6 */		"\"ewc_fltFldIncrScaleY\", \"ewc_fltFldTtlScaleY\", ",	/* 7 */
		"\"ewc_fltFldIncrScaleZ\", \"ewc_fltFldTtlScaleZ\", "	/* 8 */
	};
	
	//___________________
	// Evaluate $case____
	switch($case)
	{
		case 1: // Create the transform buttons
			
			// Create variable
			int $arg = 0;
			int $side, $h;
			
			// test os
			if (`about -li`)
				$h = 13;
			else if (`about -win`)
				$h = 11;
			else if (`about -mac`)
				$h = 12;
			
			
			// Create the + buttons
		
			for ($i = 1; $i < 19; $i++)
			{
				$side = ($i < 10) ? 1 : 0;
				
				// Reset arg array counter
				if ($arg == 9)
					$arg = 0;
				
				button
					-label "+"
					-enable (($i < 10) ? true : false)
					-command ("ewc_arrayUpdateTransformationFields(1, " + $btnArgs[$arg] + $side + ")")
					-width 14
					-height $h
					($btn[0] + $i);
					
				$arg++;
			}
			
			// Reset counter for - buttons
			$arg = 0;
			
			// Create the - buttons
			for ($i = 1; $i < 19; $i++)
			{
				$side = ($i < 10) ? 1 : 0;
				
				// Reset arg array counter
				if ($arg == 9)
					$arg = 0;
				
				button
					-label "-"
					-enable (($i < 10) ? true : false)
					-command ("ewc_arrayUpdateTransformationFields(0, " + $btnArgs[$arg] + $side + ")")
					-width 14
					-height $h
					($btn[1] + $i);
					
				$arg++;
			}
			
			// Create the <> buttons
			for ($i = 1; $i < 7; $i++)
			{
				button
					-label (($i >= 1 && $i < 4) ? "<" : ">")
					-width 20
					-height 22
					-command ("ewc_arrayToggleArrayControls(" + $stateArgs[$i - 1] + ");")
					($btn[2] + $i);
			}
			
			// Setup default active sides
			for ($i = 0; $i < 3; $i++)
				$ewc_arrayVarStoreActiveSide[$i] = 0;
			
			break;
			
		case 2: // Position the buttons
			int $tn1, $tn2, $tn3, $tp1, $tp2, $tp3;
			int $m, $R, $s;
		
			// Form to be edited
			string $form[] = ewc_arrayControlNames(1, 4, 5);
			
			// Field control names
			string $field[] = ewc_arrayControlNames(4, 0, 18);
			
			// Variable for edge positions
			string $l = "left";
			string $r = "right";
			string $t = "top";
			string $b = "bottom";
			
			//_________
			if (`about -win`) {
				$tp1 = 42;
				$tn1 = 53;
				$tp2 = 5;
				$tn2 = 80;
				$tn3 = 107;
				$m = 42;
				$R = 5;
				$s = 5;
			} else if (`about -li`) {
				$tp1 = 41;
				$tn1 = 52;
				$tp2 = 4;
				$tn2 = 79;
				$tn3 = 108;
				$m = 42;
				$R = 6;
				$s = 6;
			} else if (`about -mac`) {
				$tp1 = 42;
				$tn1 = 54;
				$tp2 = 5;
				$tn2 = 83;
				$tn3 = 112;
				$m = 43;
				$R = 7;
				$s = 6;
			}
			
			
			formLayout
				-edit
				
				// INCREMENTAL_________
				
				// Transform X
				-attachControl	($btn[0] + 1)	$l	0	$field[0]
				-attachForm	($btn[0] + 1)	$t	$tp1
				
				-attachControl	($btn[1] + 1)	$l	0	$field[0]
				-attachForm	($btn[1] + 1)	$t	$tn1
				
				// Transform Y
				-attachControl	($btn[0] + 2)	$l	0	$field[1]
				-attachForm	($btn[0] + 2)	$t	$tp1
				
				-attachControl	($btn[1] + 2)	$l	0	$field[1]
				-attachForm	($btn[1] + 2)	$t	$tn1
				
				// Transform Z
				-attachControl	($btn[0] + 3)	$l	0	$field[2]
				-attachForm	($btn[0] + 3)	$t	$tp1
				
				-attachControl	($btn[1] + 3)	$l	0	$field[2]
				-attachForm	($btn[1] + 3)	$t	$tn1
				
				// Rotate X
				-attachControl	($btn[0] + 4)	$l	0	$field[3]
				-attachControl	($btn[0] + 4)	$t	$tp2	($btn[1] + 1)
				
				-attachControl	($btn[1] + 4)	$l	0	$field[3]
				-attachForm	($btn[1] + 4)	$t	$tn2
				
				// Rotate Y
				-attachControl	($btn[0] + 5)	$l	0	$field[4]
				-attachControl	($btn[0] + 5)	$t	$tp2	($btn[1] + 2)
				
				-attachControl	($btn[1] + 5)	$l	0	$field[4]
				-attachForm	($btn[1] + 5)	$t	$tn2
				
				// Rotate Z
				-attachControl	($btn[0] + 6)	$l	0	$field[5]
				-attachControl	($btn[0] + 6)	$t	$tp2	($btn[1] + 3)
				
				-attachControl	($btn[1] + 6)	$l	0	$field[5]
				-attachForm	($btn[1] + 6)	$t	$tn2
				
				// Scale X
				-attachControl	($btn[0] + 7)	$l	0	$field[6]
				-attachControl	($btn[0] + 7)	$t	5	($btn[1] + 4)
				
				-attachControl	($btn[1] + 7)	$l	0	$field[6]
				-attachForm	($btn[1] + 7)	$t	$tn3
				
				// Scale Y
				-attachControl	($btn[0] + 8)	$l	0	$field[7]
				-attachControl	($btn[0] + 8)	$t	5	($btn[1] + 5)
				
				-attachControl	($btn[1] + 8)	$l	0	$field[7]
				-attachForm	($btn[1] + 8)	$t	$tn3
				
				// Scale Z
				-attachControl	($btn[0] + 9)	$l	0	$field[8]
				-attachControl	($btn[0] + 9)	$t	5	($btn[1] + 6)
				
				-attachControl	($btn[1] + 9)	$l	0	$field[8]
				-attachForm	($btn[1] + 9)	$t	$tn3
				
				// TOGGLE_________
				
				// Move Incremental
				-attachControl	($btn[2]+ 1)	$l	8	($btn[0] + 3)
				-attachForm	($btn[2]+ 1)	$t	$m	
				
				// Rotate Incremental
				-attachControl	($btn[2]+ 2)	$l	8	($btn[0] + 6)
				-attachControl	($btn[2]+ 2)	$t	$R	($btn[2]+ 1)
				
				// Scale Incremental
				-attachControl	($btn[2]+ 3)	$l	8	($btn[0] + 6)
				-attachControl	($btn[2]+ 3)	$t	$s	($btn[2]+ 2)
				
				// Move Total
				-attachControl	($btn[2]+ 4)	$l	55	($btn[2]+ 1)
				-attachForm	($btn[2]+ 4)	$t	$m	
				
				// Rotate Total
				-attachControl	($btn[2]+ 5)	$l	55	($btn[2]+ 2)
				-attachControl	($btn[2]+ 5)	$t	$R	($btn[2]+ 4)
				
				// Scale Total
				-attachControl	($btn[2]+ 6)	$l	55	($btn[2]+ 3)
				-attachControl	($btn[2]+ 6)	$t	$s	($btn[2]+ 5)
				
				// TOTAL_________
				
				// Translate X
				-attachControl	($btn[0] + 10)	$l	0	$field[9]
				-attachForm	($btn[0] + 10)	$t	$tp1
				
				-attachControl	($btn[1] + 10)	$l	0	$field[9]
				-attachForm	($btn[1] + 10)	$t	$tn1
				
				// Translate Y
				-attachControl	($btn[0] + 11)	$l	0	$field[10]
				-attachForm	($btn[0] + 11)	$t	$tp1
				
				-attachControl	($btn[1] + 11)	$l	0	$field[10]
				-attachForm	($btn[1] + 11)	$t	$tn1
				
				// Translate Z
				-attachControl	($btn[0] + 12)	$l	0	$field[11]
				-attachForm	($btn[0] + 12)	$t	$tp1
				
				-attachControl	($btn[1] + 12)	$l	0	$field[11]
				-attachForm	($btn[1] + 12)	$t	$tn1
				
				// Rotate X
				-attachControl	($btn[0] + 13)	$l	0	$field[12]
				-attachControl	($btn[0] + 13)	$t	$tp2	($btn[1] + 10)
				
				-attachControl	($btn[1] + 13)	$l	0	$field[12]
				-attachForm	($btn[1] + 13)	$t	$tn2
				
				// Rotate Y
				-attachControl	($btn[0] + 14)	$l	0	$field[13]
				-attachControl	($btn[0] + 14)	$t	$tp2	($btn[1] + 11)
				
				-attachControl	($btn[1] + 14)	$l	0	$field[13]
				-attachForm	($btn[1] + 14)	$t	$tn2
				
				// Rotate Z
				-attachControl	($btn[0] + 15)	$l	0	$field[14]
				-attachControl	($btn[0] + 15)	$t	$tp2	($btn[1] + 12)
				
				-attachControl	($btn[1] + 15)	$l	0	$field[14]
				-attachForm	($btn[1] + 15)	$t	$tn2
				
				// Scale X
				-attachControl	($btn[0] + 16)	$l	0	$field[15]
				-attachControl	($btn[0] + 16)	$t	5	($btn[1] + 13)
				
				-attachControl	($btn[1] + 16)	$l	0	$field[15]
				-attachForm	($btn[1] + 16)	$t	$tn3
				
				// Scale Y
				-attachControl	($btn[0] + 17)	$l	0	$field[16]
				-attachControl	($btn[0] + 17)	$t	5	($btn[1] + 14)
				
				-attachControl	($btn[1] + 17)	$l	0	$field[16]
				-attachForm	($btn[1] + 17)	$t	$tn3
				
				// Scale Z
				-attachControl	($btn[0] + 18)	$l	0	$field[17]
				-attachControl	($btn[0] + 18)	$t	5	($btn[1] + 15)
				
				-attachControl	($btn[1] + 18)	$l	0	$field[17]
				-attachForm	($btn[1] + 18)	$t	$tn3
				
				$form[0];
				
			break;
	} // end switch
} // End ewc_arrayTransformButtonControls()




//===========================================
// Controls for the Type of Object frame
global proc ewc_arrayGeometryGroupControls(int $case)
{
	// Control names
	string $radio[] =  ewc_arrayControlNames(5, 0, 7);
	string $sep[] = ewc_arrayControlNames(14, 3, 4);
	
	//___________________
	// Evaluate $case____
	switch($case)
	{
		case 1: // Create the controls
		
			// Geometry Type
			radioCollection $radio[0];
			
			radioButton
				-label "Copy"
				-collection $radio[0]
				-select
				$radio[1];
				
			radioButton
				-label "Instance"
				-collection $radio[0]
				$radio[2];
			
			// Separator
			separator $sep[0];
				
			// Group Under
			radioCollection $radio[3];
			
			radioButton
				-label "Parent"
				-collection $radio[3]
				-select
				$radio[4];
				
			radioButton
				-label "World"
				-collection $radio[3]
				$radio[5];
				
			radioButton
				-label "New Group"
				-collection $radio[3]
				$radio[6];
		
			break;
			
		case 2: // Position the controls
			
			// Variable for edge positions
			string $l = "left";
			string $r = "right";
			string $t = "top";
			
			string $form[] = ewc_arrayControlNames(1, 6, 7);
			
			int $t1 = (`about -win`) ? 5 : 0;
			
			formLayout
				-edit
				
				// Copy rb
				-attachForm	$radio[1]	$l 	30
				-attachForm	$radio[1]	$t	$t1
				
				// Instance rb
				-attachForm	$radio[2]	$l 	30
				-attachControl	$radio[2]	$t	$t1	$radio[1]
				
				// Separator
				-attachForm	$sep[0]		$l 	5
				-attachControl	$sep[0]		$t	2	$radio[2]
				-attachForm	$sep[0]		$r 	5
				
				// Parent rb
				-attachForm	$radio[4]	$l 	30
				-attachControl	$radio[4]	$t	2	$sep[0]	
				
				// World rb
				-attachForm	$radio[5]	$l 	30
				-attachControl	$radio[5]	$t	$t1	$radio[4]
				
				// New Group rb
				-attachForm	$radio[6]	$l 	30
				-attachControl	$radio[6]	$t	$t1	$radio[5]
				
				$form[0];
			break;
	} // End switch
} // End ewc_arrayGeometryGroupControls()

//===========================================
// Controls for the Array Dimensions frame
global proc ewc_arrayDimensionsControls(int $case)
{
	// Radio buttons
	string $radio[] = ewc_arrayControlNames(6, 0, 4);
	
	// Integer fields
	string $int[] = ewc_arrayControlNames(7, 0, 3);
	
	// Float fields
	string $float[] = ewc_arrayControlNames(8, 0, 6);
	
	// Text labels
	string $txtlbl[] = { "Count", "Incremental Row Offsets", "X", "Y", "Z"};
	
	// Button names
	string $btn[] = ewc_arrayControlNames(13, 3, 5);
	
	string $text[] = ewc_arrayControlNames(14, 1, 2);
	
	// Since there are two cases to edit layout
	// Declare the variables here
	// Variable for edge positions
	string $l = "left";
	string $r = "right";
	string $t = "top";
	string $b = "bottom";
	
	string $form[] = ewc_arrayControlNames(1, 8, 9);
	
	//___________________
	// Evaluate $case____
	switch($case)
	{
		case 1: // Create controls
		
			// Radio controls___
			
			radioCollection $radio[0];
			
			radioButton
				-label "1D"
				-collection $radio[0]
				-changeCommand "ewc_arrayToggleDimensionControls(false, false)"
				-select
				$radio[1];
				
			radioButton
				-label "2D"
				-collection $radio[0]
				-changeCommand "ewc_arrayToggleDimensionControls(true, false)"
				$radio[2];
				
			radioButton
				-label "3D"
				-collection $radio[0]
				-changeCommand "ewc_arrayToggleDimensionControls(true, true)"
				$radio[3];
				
			// Text controls____
			for ($i = 0; $i < 5; $i++)
				text
					-label $txtlbl[$i]
					($text[0] + ($i + 1));
				
			// Integer Fields___
			for ($i = 0; $i < 3; $i++)
				intField
					-value ((!$i) ? (ewc_arrayDefaultIntegerValues(2)): 1)
					-width 40
					-minValue 1
					-changeCommand ((!$i) ? "ewc_arrayTotalInArrayUpdate(); ewc_array1DUpdateTransformationField(); ewc_arrayArrayDimensionUpdate()": "ewc_arrayTotalInArrayUpdate(); ewc_arrayArrayDimensionUpdate()")
					// disable dragging, it has a negative affect on performance
					//-dragCommand ((!$i) ? "ewc_arrayTotalInArrayUpdate(); ewc_array1DUpdateTransformationField(); ewc_arrayArrayDimensionUpdate()": "ewc_arrayTotalInArrayUpdate(); ewc_arrayArrayDimensionUpdate()")
					-enable ((!$i) ? true: false)
					$int[$i];
			
			// Float fields___
			
			for ($i = 0; $i < 6; $i++)
				floatField
					-value 0
					-enable false
					-precision 1
					-step (ewc_arrayDefaultIntegerValues(1))
					-changeCommand ("ewc_arrayUpdateDimensionalOffset(" + ($i + 1) + ")")
					-dragCommand ("ewc_arrayUpdateDimensionalOffset(" + ($i + 1) + ")")
					-width 50
					$float[$i];
			
			// Variable for enable flags
			int $enable, $h;
			
			// test os
			if (`about -li`)
				$h = 13;
			else if (`about -win`)
				$h = 11;
			else if (`about -mac`)
				$h = 12;
			
			// Create the + buttons
			for ($i = 1; $i < 10; $i++)
			{
				button
					-label "+"
					-enable (($i == 1) ? true : false)
					-width 14
					-height $h
					($btn[0] + $i);
				
				// Count buttons
				if ($i < 3)
					button
						-edit
						-command ("ewc_arrayDimensionCount(1, \"" + $int[$i - 1] + "\"); ewc_arrayTotalInArrayUpdate(); ewc_arrayArrayDimensionUpdate()")
						($btn[0] + $i);
				if ($i == 6)
					button
						-edit
						-command ("ewc_arrayDimensionCount(1, \"" + $int[$i - 4] + "\"); ewc_arrayTotalInArrayUpdate(); ewc_arrayArrayDimensionUpdate()")
						($btn[0] + $i);
						
				// Append offset step commands
				if ($i >= 3 && $i < 6)
					button
						-edit
						-command ("ewc_arrayUpdateRowOffsetFields(1, \"" + $float[$i - 3] + "\"); ewc_arrayUpdateDimensionalOffset(" + ($i - 2) + ")")
						($btn[0] + $i);
						
				if ($i > 6)
					button
						-edit
						-command ("ewc_arrayUpdateRowOffsetFields(1, \"" + $float[$i - 4] + "\"); ewc_arrayUpdateDimensionalOffset(" + ($i - 3) + ")")
						($btn[0] + $i);
			}
			
			// Create the - buttons
			for ($i = 1; $i < 10; $i++)
			{				
				button
					-label "-"
					-enable (($i == 1) ? true : false)
					-width 14
					-height $h
					($btn[1] + $i);
				
				// Count buttons
				if ($i < 3)
					button
						-edit
						-command ("ewc_arrayDimensionCount(0, \"" + $int[$i - 1] + "\"); ewc_arrayTotalInArrayUpdate(); ewc_arrayArrayDimensionUpdate()")
						($btn[1] + $i);
				if ($i == 6)
					button
						-edit
						-command ("ewc_arrayDimensionCount(0, \"" + $int[$i - 4] + "\"); ewc_arrayTotalInArrayUpdate(); ewc_arrayArrayDimensionUpdate()")
						($btn[1] + $i);
						
				// Append offset step commands
				if ($i >= 3 && $i < 6)
					button
						-edit
						-command ("ewc_arrayUpdateRowOffsetFields(0, \"" + $float[$i - 3] + "\"); ewc_arrayUpdateDimensionalOffset(" + ($i - 2) + ")")
						($btn[1] + $i);
						
				if ($i > 6)
					button
						-edit
						-command ("ewc_arrayUpdateRowOffsetFields(0, \"" + $float[$i - 4] + "\"); ewc_arrayUpdateDimensionalOffset(" + ($i - 3) + ")")
						($btn[1] + $i);
			}
			
			break;
			
		case 2: // Position controls
			int $rb1, $rb2, $c, $x, $y, $z, $incR, $at;
			
					
			if (`about -win`) {
				$rb1 = 25;
				$rb2 = 11;
				$c = 59;
				$x = 42;
				$y = 61;
				$incR = 60;
				$at = 30;
			} else if (`about -li`) {
				$rb1 = 22;
				$rb2 = 8;
				$c = 48;
				$x = 38;
				$y = 57;
				$incR = 60;
				$at = 28;
			} else if (`about -mac`) {
				$rb1 = 22;
				$rb2 = 10;
				$c = 48;
				$x = 34;
				$y = 48;
				$incR = 40;
				$at = 30;
			}
			
			formLayout
				-edit
				
				// TEXT______
				
				// Count
				-attachForm	($text[0] + 1)	$t	5
				-attachForm	($text[0] + 1)	$l	$c
				
				// Inc offset
				-attachForm	($text[0] + 2)	$t	10
				-attachForm	($text[0] + 2)	$r	$incR
				
				// X
				-attachForm	($text[0] + 3)	$t	$at	
				-attachControl	($text[0] + 3)	$l	$x	$int[0]
				
				// Y
				-attachForm	($text[0] + 4)	$t	$at	
				-attachControl	($text[0] + 4)	$l	$y	($text[0] + 3)
				
				// Z
				-attachForm	($text[0] + 5)	$t	$at	
				-attachControl	($text[0] + 5)	$l	$y	($text[0] + 4)
				
				// RADIO BUTTONS_____
				
				// 1D
				-attachForm	$radio[1]	$t	$rb1
				-attachForm	$radio[1]	$l	10
				
				// 2D
				-attachControl	$radio[2]	$t	$rb2	$radio[1]
				-attachForm	$radio[2]	$l	10
				
				// 3D
				-attachControl	$radio[3]	$t	$rb2	$radio[2]
				-attachForm	$radio[3]	$l	10
				
				// INTEGER FIELDS_____
				
				// 1D
				-attachForm	$int[0]		$t	22
				-attachControl	$int[0]		$l	3	$radio[1]
				
				// 2D
				-attachControl	$int[1]		$t	5	$int[0]
				-attachControl	$int[1]		$l	3	$radio[2]
				
				// 3D
				-attachControl	$int[2]		$t	5	$int[1]
				-attachControl	$int[2]		$l	3	$radio[3]
				
				// FLOAT FIELDS_____
				
				// 2D X
				-attachControl	$float[0]	$t	5	$int[0]
				-attachControl	$float[0]	$l	20	$int[1]
				
				// 2D Y
				-attachControl	$float[1]	$t	5	$int[0]
				-attachControl	$float[1]	$l	20	$float[0]
				
				// 2D Z
				-attachControl	$float[2]	$t	5	$int[0]
				-attachControl	$float[2]	$l	20	$float[1]
				
				// 3D X
				-attachControl	$float[3]	$t	5	$int[1]
				-attachControl	$float[3]	$l	20	$int[2]
				
				// 3D Y
				-attachControl	$float[4]	$t	5	$int[1]
				-attachControl	$float[4]	$l	20	$float[3]
				
				// 3D Z
				-attachControl	$float[5]	$t	5	$int[1]
				-attachControl	$float[5]	$l	20	$float[4]
				
				$form[0];
			break;
			
		case 3: // Position buttons
			int $b1D1, $b1D2, $b2D1, $b2D2, $b3D1, $b3D2;
						
			if (`about -win`) {
				$b1D1 = 22;
				$b1D2 = 33;
				$b2D1 = 49;
				$b2D2 = 60;
				$b3D1 = 76;
				$b3D2 = 87;
			} else if (`about -li`) {
				$b1D1 = 21;
				$b1D2 = 31;
				$b2D1 = 49;
				$b2D2 = 59;
				$b3D1 = 78;
				$b3D2 = 88;
			} else if (`about -mac`) {
				$b1D1 = 22;
				$b1D2 = 34;
				$b2D1 = 51;
				$b2D2 = 63;
				$b3D1 = 80;
				$b3D2 = 92;
			}
		
			formLayout
				-edit
				
				// 1D count
				-attachControl	($btn[0] + 1)	$l	0	$int[0]
				-attachForm	($btn[0] + 1)	$t	$b1D1
				
				-attachControl	($btn[1] + 1)	$l	0	$int[0]	
				-attachForm	($btn[1] + 1)	$t	$b1D2	
				
				// 2D___
				
				// 2D count
				-attachControl	($btn[0] + 2)	$l	0	$int[1]
				-attachForm	($btn[0] + 2)	$t	$b2D1
				
				-attachControl	($btn[1] + 2)	$l	0	$int[1]	
				-attachForm	($btn[1] + 2)	$t	$b2D2	
				
				// 2D X
				-attachControl	($btn[0] + 3)	$l	0	$float[0]
				-attachForm	($btn[0] + 3)	$t	$b2D1
				
				-attachControl	($btn[1] + 3)	$l	0	$float[0]
				-attachForm	($btn[1] + 3)	$t	$b2D2
				
				// 2D Y
				-attachControl	($btn[0] + 4)	$l	0	$float[1]
				-attachForm	($btn[0] + 4)	$t	$b2D1
				
				-attachControl	($btn[1] + 4)	$l	0	$float[1]
				-attachForm	($btn[1] + 4)	$t	$b2D2
				
				// 2D Z
				-attachControl	($btn[0] + 5)	$l	0	$float[2]
				-attachForm	($btn[0] + 5)	$t	$b2D1
				
				-attachControl	($btn[1] + 5)	$l	0	$float[2]
				-attachForm	($btn[1] + 5)	$t	$b2D2
				
				// 3D___
				
				// 3D count
				-attachControl	($btn[0] + 6)	$l	0	$int[2]
				-attachForm	($btn[0] + 6)	$t	$b3D1
				
				-attachControl	($btn[1] + 6)	$l	0	$int[2]	
				-attachForm	($btn[1] + 6)	$t	$b3D2
				
				// 3D X
				-attachControl	($btn[0] + 7)	$l	0	$float[3]
				-attachForm	($btn[0] + 7)	$t	$b3D1
				
				-attachControl	($btn[1] + 7)	$l	0	$float[3]
				-attachForm	($btn[1] + 7)	$t	$b3D2
				
				// 3D Y
				-attachControl	($btn[0] + 8)	$l	0	$float[4]
				-attachForm	($btn[0] + 8)	$t	$b3D1
				
				-attachControl	($btn[1] + 8)	$l	0	$float[4]
				-attachForm	($btn[1] + 8)	$t	$b3D2
				
				// 3D Z
				-attachControl	($btn[0] + 9)	$l	0	$float[5]
				-attachForm	($btn[0] + 9)	$t	$b3D1
				
				-attachControl	($btn[1] + 9)	$l	0	$float[5]
				-attachForm	($btn[1] + 9)	$t	$b3D2
				
				$form[0];
			break;
	} // End switch
} // End ewc_arrayDimensionsControls()
//===========================================
// Controls to transform the root object
global proc ewc_arrayTransformRootControls(int $case)
{
	string $fld[] = ewc_arrayControlNames(15, 0, 9);
	string $btn[] = ewc_arrayControlNames(15, 9, 2);
	string $txt[] = ewc_arrayControlNames(15, 11, 6);
	string $cbox[] = ewc_arrayControlNames(15, 17, 1);
	string $rad[] = ewc_arrayControlNames(15, 18, 3);
	string $form[] = ewc_arrayControlNames(1, 18, 1);
	string $fields[] = ewc_arrayControlNames(4, 0, 9);
	string $hidden[] = ewc_arrayControlNames(17, 0, 3);
	global string $ewc_arrayVarTargetNameFullPath;
	string $obj = $ewc_arrayVarTargetNameFullPath;
	
	switch ($case)
	{
		case 1: // Create controls
			// Text
			text -label "Translate" $txt[0];
			text -label "Rotate" $txt[1];
			text -label "Scale" $txt[2];
			text -label "X" $txt[3];
			text -label "Y" $txt[4];
			text -label "Z" $txt[5];
			
			string $attr[] =
			{
				".translateX",	".translateY",	".translateZ",
				".rotateX",	".rotateY",	".rotateZ",
				".scaleX",	".scaleY",	".scaleZ"
			};
			
			// Float fields
			for ($i = 0; $i < 9; $i++)
			{
				floatField
					-width 50
					-precision 3
					-changeCommand ("ewc_arrayActiveUpdate(\"" + $fields[$i] + "\")")
					-dragCommand ("ewc_arrayActiveUpdate(\"" + $fields[$i] + "\")")
					$fld[$i];
					
				connectControl $fld[$i] ($obj + $attr[$i]);
			}
			
			// Hidden fields
			for ($i = 0; $i <= 2; $i++){
				floatField
					-width 50
					-precision 3
					-vis off
					-changeCommand ("ewc_arrayUpdatePivotPointFields("+$i+")")
					-dragCommand ("ewc_arrayUpdatePivotPointFields("+$i+")")
					$hidden[$i];
			}
			
			if (`about -li`)
				$h = 13;
			else if (`about -win`)
				$h = 11;
			else if (`about -mac`)
				$h = 12;
			
			// + buttons
			for ($i = 1; $i < 10; $i++)
				button
					-label "+"
					-width 14
					-height $h
					-command ("ewc_arrayUpdateRootObjectButtons(1, \"" + $attr[$i - 1] + "\", \"" + $fields[$i - 1] + "\")")
					($btn[0] + $i);
			
			// - button
			for ($i = 1; $i < 10; $i++)
				button
					-label "-"
					-width 14
					-height $h
					-command ("ewc_arrayUpdateRootObjectButtons(0, \"" + $attr[$i - 1] + "\", \"" + $fields[$i - 1] + "\")")
					($btn[1] + $i);
			
					
			// checkbox
			checkBox
				-label "Edit pivot point"
				-onCommand "ewc_arrayTogglePivotEdit(1)"
				-offCommand "ewc_arrayTogglePivotEdit(0)"
				$cbox[0];
				
			// Radio buttons
			radioCollection $rad[0];
			radioButton -l "Rotate" -en off -sl -onc "ewc_arrayTogglePivotEdit(1)" $rad[1];
			radioButton -l "Scale" -en off -onc "ewc_arrayTogglePivotEdit(1)" $rad[2];
			
			break;
			
		case 2: // Position controls
			// Variable for edge positions
			string $l = "left";
			string $t = "top";
			
			int $r2, $r4, $r6, $cb;
			
			if (`about -li`){
				$r2 = 45;
				$r4 = 73;
				$r6 = 101;
				$cb = 2;
			} else if (`about -win`) {
				$r2 = 46;
				$r4 = 73;
				$r6 = 100;
				$cb = 2;
			} else if (`about -mac`) {
				$r2 = 47;
				$r4 = 76;
				$r6 = 105;
				$cb = 2;
			}
			
			formLayout
				-edit
				
				// TRANSLATE_____________
				
				// Move label
				-attachForm	$txt[0]		$t	10
				-attachForm	$txt[0]		$l	((`about -mac`)?20:30)
				
				// X label
				-attachForm	$txt[3]		$t	((`about -mac`)?39:38)
				-attachForm	$txt[3]		$l	10
				
				// tx
				-attachForm	$fld[0]		$t	35
				-attachForm	$fld[0]		$l	30
				
				-attachForm	$hidden[0]	$t	35
				-attachForm	$hidden[0]	$l	30
				
				// tx +
				-attachForm	($btn[0] + 1)	$t	35
				-attachControl	($btn[0] + 1)	$l	0	$fld[0]
				
				// tx -
				-attachForm	($btn[1] + 1)	$t	$r2
				-attachControl	($btn[1] + 1)	$l	0	$fld[0]
				
				// Y label
				-attachForm	$txt[4]		$t	((`about -mac`)?68:65)
				-attachForm	$txt[4]		$l	10
				
				// ty
				-attachControl	$fld[1]		$t	5	$fld[0]
				-attachForm	$fld[1]		$l	30
				
				-attachControl	$hidden[1]	$t	5	$fld[0]
				-attachForm	$hidden[1]	$l	30
				
				// ty +
				-attachControl	($btn[0] + 2)	$t	5	$fld[0]
				-attachControl	($btn[0] + 2)	$l	0	$fld[1]
				
				// ty -
				-attachForm	($btn[1] + 2)	$t	$r4
				-attachControl	($btn[1] + 2)	$l	0	$fld[1]
				
				// Z label
				-attachForm	$txt[5]		$t	((`about -mac`)?97:((`about -win`)?91:94))
				-attachForm	$txt[5]		$l	10
				
				// tz
				-attachControl	$fld[2]		$t	5	$fld[1]
				-attachForm	$fld[2]		$l	30
				
				-attachControl	$hidden[2]	$t	5	$fld[1]
				-attachForm	$hidden[2]	$l	30
				
				// tz +
				-attachControl	($btn[0] + 3)	$t	5	$fld[1]
				-attachControl	($btn[0] + 3)	$l	0	$fld[2]
				
				// tz -
				-attachForm	($btn[1] + 3)	$t	$r6
				-attachControl	($btn[1] + 3)	$l	0	$fld[2]
				
				// ROTATE_______________
				
				// Rotate label
				-attachForm	$txt[1]		$t	10
				-attachControl	$txt[1]		$l	((`about -mac`)?20:30)	$fld[0]
				
				// rx
				-attachForm	$fld[3]		$t	35	
				-attachControl	$fld[3]		$l	30	$fld[0]
				
				// rx +
				-attachForm	($btn[0] + 4)	$t	35
				-attachControl	($btn[0] + 4)	$l	0	$fld[3]
				
				// rx -
				-attachForm	($btn[1] + 4)	$t	$r2
				-attachControl	($btn[1] + 4)	$l	0	$fld[3]
				
				// ry
				-attachControl	$fld[4]		$t	5	$fld[3]
				-attachControl	$fld[4]		$l	30	$fld[1]
				
				// ry +
				-attachControl	($btn[0] + 5)	$t	5	$fld[3]
				-attachControl	($btn[0] + 5)	$l	0	$fld[4]
				
				// ry -
				-attachForm	($btn[1] + 5)	$t	$r4
				-attachControl	($btn[1] + 5)	$l	0	$fld[4]
				
				// rz
				-attachControl	$fld[5]		$t	5	$fld[4]
				-attachControl	$fld[5]		$l	30	$fld[2]
				
				// rz +
				-attachControl	($btn[0] + 6)	$t	5	$fld[4]
				-attachControl	($btn[0] + 6)	$l	0	$fld[5]
				
				// rz -
				-attachForm	($btn[1] + 6)	$t	$r6
				-attachControl	($btn[1] + 6)	$l	0	$fld[5]
				
				// SCALE_________________
				
				// Rotate label
				-attachForm	$txt[2]		$t	10
				-attachControl	$txt[2]		$l	((`about -mac`)?20:30)	$fld[3]
				
				// sx
				-attachForm	$fld[6]		$t	35
				-attachControl	$fld[6]		$l	30	$fld[3]
				
				// sx +
				-attachForm	($btn[0] + 7)	$t	35
				-attachControl	($btn[0] + 7)	$l	0	$fld[6]
				
				// sx -
				-attachForm	($btn[1] + 7)	$t	$r2
				-attachControl	($btn[1] + 7)	$l	0	$fld[6]
				
				// sy
				-attachControl	$fld[7]		$t	5	$fld[6]
				-attachControl	$fld[7]		$l	30	$fld[4]
				
				// sy +
				-attachControl	($btn[0] + 8)	$t	5	$fld[6]
				-attachControl	($btn[0] + 8)	$l	0	$fld[7]
				
				// sy -
				-attachForm	($btn[1] + 8)	$t	$r4
				-attachControl	($btn[1] + 8)	$l	0	$fld[7]
				
				// sz
				-attachControl	$fld[8]		$t	5	$fld[7]
				-attachControl	$fld[8]		$l	30	$fld[5]
				
				// sz +
				-attachControl	($btn[0] + 9)	$t	5	$fld[7]
				-attachControl	($btn[0] + 9)	$l	0	$fld[8]
				
				// sz -
				-attachForm	($btn[1] + 9)	$t	$r6
				-attachControl	($btn[1] + 9)	$l	0	$fld[8]
				
				// checkbox
				-attachControl	$cbox[0]	$t	$cb	$fld[2]
				-attachForm	$cbox[0]	$l	30
				
				// radio buttons
				-attachControl	$rad[1]		$t	2	$cbox[0]
				-attachForm	$rad[1]		$l	30
				
				-attachControl	$rad[2]		$t	2	$cbox[0]
				-attachForm	$rad[2]		$l	90
				
				$form[0];
			break;
	} // End switch
} // End ewc_arrayTransformRootControls()




//===========================================
// Information controls
global proc ewc_arrayInformationControls(int $case)
{
	string $main[] = ewc_arrayControlNames(16, 0, 2);
	string $form1[] = ewc_arrayControlNames(1, 20, 1);
	string $release[] = ewc_arrayControlNames(16, 2, 5);
	
	// Variable for edge positions
	string $l = "left";
	string $r = "right";
	string $t = "top";
	string $b = "bottom";
	
	switch ($case)
	{
		case 1: // Main UI control
			/*scrollField
				-wordWrap on
				-editable off
				-height 105
				-text	("Author: Ed Caspersen\n"
					+ "Credits: Craig Davies, Kevin Mannens\n"
					+ "Email: ed.caspersen@gmail.com\n"
					+ "URL: www.undeclared-variable.com\n")
				$main[0];*/
			
			string $label;
			
			if (`about -li`) {
				$label = ("Author: Ed Caspersen\n"
					+ "Credits: Craig Davies,\nKevin Mannens\n"
					+ "Email: ed.caspersen@gmail.com\n"
					+ "URL's:\nwww.undeclared-variable.com\n"
					+ "www.fracture-fx.com\n"
					+ "www.td-college.com");
			} else {
				$label = ("Author: Ed Caspersen\n"
					+ "Credits: Craig Davies, Kevin Mannens\n"
					+ "Email: ed.caspersen@gmail.com\n"
					+ "URL's: www.undeclared-variable.com\n"
					+ "www.fracture-fx.com\n"
					+ "www.td-college.com");
			}
				
			text 	-l $label
				-al "left"
				$main[0];
				
			button
				-label "Release Information"
				-command "ewc_arrayInformationControls(3)"
				$main[1];
			break;
			
		case 2: // Position Main UI controls
		
			int $h = `button -q -h $main[1]`;
			$h = $h + 2;
		
			formLayout
				-edit
				
				// text
				-attachForm	$main[0]	$t 	2
				-attachForm	$main[0]	$l 	1
				-attachForm	$main[0]	$r 	1
				-attachForm	$main[0]	$b 	$h
				
				
				// button
				-attachForm	$main[1]	$l	2
				-attachForm	$main[1]	$r	2
				-attachControl	$main[1]	$t	1	$main[0]
				
				$form1[0];
			break;
			
		case 3: // Release info window
			if (`window -exists $release[0]`)
				deleteUI $release[0];
			
			window
				-toolbox true
				-title "Release Notes"
				$release[0];
				
			formLayout $release[1];
			
			scrollField
				-wordWrap false
				-editable false
				-text (	"-1.2.1-\n"
						+ "\t* Added a radio button toggle to switch between rotate and scale pivot.\n"
						+ "\t* Ok, I am really done adding stuff now...\n"
					+ "\n"
					+ "-1.2.0-\n"
						+ "\t* UI code has been enhanced to support Linux and OS X!!!\n"
						+ "\t* Suffix field, of the rename controls, has been changed to padding.\n"
						+ "\t* Edit pivot point option added to the 'Reposition Root Object' controls.\n"
						+ "\t* The edit pivot option ONLY works with the rotate pivot. I experimented with scale pivot as well but the results were just terrible.\n"
						+ "\t* Fixed a handful of small bugs with the +/- buttons.\n"
						+ "\t* This is will the last of the new features, time to move on to something else. Any future updates will be bug fixes only.\n"
					+ "\n"
					+ "-1.1.1-\n"
						+ "\t* Worked yet another bug out of dimensional updates when Total Transform is active\n"
						+ "\n"
					+ "-1.1.0-\n"
						+ "\t* When 'Total' transform is active last objects in each row will be positioned correctly\n"
						+ "\t* 'Create Preview' button removed. Now a preview array is active whenever the script is running\n"
						+ "\t* User defined renaming of arrayed objects through the 'Rename' controls\n"
						+ "\t* Users may now transform the root object via the 'Reposition Root Object' controls\n"
						+ "\t* 'About' frame and 'Release Notes' window added\n"
						+ "\t* Even more code cleanup...\n"
						+ "\n"
					+ "-1.0.2-\n"
						+ "\t* Window can now be resized\n"
						+ "\t* Fixed the incremental-to-total calculations. The final object in each row will now transform correctly\n"
						+ "\t* Fixed dimensional updates when the Total fields for Move was active, they now update correctly\n"
						+ "\n"
					+ "-1.0.1-\n"
						+ "\t* Fixed objects collapsing when scaled with scale/scatter on\n"
						+ "\t* Fixed 1D incorrect scale/scatter values when clicking 'Ok'\n"
						+ "\t* Fixed error when Group set to World\n"
						+ "\t* Fixed arrays being created from changing 2D and 3D dimension values when the 'Create Preview' button was not pressed. This only happened after creating a previous array and clicking 'Ok'\n"
						+ "\t* Fixed 'connected or locked' attribute error when creating preview (Maya 2009)\n"
						+ "\t* Removed excess code\n"
						+ "\t* Multiply by 0 prevention added to all procedures affecting the scale values\n"
						+ "\t* Annotations added to controls\n"
						+ "\n"
					+ "-1.0-\n"
						+ "\t* Public Release\n"
					+ "\n"
					+ "Visit these other sites!!\n"
					+ "\tFracture FX\n"
					+ "\twww.fracture-fx.com\n"
					+ "\tA cross-platform, procedural, event-driven destruction plugin for Maya\n"
					+ "\n"
					+ "\tTD College\n"
					+ "\twww.td-college.com\n"
					+ "\tCG education with REAL production value!"
					)
				$release[2];
				
			button
				-label "Exit Release Notes"
				-command ("deleteUI " + $release[0] + ";")
				$release[3];
			
			ewc_arrayInformationControls(4);
			showWindow $release[0];
			break;
		case 4: // Position release 
			formLayout
				-edit
				// scrollField
				-attachForm	$release[2]	$t	2
				-attachForm	$release[2]	$l	2
				-attachForm	$release[2]	$r	2
				-attachForm	$release[2]	$b	25
				
				//button
				-attachControl	$release[3]	$t	2	$release[2]
				-attachForm	$release[3]	$l	2
				-attachForm	$release[3]	$r	2
				-attachForm	$release[3]	$b	2
				
				$release[1];
			break;
	} // End switch
} // End ewc_arrayInformationControls()



//===========================================
// Transform Pivot Toggle
global proc ewc_arrayTogglePivotEdit(int $case)
{
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];
	
	string $fld[] = ewc_arrayControlNames(15, 0, 9);
	string $btn[] = ewc_arrayControlNames(15, 9, 2);
	string $rad[] = ewc_arrayControlNames(15, 18, 3);
	global string	$ewc_arrayVarTargetNameFullPath;
	string $obj = $ewc_arrayVarTargetNameFullPath;
	int $w;
	string $form[] = ewc_arrayControlNames(1,17,1);
	string $hidden[] = ewc_arrayControlNames(17, 0, 3);
	// displayRotatePivot
	//rotateAxisX
	//rotateAxisY
	//rotateAxisZ
	
	
	
	switch ($case)
	{
		// Pivot toggle is off
		case 0:
			// Connect controls to attrs
			string $attr[] = {".translateX", ".translateY", ".translateZ"};
			
			for ($i=0;$i<=2;$i++)
				connectControl $fld[$i] ($obj + $attr[$i]);
			
			setAttr ($obj+".displayRotatePivot") off;
			setAttr ($obj+".displayScalePivot") off;
			
			// loop 1d
			for ($each in $ewc_arrayVarNodePreviewArray1D) {
				setAttr ($each+".displayRotatePivot") off;
				setAttr ($each+".displayScalePivot") off;
			}
			
			// loop 2d
			for ($each in $ewc_arrayVarNodePreviewArray2D) {
				setAttr ($each+".displayRotatePivot") off;
				setAttr ($each+".displayScalePivot") off;
			}
			
			// loop 3d
			for ($each in $ewc_arrayVarNodePreviewArray3D) {
				setAttr ($each+".displayRotatePivot") off;
				setAttr ($each+".displayScalePivot") off;
			}
			
			// Show the transformFields
			floatField -e -vis on $fld[0];
			floatField -e -vis on $fld[1];
			floatField -e -vis on $fld[2];
			
			// Hide the pp fields
			floatField -e -vis off $hidden[0];
			floatField -e -vis off $hidden[1];
			floatField -e -vis off $hidden[2];
			
			radioButton -e -en off $rad[1];
			radioButton -e -en off $rad[2];
			
			// Keep the frame from collapsing
			if (`about -win`)
				$w = 270;
			else if (`about -li`)
				$w = 272;
			else if (`about -mac`)
				$w = 284;
			
			frameLayout -e -w $w $form[0];
			
			// Enable scale/rotate control
			for ($i=3; $i<=8; $i++)
			{
				floatField -edit -enable on $fld[$i];
				button -edit -enable on ($btn[0]+($i+1));
				button -edit -enable on ($btn[1]+($i+1));
			}
			
			break;
			
		// Pivot toggle is on
		case 1: 
			// test radio button
			int $isRotate;
			string $sl = `radioCollection -q -sl $rad[0]`;
			
			if ($sl==$rad[1]) {
				$isRotate=1;
			} else if ($sl==$rad[2]) {
				$isRotate=0;
			}
			
			
			setAttr ($obj+".displayRotatePivot") (($isRotate)?1:0);
			setAttr ($obj+".displayScalePivot") (($isRotate)?0:1);
			
			// loop 1d
			for ($each in $ewc_arrayVarNodePreviewArray1D) {
				setAttr ($each+".displayRotatePivot") (($isRotate)?1:0);
				setAttr ($each+".displayScalePivot") (($isRotate)?0:1);
			}
			
			// loop 2d
			for ($each in $ewc_arrayVarNodePreviewArray2D) {
				setAttr ($each+".displayRotatePivot") (($isRotate)?1:0);
				setAttr ($each+".displayScalePivot") (($isRotate)?0:1);
			}
			
			// loop 3d
			for ($each in $ewc_arrayVarNodePreviewArray3D) {
				setAttr ($each+".displayRotatePivot") (($isRotate)?1:0);
				setAttr ($each+".displayScalePivot") (($isRotate)?0:1);
			}
			
			// Hide the transformFields
			floatField -e -vis off $fld[0];
			floatField -e -vis off $fld[1];
			floatField -e -vis off $fld[2];
			
			// Show the pp fields
			floatField -e -vis on $hidden[0];
			floatField -e -vis on $hidden[1];
			floatField -e -vis on $hidden[2];
			
			radioButton -e -en on $rad[1];
			radioButton -e -en on $rad[2];
			
			// Keep the frame from collapsing
			if (`about -win`)
				$w = 270;
			else if (`about -li`)
				$w = 272;
			else if (`about -mac`)
				$w = 284;
			
			frameLayout -e -w $w $form[0];
			
			// Set pivot attributes
			float $pp[];
			if ($isRotate) {
				$pp = `xform -q -ws -rp $obj`;
			} else {$pp = `xform -q -ws -sp $obj`;}
			
			for ($i=0;$i<=2;$i++){
				floatField -e -v $pp[$i] $hidden[$i];
			}
			
			// Disable scale/rotate control
			for ($i=3; $i<=8; $i++)
			{
				floatField -edit -enable off $fld[$i];
				button -edit -enable off ($btn[0]+($i+1));
				button -edit -enable off ($btn[1]+($i+1));
			}
			
			break;
	}
}
//===========================================
// Controls for the Preview frame
global proc ewc_arrayPreviewFrameControls(int $case)
{
	// Variable and arrays for control names
	string $cbox[] = ewc_arrayControlNames(9, 0, 3);
	
	string $form[] = ewc_arrayControlNames(1, 10, 11);
	
	//___________________
	// Evaluate $case____
	switch($case)
	{
		case 1: // Create the controls
			
			checkBox
				-label "Bounding Box"
				-value false
				-onCommand "ewc_arrayPreviewDrawStates(1, on)"
				-offCommand "ewc_arrayPreviewDrawStates(1, off)"
				$cbox[0];
				
			checkBox
				-label "Wireframe"
				-value false
				-onCommand "ewc_arrayPreviewDrawStates(2, off)"
				-offCommand "ewc_arrayPreviewDrawStates(2, on)"
				$cbox[1];
				
			checkBox
				-label "Visibility"
				-value true
				-onCommand "ewc_arrayPreviewDrawStates(3, on)"
				-offCommand "ewc_arrayPreviewDrawStates(3, off)"
				$cbox[2];
		
			break;
			
		case 2: // Position the controls
		
			// Variable for edge positions
			string $l = "left";
			string $r = "right";
			string $t = "top";
			string $b = "bottom";
			
			int $t1 = (`about -win`) ? 15 : 15;
		
			formLayout
				-edit
				
				// Bounding box cbox
				-attachForm	$cbox[0]	$t	$t1
				-attachForm	$cbox[0]	$l	15
				
				// Wireframe cbox
				-attachControl	$cbox[1]	$t	$t1	$cbox[0]
				-attachForm	$cbox[1]	$l	15
				
				// Visibility cbox
				-attachControl	$cbox[2]	$t	$t1	$cbox[1]
				-attachForm	$cbox[2]	$l	15
				
				$form[0];
		
			break;
	} // End switch
} // End ewc_arrayPreviewFrameControls()



//===========================================
// Controls for the Rename Frame
global proc ewc_arrayRenameControls(int $case)
{
	global string	$ewc_arrayVarTargetNameFullPath;
	string $ctrl[] = ewc_arrayControlNames(12, 0, 5);
	string $form[] = ewc_arrayControlNames(1, 16, 1);
	int $valid;
	
	switch ($case)
	{
		case 1: // Create controls
			checkBox
				-label "User Defined"
				-value false
				-changeCommand "ewc_arrayRenameControls(3)"
				$ctrl[4];
		
			text -label "Name" $ctrl[0];
			text -label "Padding" $ctrl[1];
			
			
			textField
				-width 130
				-enable false
				-annotation "Enter valid object name. A valid object name begins with a letter and is followed by letters, digits, or underscores. Spaces are not allowed."
				-changeCommand "ewc_arrayRenameControls(4)"
				$ctrl[2];
			
			intField
				-width 50
				-enable false
				-step 1
				-value 1
				-minValue 1
				-maxValue 7
				$ctrl[3];
			
			break;
			
		case 2: // Position controls
			// Variable for edge positions
			string $l = "left";
			string $t = "top";
			
			formLayout
				-edit
				// Check box
				-attachForm	$ctrl[4]	$l	15
				-attachForm	$ctrl[4]	$t	5
				
				// Name text
				-attachForm	$ctrl[0]	$l	((`about -mac`)?8:15)
				-attachControl	$ctrl[0]	$t	5	$ctrl[4]
				
				// Name field
				-attachForm	$ctrl[2]	$l	15
				-attachForm	$ctrl[2]	$t	((`about -li`)?47:45)
				
				// Suffix text
				-attachForm	$ctrl[1]	$l	((`about -mac`)?8:15)
				-attachControl	$ctrl[1]	$t	5	$ctrl[2]
				
				// Suffix field
				-attachForm	$ctrl[3]	$l	15
				-attachForm	$ctrl[3]	$t	((`about -mac`)?92:((`about -win`)?90:92))
				
				$form[0];
			break;
			
		case 3: // Toggle states
			int $val = `checkBox -query -value $ctrl[4]`;
			
			textField
				-edit
				-enable (($val) ? true: false)
				$ctrl[2];
			
			intField
				-edit
				-enable (($val) ? true: false)
				$ctrl[3];
				
			// Query and Create name without prefix
			string $name;
			string $letter;
			string $lastValid;
			string $tokenize[];
			int $tokens;
			int $i = 1;
			
			if ($val)
			{
				$tokens = tokenize($ewc_arrayVarTargetNameFullPath, "|", $tokenize);
				$name = $tokenize[$tokens - 1];
				do
				{
					$letter = startString($name, $i);
					$valid = isValidString($letter, "([a-zA-Z_])*");
					if ($valid)
						$lastValid = $letter;
					else
						break;
					$i++;
				} while ($letter != $name);
				
				textField
					-edit
					-text $lastValid
					$ctrl[2];
			}
			break;
		
		case 4: // Check for valid name
			string $name = `textField
					-query
					-text
					$ctrl[2]`;
					
			$valid = isValidObjectName($name);
			
			if (!$valid)
			{
				confirmDialog
					-title "Invalid Object Name"
					-message ("The name '" + $name + "' is not a valid object name.")
					-messageAlign "center"
					-button "OK"
					-defaultButton "OK"
					-dismissString "OK";

				ewc_arrayRenameControls(3);
			}
			break;
		
	} // End switch
} // End ewc_arrayRenameControls()
//===========================================
// Procedure to toggle the Dimension control states
global proc ewc_arrayToggleDimensionControls(int $arg2D, int $arg3D)
{
	// Integer fields
	string $int[] = ewc_arrayControlNames(7, 1, 2);
	
	// Float fields
	string $float[] = ewc_arrayControlNames(8, 0, 6);
	
	// Button names
	string $btn[] = ewc_arrayControlNames(13, 3, 2);	
	
	// 2D_______
	// int field
	intField
		-edit
		-enable $arg2D
		$int[0];
		
	// loop through the float fields and buttons
	for ($i = 0; $i < 4; $i++)
	{
		if ($i <= 2)
		{
			floatField
				-edit
				-enable $arg2D
				$float[$i];
		}
		
		// +
		button
			-edit
			-enable $arg2D
			($btn[0] + ($i + 2));
			
		// -
		button
			-edit
			-enable $arg2D
			($btn[1] + ($i + 2));
			
	}
	
	// 3D_______
	// int field
	intField
		-edit
		-enable $arg3D
		$int[1];
		
	// loop through the float fields and buttons
	for ($i = 3; $i < 7; $i++)
	{
		if ($i <= 5)
		{
			floatField
				-edit
				-enable $arg3D
				$float[$i];
		}
		
		// +
		button
			-edit
			-enable $arg3D
			($btn[0] + ($i + 3));
			
		// -
		button
			-edit
			-enable $arg3D
			($btn[1] + ($i + 3));
	}
	
	// Update the Total display
	ewc_arrayTotalInArrayUpdate();
	
	// Update Array
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];
	if (size($ewc_arrayVarNodePreviewArray1D) || size($ewc_arrayVarNodePreviewArray2D) || size($ewc_arrayVarNodePreviewArray3D))
		ewc_arrayArrayDimensionUpdate();

} // End ewc_arrayToggleDimensionControls()



//===========================================
// Procedure to toggle the Dimension control states
global proc ewc_arrayToggleScatterControls(int $state, int $init, int $btnSeed)
{
	global string	$ewc_arrayVarNodePreviewArray1D[];
	int $size = size($ewc_arrayVarNodePreviewArray1D);
	
	// Control names_____
	string $float[] = ewc_arrayControlNames(11, 0, 18);
	
	// Up/down buttons
	string $btn[] = ewc_arrayControlNames(13, 6, 2);
	
	string $seed[] = ewc_arrayControlNames(13, 8, 3);
	
	string $apply[] = ewc_arrayControlNames(13, 11, 9);
	
	
	for ($i = $init; $i < ($init + 6); $i++)
	{
		floatField
			-edit
			-enable $state
			$float[$i];
			
		// +
		button
			-edit
			-enable $state
			($btn[0] + (1 + $i));
		
		// -
		button
			-edit
			-enable $state
			($btn[1] + (1 + $i));
	}
	
	if ($size)
	{
		// Set states
		button
			-edit
			-enable $state
			$seed[$btnSeed];
		
		// Apply buttons
		int $it;
		
		if ($btnSeed == 0)
			$it = 0;
		else if ($btnSeed == 1)
			$it = 3;
		else
			$it = 6;
		
		
		for ($i = $it; $i < ($it + 3); $i++)
			button
				-edit
				-enable $state
				$apply[$i];
	}
	
	// Enable bonus scale options
	if ($init == 12)
	{
		string $uniform[] = ewc_arrayControlNames(3, 1, 1);
		int $un = `checkBox -query -value $uniform[0]`;
		
		if ($state && $un)
		{
			button -edit -enable false $seed[2];
			button -edit -enable false $apply[7];
			button -edit -enable false $apply[8];
			for ($i = 14; $i < 18; $i++)
				floatField -edit -enable false $float[$i];
			for ($i = 15; $i < 19; $i++)
			{
				button -edit -enable false ($btn[0] + $i);
				button -edit -enable false ($btn[1] + $i);
			}
		}
	}
	
} // End ewc_arrayToggleScatterControls()



//===========================================
// Update the array when the dimensions are changed
global proc ewc_arrayArrayDimensionUpdate()
{
	
	// Query for active array
	global int	$ewc_arrayVarActivePreviewStatus;
	
	// delete and clear
	if (!$ewc_arrayVarActivePreviewStatus)
		return;
	
	ewc_arrayDeleteClearArray(1);
	ewc_arrayCreatePreview();
	
	// scatter
	global float	$ewc_arrayVarScatterTransformX[];
	global float	$ewc_arrayVarScatterTransformY[];
	global float	$ewc_arrayVarScatterTransformZ[];
	global float	$ewc_arrayVarScatterRotationX[];
	global float	$ewc_arrayVarScatterRotationY[];
	global float	$ewc_arrayVarScatterRotationZ[];
	global float	$ewc_arrayVarScatterScaleX[];
	global float	$ewc_arrayVarScatterScaleY[];
	global float	$ewc_arrayVarScatterScaleZ[];
	global int	$ewc_arrayVarScatterEnabled[9];

	// clear disabled scatter fields___
	string $cbox[] = ewc_arrayControlNames(10, 0, 3);
	string $fld[] = ewc_arrayControlNames(11, 0, 18);
	
	if (!`checkBox -query -value $cbox[0]`)
	{
		for ($i = 0; $i < 6; $i++)
			floatField -edit -value 0 $fld[$i];
		clear $ewc_arrayVarScatterTransformX;
		clear $ewc_arrayVarScatterTransformY;
		clear $ewc_arrayVarScatterTransformZ;
		for ($i = 0; $i < 3; $i++)
			$ewc_arrayVarScatterEnabled[$i] = 0;
	}
	
	if (!`checkBox -query -value $cbox[1]`)
	{
		for ($i = 6; $i < 12; $i++)
			floatField -edit -value 0 $fld[$i];
		clear $ewc_arrayVarScatterRotationX;
		clear $ewc_arrayVarScatterRotationY;
		clear $ewc_arrayVarScatterRotationZ;
		for ($i = 3; $i < 6; $i++)
			$ewc_arrayVarScatterEnabled[$i] = 0;
	}
	
	if (!`checkBox -query -value $cbox[2]`)
	{
		for ($i = 12; $i < 18; $i++)
			floatField -edit -value 100 $fld[$i];
		clear $ewc_arrayVarScatterScaleX;
		clear $ewc_arrayVarScatterScaleY;
		clear $ewc_arrayVarScatterScaleZ;
		for ($i = 6; $i < 9; $i++)
			$ewc_arrayVarScatterEnabled[$i] = 0;
	}
	
} // End ewc_arrayArrayDimensionUpdate()



//===========================================
// Clears the arrayed objects and stored transforms
global proc ewc_arrayDeleteClearArray(int $case)
{
	// Delete the geometry and flush the arrays
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];
	
	if (size($ewc_arrayVarNodePreviewArray1D))
	delete $ewc_arrayVarNodePreviewArray1D;
	
	if (size($ewc_arrayVarNodePreviewArray2D))
	delete $ewc_arrayVarNodePreviewArray2D;
	
	if (size($ewc_arrayVarNodePreviewArray3D))
	delete $ewc_arrayVarNodePreviewArray3D;

	clear $ewc_arrayVarNodePreviewArray1D;
	clear $ewc_arrayVarNodePreviewArray2D;
	clear $ewc_arrayVarNodePreviewArray3D;
	
	// Clear the transforms
	global float	$ewc_arrayVarPreviewTransformX[];
	clear $ewc_arrayVarPreviewTransformX;
	global float	$ewc_arrayVarPreviewTransformY[];
	clear $ewc_arrayVarPreviewTransformY;
	global float	$ewc_arrayVarPreviewTransformZ[];
	clear $ewc_arrayVarPreviewTransformZ;
	global float	$ewc_arrayVarPreviewRotationX[];
	clear $ewc_arrayVarPreviewRotationX;
	global float	$ewc_arrayVarPreviewRotationY[];
	clear $ewc_arrayVarPreviewRotationY;
	global float	$ewc_arrayVarPreviewRotationZ[];
	clear $ewc_arrayVarPreviewRotationZ;
	global float	$ewc_arrayVarPreviewScaleX[];
	clear $ewc_arrayVarPreviewScaleX;
	global float	$ewc_arrayVarPreviewScaleY[];
	clear $ewc_arrayVarPreviewScaleY;
	global float	$ewc_arrayVarPreviewScaleZ[];
	clear $ewc_arrayVarPreviewScaleZ;
	
	global float	$ewc_arrayVarScatterTransformX[];
	global float	$ewc_arrayVarScatterTransformY[];
	global float	$ewc_arrayVarScatterTransformZ[];
	global float	$ewc_arrayVarScatterRotationX[];
	global float	$ewc_arrayVarScatterRotationY[];
	global float	$ewc_arrayVarScatterRotationZ[];
	global float	$ewc_arrayVarScatterScaleX[];
	global float	$ewc_arrayVarScatterScaleY[];
	global float	$ewc_arrayVarScatterScaleZ[];
	global int	$ewc_arrayVarScatterEnabled[9];
	
	// scatter
	clear $ewc_arrayVarScatterTransformX;
	clear $ewc_arrayVarScatterTransformY;
	clear $ewc_arrayVarScatterTransformZ;
	clear $ewc_arrayVarScatterRotationX;
	clear $ewc_arrayVarScatterRotationY;
	clear $ewc_arrayVarScatterRotationZ;
	clear $ewc_arrayVarScatterScaleX;
	clear $ewc_arrayVarScatterScaleY;
	clear $ewc_arrayVarScatterScaleZ;
	
	if (!$case)
		clear $ewc_arrayVarScatterEnabled;
	
	
	global int	$ewc_arrayVarActivePreviewStatus;
	$ewc_arrayVarActivePreviewStatus = 0;
				
} // End ewc_arrayDeleteClearArray()




//===========================================
// Update root object via buttons
global proc ewc_arrayUpdateRootObjectButtons(int $dir, string $attr, string $field)
{
	string $cbox[] = ewc_arrayControlNames(15,17,1);
	if (`checkBox -q -v $cbox[0]`) {
		string $xform[] = ewc_arrayControlNames(4,0,3);
		int $index;
		if ($xform[0]==$field) {$index=0;}
		else if ($xform[1]==$field) {$index=1;}
		else if ($xform[2]==$field) {$index=2;}
		ewc_arrayUpdatePivotPoint($index, $dir, $field);
		return;
	}
		
	global string	$ewc_arrayVarTargetNameFullPath;
	string $precField[] = ewc_arrayControlNames(2, 6, 1);
	string $scale[] = ewc_arrayControlNames(4, 6, 3);
	float $prec = `floatField -query -value $precField[0]`;
	float $pos = `getAttr ($ewc_arrayVarTargetNameFullPath + $attr)`;
	
	float $val = (($dir) ? $pos + $prec: $pos - $prec);
	
	// Keep scale values from inverting
	if (stringArrayContains($field, $scale))
		$val = (($val <= 0) ? .001: $val);
	
	setAttr
		($ewc_arrayVarTargetNameFullPath + $attr) 
		$val;
	
	ewc_arrayActiveUpdate($field);
} // End ewc_arrayUpdateRootObjectButtons()
//===========================================
// Text controls for the Transformation controls
global proc ewc_arrayTransformTextControls(int $case)
{
	// Text control names
	string $text[] = ewc_arrayControlNames(14, 0, 1);
	
	// Check box names
	string $cbox[] = ewc_arrayControlNames(3, 0, 2);
	
	// Array for labels
	string $label[] = { "Incremental", "X", "Y", "Z", "Totals", "X", "Y", "Z", "Move", "Rotate", "Scale", "units", "degrees", "percent"};
	
	//___________________
	// Evaluate $case____
	switch($case)
	{
		case 1: // Create 12 text controls
		
			for ($i = 1; $i < 15; $i++)
				text
					-label ($label[($i - 1)])
					($text[0] + $i);
					
			// Create 2 checkboxes
			for ($i = 0; $i < 2; $i++)
				checkBox
					-label ((!$i) ? "Re-Orient" : "Uniform")
					-value ((!$i) ? true : false)
					-onCommand ((!$i) ? "ewc_arrayToggleReorientStates(1)" : "ewc_arrayToggleUniformScale(1)")
					-offCommand ((!$i) ? "ewc_arrayToggleReorientStates(0)" : "ewc_arrayToggleUniformScale(0)")
					$cbox[$i];
				
			break;
			
		case 2: // Position the text controls
			int $t1, $l1_1, $l1_2, $l1_3, $t2, $l1, $inc, $m, $ml, $R, $rl, $s, $sl, $T, $xl, $yl, $zl;
			int $unT, $deT, $peT, $unL, $deL, $peL, $cboxL;
			
			// Form to be edited
			string $form[] = ewc_arrayControlNames(1, 4, 5);
			
			// Controls
			string $btn[] = ewc_arrayControlNames(13, 1, 3);
			
			// Variable for edge positions
			string $l = "left";
			string $r = "right";
			string $t = "top";
			string $b = "bottom";
			
			if (`about -win`) {
				$inc = 80;
				$t1 = 25;
				$l1_1 = 30;
				$l1_2 = 100;
				$l1_3 = 170;
				$m = 45;
				$ml = 13;
				$R = 12;
				$rl = 11;
				$s = 10;
				$sl = 13;
				$T = 270;
				$xl = 30;
				$yl = 62;
				$zl = 62;
				$unT = 23;
				$deT = 8;
				$peT = 8;
				$unL = 90;
				$deL = 75;
				$peL = 77;
				$t2 = 10;
				$cboxL = 50;
			} else if (`about -li`) {
				$inc = 75;
				$t1 = 23;
				$l1_1 = 30;
				$l1_2 = 100;
				$l1_3 = 170;
				$m = 45;
				$ml = 10;
				$R = 10;
				$rl = 9;
				$s = 10;
				$sl = 10;
				$T = 260;
				$xl = 30;
				$yl = 55;
				$zl = 55;
				$unT = 23;
				$deT = 8;
				$peT = 8;
				$unL = 93;
				$deL = 75;
				$peL = 77;
				$t2 = 6;
				$cboxL = 50;
			} else if (`about -mac`) {
				$inc = 68;
				$t1 = 22;
				$l1_1 = 24;
				$l1_2 = 94;
				$l1_3 = 164;
				$m = 48;
				$ml = 4;
				$R = 4;
				$rl = 1;
				$s = 2;
				$sl = 5;
				$T = 240;
				$xl = 22;
				$yl = 48;
				$zl = 46;
				$unT = 16;
				$deT = 8;
				$peT = 8;
				$unL = 116;
				$deL = 100;
				$peL = 102;
				$t2 = 6;
				$cboxL = 75;
			}
			
			formLayout
				-edit
				
				// Incremental
				-attachForm	($text[0] + 1)	$t	5
				-attachForm	($text[0] + 1)	$l	$inc
				
				// Inc X
				-attachForm	($text[0] + 2)	$t	$t1	
				-attachForm	($text[0] + 2)	$l	$l1_1
				
				// Inc Y
				-attachForm	($text[0] + 3)	$t	$t1	
				-attachForm	($text[0] + 3)	$l	$l1_2
				
				// Inc Z
				-attachForm	($text[0] + 4)	$t	$t1	
				-attachForm	($text[0] + 4)	$l	$l1_3
				
				// Move
				-attachForm	($text[0] + 9)	$t	$m
				-attachControl	($text[0] + 9)	$l	$ml	($btn[1] + 1)
				
				// Rotate
				-attachControl	($text[0] + 10)	$t	$R	($text[0] + 9)
				-attachControl	($text[0] + 10)	$l	$rl	($btn[1] + 2)
				
				// Scale
				-attachControl	($text[0] + 11)	$t	$s	($text[0] + 10)
				-attachControl	($text[0] + 11)	$l	$sl	($btn[1] + 3)
				
				// Totals
				-attachForm	($text[0] + 5)	$t	5
				-attachControl	($text[0] + 5)	$l	$T	($text[0] + 1)
				
				// Total X
				-attachForm	($text[0] + 6)	$t	$t1
				-attachControl	($text[0] + 6)	$l	$xl	($btn[1] + 4)
				
				// Total Y
				-attachForm	($text[0] + 7)	$t	$t1
				-attachControl	($text[0] + 7)	$l	$yl	($text[0] + 6)
				
				// Total Z
				-attachForm	($text[0] + 8)	$t	$t1
				-attachControl	($text[0] + 8)	$l	$zl	($text[0] + 7)
				
				// units
				-attachControl	($text[0] + 12)	$t	$unT	($text[0] + 5)
				-attachForm	($text[0] + 12)	$r	$unL	
				
				// degrees
				-attachControl	($text[0] + 13)	$t	$deT	($btn[0] + 12)
				-attachForm	($text[0] + 13)	$r	$deL	
				
				// percent
				-attachControl	($text[0] + 14)	$t	$peT	($btn[0] + 13)
				-attachForm	($text[0] + 14)	$r	$peL	
				
				// Re-Orient (checkbox)
				-attachControl	$cbox[0]	$t	$t2	($btn[0] + 12)
				-attachControl	$cbox[0]	$l	$cboxL	($btn[0] + 15)
				
				// Uniform (checkbox)
				-attachControl	$cbox[1]	$t	$t2	($btn[0] + 15)
				-attachControl	$cbox[1]	$l	$cboxL	($btn[0] + 18)
				
				$form[0];
			break;
	} // End switch
} // End ewc_arrayTransformTextControls()



//===========================================
// Field controls for the Transform frame
global proc ewc_arrayTransformFieldControls(int $case)
{	
	// Field control names
	string $field[] = ewc_arrayControlNames(4, 0, 18);
	
	//___________________
	// Evaluate $case____
	switch($case)
	{
		case 1: // Create the float fields
		
			// Create flag variable
			int $value;
			int $enable;
			int $n;
			string $cmd;
		
			// Create 18 fields
			for ($i = 0; $i < 18; $i ++)
			{
				// Create the command string
				$cmd = ("ewc_arrayManualSpinnerFieldUpdate(" 
					+ (($i < 9) ? 1: 0) + ", \"" 
					+ $field[$i] + "\", \"" 
					+ $field[($n = ($i < 9) ? ($i + 9) : ($i - 9))] + "\"," 
					+ ((($i >= 6 && $i < 9) || ($i >= 15 && $i < 18)) ? 1: 0) + "); "
					+ "ewc_arrayActiveUpdate(\"" + $field[$i] + "\");");
				
				// Create the float fields
				floatField
					-value ((($i >= 6 && $i < 9) || ($i >= 15 && $i < 18)) ? 100 : 0)
					-enable (($i >= 0 && $i < 9) ? true : false)
					-precision ((($i >= 6 && $i < 9) || ($i >= 15 && $i < 18)) ? 1 : 3)
					-step (ewc_arrayDefaultIntegerValues(1))
					-width 50
					-changeCommand $cmd
					-dragCommand $cmd
					$field[$i];
			}
				
			break;
			
		case 2: // Position the floatField controls
			
			// Form to be edited
			string $form[] = ewc_arrayControlNames(1, 4, 5);
			
			// Inc/Total toggle buttons
			string $btn[] = ewc_arrayControlNames(13, 2, 3);
			
			// Variable for edge positions
			string $l = "left";
			string $r = "right";
			string $t = "top";
			string $b = "bottom";
			
			formLayout
				-edit
				
				// INCREMENTAL___________
				
				// Transform X
				-attachForm	$field[0]	$l	8
				-attachForm	$field[0]	$t	42
				
				// Transform Y
				-attachControl	$field[1]	$l	20	$field[0]
				-attachForm	$field[1]	$t	42
				
				// Transform Z
				-attachControl	$field[2]	$l	20	$field[1]
				-attachForm	$field[2]	$t	42
				
				// RotateX
				-attachForm	$field[3]	$l	8
				-attachControl	$field[3]	$t	5	$field[0]
				
				// Rotate Y
				-attachControl	$field[4]	$l	20	$field[3]
				-attachControl	$field[4]	$t	5	$field[1]
				
				// Rotate Z
				-attachControl	$field[5]	$l	20	$field[4]
				-attachControl	$field[5]	$t	5	$field[2]
				
				// Scale X
				-attachForm	$field[6]	$l	8
				-attachControl	$field[6]	$t	5	$field[3]
				
				// Scale Y
				-attachControl	$field[7]	$l	20	$field[6]
				-attachControl	$field[7]	$t	5	$field[4]
				
				// Scale Z
				-attachControl	$field[8]	$l	20	$field[7]
				-attachControl	$field[8]	$t	5	$field[5]
				
				// TOTAL___________
				
				// Transform X
				-attachControl	$field[9]	$l	8	($btn[0] + 4)
				-attachForm	$field[9]	$t	42
				
				// Transform Y
				-attachControl	$field[10]	$l	20	$field[9]
				-attachForm	$field[10]	$t	42
				
				// Transform Z
				-attachControl	$field[11]	$l	20	$field[10]
				-attachForm	$field[11]	$t	42
				
				// Rotate X
				-attachControl	$field[12]	$l	8	($btn[0] + 5)
				-attachControl	$field[12]	$t	5	$field[9]
				
				// Rotate Y
				-attachControl	$field[13]	$l	20	$field[12]
				-attachControl	$field[13]	$t	5	$field[10]
				
				// Rotate Z
				-attachControl	$field[14]	$l	20	$field[13]
				-attachControl	$field[14]	$t	5	$field[11]
				
				// Scale X
				-attachControl	$field[15]	$l	8	($btn[0] + 6)
				-attachControl	$field[15]	$t	5	$field[12]
				
				// Scale Y
				-attachControl	$field[16]	$l	20	$field[15]
				-attachControl	$field[16]	$t	5	$field[13]
				
				// Scale Z
				-attachControl	$field[17]	$l	20	$field[16]
				-attachControl	$field[17]	$t	5	$field[12]
				
				$form[0];
			break;
	} // End switch
} // End ewc_arrayTransformFieldControls()

//===========================================
// Controls for the Preview frame
global proc ewc_arrayScatterFrameControls(int $case)
{
	// Arrays for control names
	string $cbox[] = ewc_arrayControlNames(10, 0, 5);
	
	string $float[] = ewc_arrayControlNames(11, 0, 18);
	
	string $fltLabel[] = { "hi", "lo", "X", "Y", "Z"};
	
	// Scale Constraint Options
	string $radBox[] = ewc_arrayControlNames(12, 0, 4);
	
	// Button control names
	string $btn[] = ewc_arrayControlNames(13, 6, 14);
	string $text[] = ewc_arrayControlNames(14, 2, 3);
		
	// Variables for editing the formLayout____
	string $form[] =  ewc_arrayControlNames(1, 12, 13);
	
	// Variable for edge positions
	string $l = "left";
	string $r = "right";
	string $t = "top";
	
	//___________________
	// Evaluate $case____
	switch($case)
	{
		case 1: // Create controls
		
			// Checkboxes controls
			checkBox
				-label "Move"
				-value off
				-onCommand "ewc_arrayToggleScatterControls(true, 0, 0); ewc_arrayToggleActiveScatter(1)"
				-offCommand "ewc_arrayToggleScatterControls(false, 0, 0); ewc_arrayToggleActiveScatter(1)"
				$cbox[0];
				
			checkBox
				-label "Rotate"
				-value off
				-onCommand "ewc_arrayToggleScatterControls(true, 6, 1); ewc_arrayToggleActiveScatter(2)"
				-offCommand "ewc_arrayToggleScatterControls(false, 6, 1); ewc_arrayToggleActiveScatter(2)"
				$cbox[1];
				
			checkBox
				-label "Scale"
				-value off
				-onCommand "ewc_arrayToggleScatterControls(true, 12, 2); ewc_arrayToggleActiveScatter(3)" //ewc_arrayScatterScaleControlToggle(true)
				-offCommand "ewc_arrayToggleScatterControls(false, 12, 2);; ewc_arrayToggleActiveScatter(3)" //ewc_arrayScatterScaleControlToggle(false)
				$cbox[2];
			
			// Text controls
			int $step = 0;
			
			for ($i = 1; $i < 16; $i++)
			{
				if ($step == 5)
					$step = 0;
				
				text
					-label $fltLabel[$step]
					($text[0] + ($i));
					
				$step++;
			}
			
			// Float field controls
			string $cmd;
			
			for ($i = 0; $i < 12; $i++)
			{
				floatField
					-value 0
					-enable false
					-precision 1
					-step (ewc_arrayDefaultIntegerValues(1))
					-width 45
					$float[$i];
			}
			
			for ($i = 12; $i < 18; $i++)
			{
				//$cmd = ("ewc_arrayRetainCorrectHiLoValues(\"" + $float[$i] + "\")");
				
				floatField
					-value 100
					-enable false
					-precision 1
					-minValue .001
					-step (ewc_arrayDefaultIntegerValues(1))
					//-changeCommand $cmd
					//-dragCommand $cmd
					-width 45
					$float[$i];
			}
			
			// Buttons___
			int $h;
			
			
			if (`about -win`)
				$h = 11;
			else if (`about -li`)
				$h = 13;
			else if (`about -mac`)
				$h = 12;
			
			// + buttons
			for ($i = 1; $i < 19; $i++)
				button
					-label "+"
					-enable false
					-command ("ewc_arrayUpdateScatterFields(1 ,\"" 
							+ $float[$i - 1]
							+ "\", " + (($i >= 13) ? true : false) + ")")
					-width 14
					-height $h
					($btn[0] + $i);
					
			// - buttons
			for ($i = 1; $i < 19; $i++)
				button
					-label "-"
					-enable false
					-command ("ewc_arrayUpdateScatterFields(0 ,\"" 
							+ $float[$i - 1]
							+ "\", " + (($i >= 13) ? true : false) + ")")
					-width 14
					-height $h
					($btn[1] + $i);
					
			// Seed button
			int $w;
			$w = (`about -win`) ? 50: 60;
			
			string $sCmds[] = {	"ewc_arrayScatterTransform(1); ewc_arrayScatterTransform(2); ewc_arrayScatterTransform(3)",
						"ewc_arrayScatterRotate(1); ewc_arrayScatterRotate(2); ewc_arrayScatterRotate(3)",
						"ewc_arrayScatterScale(1); ewc_arrayScatterScale(2); ewc_arrayScatterScale(3)"};
			for ($i = 2; $i < 5; $i++)
				button
					-label "Seed All"
					-width $w
					-height 20
					-enable false
					-command ($sCmds[$i - 2])
					($btn[$i]);
					
			// Apply to Axes buttons
			string $aCmds[] = {	"ewc_arrayScatterTransform(1)",	"ewc_arrayScatterTransform(2)",	"ewc_arrayScatterTransform(3)",
						"ewc_arrayScatterRotate(1)",	"ewc_arrayScatterRotate(2)",	"ewc_arrayScatterRotate(3)",
						"ewc_arrayScatterScale(1)",	"ewc_arrayScatterScale(2)",	"ewc_arrayScatterScale(3)"};
			
			for ($i = 5; $i < 14; $i++)
			{
				button
					-label "Seed"
					-width 45
					-height 20
					-enable false
					-command ($aCmds[$i - 5])
					($btn[$i]);
			}
			
			break;
			
		case 2: // Position controls
			int $x, $y, $z, $t1;
			
			
			if (`about -win`) {
				$x = 25;
				$y = 56;
				$z = 56;
				$t1 = 25;
			} else if (`about -li`) {
				$x = 21;
				$y = 53;
				$z = 52;
				$t1 = 24;
			} else if (`about -mac`) {
				$x = 18;
				$y = 42;
				$z = 42;
				$t1 = 24;
			}
		
			formLayout
				-edit
				
				// CHECKBOXES____
				
				// Move cbox
				-attachControl	$cbox[0]	$l	5	($text[0] + 1)
				-attachForm	$cbox[0]	$t	5
				
				// Rotate cbox
				-attachControl	$cbox[1]	$l	5	($text[0] + 6)
				-attachForm	$cbox[1]	$t	5
				
				// Scale cbox
				-attachControl	$cbox[2]	$l	5	($text[0] + 11)
				-attachForm	$cbox[2]	$t	5
				
				// TEXT____
				
				// Move hi
				-attachForm	($text[0] + 1)	$l	5
				-attachForm	($text[0] + 1)	$t	42
				
				// Move lo
				-attachForm	($text[0] + 2)	$l	5
				-attachControl	($text[0] + 2)	$t	11	($text[0] + 1)
				
				// Move X
				-attachControl	($text[0] + 3)	$l	$x	($text[0] + 1)
				-attachForm	($text[0] + 3)	$t	$t1
				
				// Move Y
				-attachControl	($text[0] + 4)	$l	$y	($text[0] + 3)
				-attachForm	($text[0] + 4)	$t	$t1
				
				// Move Z
				-attachControl	($text[0] + 5)	$l	$z	($text[0] + 4)
				-attachForm	($text[0] + 5)	$t	$t1
				
				// ROTATE___
				
				// Rotate hi
				-attachControl	($text[0] + 6)	$l	20	$float[4]
				-attachForm	($text[0] + 6)	$t	42
				
				// Rotate lo
				-attachControl	($text[0] + 7)	$l	20	$float[5]
				-attachControl	($text[0] + 7)	$t	11	($text[0] + 6)
				
				// Rotate X
				-attachControl	($text[0] + 8)	$l	$x	($text[0] + 6)
				-attachForm	($text[0] + 8)	$t	$t1
				
				// Rotate Y
				-attachControl	($text[0] + 9)	$l	$y	($text[0] + 8)
				-attachForm	($text[0] + 9)	$t	$t1
				
				// Rotate Z
				-attachControl	($text[0] + 10)	$l	$z	($text[0] + 9)
				-attachForm	($text[0] + 10)	$t	$t1
				
				// SCALE___
				
				// Scale hi
				-attachControl	($text[0] + 11)	$l	20	$float[10]
				-attachForm	($text[0] + 11)	$t	42
				
				// Scale lo
				-attachControl	($text[0] + 12)	$l	20	$float[11]
				-attachControl	($text[0] + 12)	$t	11	($text[0] + 11)
				
				// Scale X
				-attachControl	($text[0] + 13)	$l	$x	($text[0] + 12)
				-attachForm	($text[0] + 13)	$t	$t1
				
				// Scale Y
				-attachControl	($text[0] + 14)	$l	$y	($text[0] + 13)
				-attachForm	($text[0] + 14)	$t	$t1
				
				// Scale Z
				-attachControl	($text[0] + 15)	$l	$z	($text[0] + 14)
				-attachForm	($text[0] + 15)	$t	$t1
				
				$form[0];
			
		case 3: // Position float fields
			formLayout
				-edit
				
				// MOVE___
				
				// Move X hi
				-attachControl	$float[0]	$l	5	($text[0] + 1)
				-attachForm	$float[0]	$t	40
				
				// Move X lo
				-attachControl	$float[1]	$l	5	($text[0] + 1)
				-attachControl	$float[1]	$t	5	$float[0]
				
				// Move Y hi
				-attachControl	$float[2]	$l	20	$float[0]
				-attachForm	$float[2]	$t	40
				
				// Move Y lo
				-attachControl	$float[3]	$l	20	$float[1]
				-attachControl	$float[3]	$t	5	$float[2]
				
				// Move Z hi
				-attachControl	$float[4]	$l	20	$float[2]
				-attachForm	$float[4]	$t	40
				
				// Move Z lo
				-attachControl	$float[5]	$l	20	$float[3]
				-attachControl	$float[5]	$t	5	$float[4]
				
				// ROTATE___
				
				// Rotate X hi
				-attachControl	$float[6]	$l	5	($text[0] + 6)
				-attachForm	$float[6]	$t	40
				
				// Rotate X lo
				-attachControl	$float[7]	$l	5	($text[0] + 6)
				-attachControl	$float[7]	$t	5	$float[6]
				
				// Rotate Y hi
				-attachControl	$float[8]	$l	20	$float[6]
				-attachForm	$float[8]	$t	40
				
				// Rotate Y lo
				-attachControl	$float[9]	$l	20	$float[7]
				-attachControl	$float[9]	$t	5	$float[8]
				
				// Rotate Z hi
				-attachControl	$float[10]	$l	20	$float[8]
				-attachForm	$float[10]	$t	40
				
				// Rotate Z lo
				-attachControl	$float[11]	$l	20	$float[9]
				-attachControl	$float[11]	$t	5	$float[10]
				
				// SCALE___
				
				// Scale X hi
				-attachControl	$float[12]	$l	5	($text[0] + 11)
				-attachForm	$float[12]	$t	40
				
				// Scale X lo
				-attachControl	$float[13]	$l	5	($text[0] + 11)
				-attachControl	$float[13]	$t	5	$float[12]
				
				// Scale Y hi
				-attachControl	$float[14]	$l	20	$float[12]
				-attachForm	$float[14]	$t	40
				
				// Scale Y lo
				-attachControl	$float[15]	$l	20	$float[13]
				-attachControl	$float[15]	$t	5	$float[14]
				
				// Scale Z hi
				-attachControl	$float[16]	$l	20	$float[14]
				-attachForm	$float[16]	$t	40
				
				// Scale Z lo
				-attachControl	$float[17]	$l	20	$float[15]
				-attachControl	$float[17]	$t	5	$float[16]
				
				$form[0];
			break;
			
		case 4: // Position buttons
			int $r2, $r4;
						
			if (`about -win`) {
				$r2 = 51;
				$r4 = 78;
			} else if (`about -li`) {
				$r2 = 50;
				$r4 = 78;
			} else if (`about -mac`) {
				$r2 = 52;
				$r4 = 81;
			}
			
			formLayout
				-edit
				
				// MOVE___
				
				// X hi
				-attachControl	($btn[0] + 1)	$l	0	$float[0]
				-attachForm	($btn[0] + 1)	$t	40
				
				-attachControl	($btn[1] + 1)	$l	0	$float[0]
				-attachForm	($btn[1] + 1)	$t	$r2
				
				// X lo
				-attachControl	($btn[0] + 2)	$l	0	$float[1]
				-attachControl	($btn[0] + 2)	$t	5	($btn[1] + 1)
				
				-attachControl	($btn[1] + 2)	$l	0	$float[1]
				-attachForm	($btn[1] + 2)	$t	$r4
				
				// Y hi
				-attachControl	($btn[0] + 3)	$l	0	$float[2]
				-attachForm	($btn[0] + 3)	$t	40
				
				-attachControl	($btn[1] + 3)	$l	0	$float[2]
				-attachForm	($btn[1] + 3)	$t	$r2
				
				// Y lo
				-attachControl	($btn[0] + 4)	$l	0	$float[3]
				-attachControl	($btn[0] + 4)	$t	5	($btn[1] + 3)
				
				-attachControl	($btn[1] + 4)	$l	0	$float[3]
				-attachForm	($btn[1] + 4)	$t	$r4
				
				// Z hi
				-attachControl	($btn[0] + 5)	$l	0	$float[4]
				-attachForm	($btn[0] + 5)	$t	40
				
				-attachControl	($btn[1] + 5)	$l	0	$float[4]
				-attachForm	($btn[1] + 5)	$t	$r2
				
				// Z lo
				-attachControl	($btn[0] + 6)	$l	0	$float[5]
				-attachControl	($btn[0] + 6)	$t	5	($btn[1] + 5)
				
				-attachControl	($btn[1] + 6)	$l	0	$float[5]
				-attachForm	($btn[1] + 6)	$t	$r4
				
				// Rotate___
				
				// X hi
				-attachControl	($btn[0] + 7)	$l	0	$float[6]
				-attachForm	($btn[0] + 7)	$t	40
				
				-attachControl	($btn[1] + 7)	$l	0	$float[6]
				-attachForm	($btn[1] + 7)	$t	$r2
				
				// X lo
				-attachControl	($btn[0] + 8)	$l	0	$float[7]
				-attachControl	($btn[0] + 8)	$t	5	($btn[1] + 7)
				
				-attachControl	($btn[1] + 8)	$l	0	$float[7]
				-attachForm	($btn[1] + 8)	$t	$r4
				
				// Y hi
				-attachControl	($btn[0] + 9)	$l	0	$float[8]
				-attachForm	($btn[0] + 9)	$t	40
				
				-attachControl	($btn[1] + 9)	$l	0	$float[8]
				-attachForm	($btn[1] + 9)	$t	$r2
				
				// Y lo
				-attachControl	($btn[0] + 10)	$l	0	$float[9]
				-attachControl	($btn[0] + 10)	$t	5	($btn[1] + 9)
				
				-attachControl	($btn[1] + 10)	$l	0	$float[9]
				-attachForm	($btn[1] + 10)	$t	$r4
				
				// Z hi
				-attachControl	($btn[0] + 11)	$l	0	$float[10]
				-attachForm	($btn[0] + 11)	$t	40
				
				-attachControl	($btn[1] + 11)	$l	0	$float[10]
				-attachForm	($btn[1] + 11)	$t	$r2
				
				// Z lo
				-attachControl	($btn[0] + 12)	$l	0	$float[11]
				-attachControl	($btn[0] + 12)	$t	5	($btn[1] + 11)
				
				-attachControl	($btn[1] + 12)	$l	0	$float[11]
				-attachForm	($btn[1] + 12)	$t	$r4
				
				// Scale___
				
				// X hi
				-attachControl	($btn[0] + 13)	$l	0	$float[12]
				-attachForm	($btn[0] + 13)	$t	40
				
				-attachControl	($btn[1] + 13)	$l	0	$float[12]
				-attachForm	($btn[1] + 13)	$t	$r2
				
				// X lo
				-attachControl	($btn[0] + 14)	$l	0	$float[13]
				-attachControl	($btn[0] + 14)	$t	5	($btn[1] + 13)
				
				-attachControl	($btn[1] + 14)	$l	0	$float[13]
				-attachForm	($btn[1] + 14)	$t	$r4
				
				// Y hi
				-attachControl	($btn[0] + 15)	$l	0	$float[14]
				-attachForm	($btn[0] + 15)	$t	40
				
				-attachControl	($btn[1] + 15)	$l	0	$float[14]
				-attachForm	($btn[1] + 15)	$t	$r2
				
				// Y lo
				-attachControl	($btn[0] + 16)	$l	0	$float[15]
				-attachControl	($btn[0] + 16)	$t	5	($btn[1] + 15)
				
				-attachControl	($btn[1] + 16)	$l	0	$float[15]
				-attachForm	($btn[1] + 16)	$t	$r4
				
				// Z hi
				-attachControl	($btn[0] + 17)	$l	0	$float[16]
				-attachForm	($btn[0] + 17)	$t	40
				
				-attachControl	($btn[1] + 17)	$l	0	$float[16]
				-attachForm	($btn[1] + 17)	$t	$r2
				
				// Z lo
				-attachControl	($btn[0] + 18)	$l	0	$float[17]
				-attachControl	($btn[0] + 18)	$t	5	($btn[1] + 17)
				
				-attachControl	($btn[1] + 18)	$l	0	$float[17]
				-attachForm	($btn[1] + 18)	$t	$r4
				
				// SEED___
				
				// Translate
				-attachControl	$btn[2]		$l	51	$float[0]
				-attachForm	$btn[2]		$t	2
				
				// Rotate
				-attachControl	$btn[3]		$l	51	$float[7]
				-attachForm	$btn[3]		$t	2
				
				// Scale
				-attachControl	$btn[4]		$l	51	$float[13]
				-attachForm	$btn[4]		$t	2
				
				// APPLY AXES___
				
				// Translate X
				-attachControl	$btn[5]		$t	2	$float[1]
				-attachControl	$btn[5]		$l	5	($text[0] + 1)
				
				// Translate Y
				-attachControl	$btn[6]		$l	20	$float[1]
				-attachControl	$btn[6]		$t	2	$float[3]
				
				// Translate Z
				-attachControl	$btn[7]		$l	20	$float[3]
				-attachControl	$btn[7]		$t	2	$float[5]
				
				// Rotate X
				-attachControl	$btn[8]		$l	5	($text[0] + 6)
				-attachControl	$btn[8]		$t	2	$float[7]
				
				// Rotate Y
				-attachControl	$btn[9]		$l	20	$float[7]
				-attachControl	$btn[9]		$t	2	$float[9]
				
				// Rotate Z
				-attachControl	$btn[10]	$l	20	$float[9]
				-attachControl	$btn[10]	$t	2	$float[11]
				
				// Scale X
				-attachControl	$btn[11]	$l	5	($text[0] + 11)
				-attachControl	$btn[11]	$t	2	$float[13]
				
				// Scale Y
				-attachControl	$btn[12]	$l	20	$float[13]
				-attachControl	$btn[12]	$t	2	$float[15]
				
				// Scale Z
				-attachControl	$btn[13]	$l	20	$float[15]
				-attachControl	$btn[13]	$t	2	$float[17]
				
				$form[0];
				
				
			ewc_arrayCreatePreview();
			
			break;
	} // End switch
	
} // End ewc_arrayScatterFrameControls()




//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// END INTERFACE PROCEDURES
//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
//||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
//===========================================
// Proc that updates the transformation fields
// when the 1D count field is changed.
global proc ewc_array1DUpdateTransformationField()
{
	global int	$ewc_arrayVarStoreActiveSide[];
	string $fld[] = ewc_arrayControlNames(7, 0, 1);
	int $side;
	int $count = `intField
			-query
			-value
			$fld[0]`;
	
	$count = $count - 1;
	
	if ($count == 0)
		return;
	
	// Field control names
	string $field[] =  ewc_arrayControlNames(4, 0, 18);
	
	// Check active Move
	$side = (!$ewc_arrayVarStoreActiveSide[0]) ? 9 : 0;
	
	// Loop through each inactive Move field
	for ($i = $side; $i < ($side + 3); $i++)
	{
		// If the field != 0
		if (`floatField -query -value $field[$i]` != 0)
			// Update field
			floatField
				-edit
				-value (($side == 9) ? (`floatField -query -value $field[$i - 9]` * $count) : (`floatField -query -value $field[$i + 9]` / $count))
				$field[$i];
	}
	
	// Check active Rotate
	$side = (!$ewc_arrayVarStoreActiveSide[1]) ? 12 : 3;
	
	// Loop through each inactive Rotate field
	for ($i = $side; $i < ($side + 3); $i++)
	{
		// If the field != 0
		if (`floatField -query -value $field[$i]` != 0)
			// Update field
			floatField
				-edit
				-value (($side == 12) ? (`floatField -query -value $field[$i - 9]` * $count) : (`floatField -query -value $field[$i + 9]` / $count))
				$field[$i];
	}
	
	// Check active Scale
	$side = (!$ewc_arrayVarStoreActiveSide[2]) ? 15 : 6;
	
	// Check for Uniform
	int $uniform = `checkBox -query -value "ewc_cboxUniformArray"`;
	int $steps = ($uniform) ? 1 : 3;
	// Loop through each inactive Scale field
	for ($i = $side; $i < ($side + $steps); $i++)
	{
		// If the field != 100
		if (`floatField -query -value $field[$i]` != 100)
			floatField
				-edit
				-value (($side == 15) ? 
						ewc_arrayCalculateScaleOffset("total", `floatField -query -value $field[$i - 9]`, `intField -query -value $fld[0]`) 
						: 
						ewc_arrayCalculateScaleOffset("inc", `floatField -query -value $field[$i + 9]`, `intField -query -value $fld[0]`))
				$field[$i];
		
		if ($uniform)
		{
			for ($i = ($side + 1); $i < ($side + 3); $i++)
				floatField
					-edit
					-value (($side == 15) ? `floatField -query -value $field[15]` : `floatField -query -value $field[6]`)
					$field[$i];
		}
	}
} // End ewc_array1DUpdateTransformationField()



//===========================================
// Update display for the array total count
global proc ewc_arrayTotalInArrayUpdate()
{
	// Integer fields
	string $int[] = ewc_arrayControlNames(7, 0, 3);
	
	int $count = 1;
	
	for ($i = 0; $i < 3; $i++)
	{
		if (`intField -query -enable $int[$i]`)
		{
			$count = $count * `intField
						-query
						-value
						$int[$i]`;
		}
	}
	
	// update the total
	text
		-edit
		-label ($count)
		"ewc_txtArrayCountDisplay";
		
	// os fix
	if (!`about -win`)
		frameLayout -edit -width 50 -height 22 ewc_frameArrayCountShell;
	
} // End ewc_arrayTotalInArrayUpdate()




//===========================================
// Update the incremental row offset fields
global proc ewc_arrayUpdateRowOffsetFields(int $dir, string $field)
{
	// Query the precision field
	float $step = `floatField
				-query
				-value
				"ewc_fltFldFieldPrecision"`;
	
	float $value = `floatField
			-query
			-value
			$field`;
	//print ($field + " " + $value+"\n");
	// Update the field
	switch ($dir)
	{
		case 0:
			floatField
				-edit
				-value ($value - $step)
				$field;
			break;
		case 1:
			floatField
				-edit
				-value ($value + $step)
				$field;
			break;
	} // End switch
} // End ewc_arrayUpdateRowOffsetFields()
//===========================================
// Randomize the scaling
global proc ewc_arrayScatterScale(int $case)
{
	// Globals
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];
	global float	$ewc_arrayVarPreviewScaleX[];
	global float	$ewc_arrayVarPreviewScaleY[];
	global float	$ewc_arrayVarPreviewScaleZ[];
	global float	$ewc_arrayVarScatterScaleX[];
	global float	$ewc_arrayVarScatterScaleY[];
	global float	$ewc_arrayVarScatterScaleZ[];
	global int	$ewc_arrayVarScatterEnabled[9];
	
	string $fld[] = ewc_arrayControlNames(11, 12, 6);
	int $size1 = size($ewc_arrayVarNodePreviewArray1D);
	int $size2 = size($ewc_arrayVarNodePreviewArray2D);
	int $size3 = size($ewc_arrayVarNodePreviewArray3D);
	float $hi;
	float $lo;
	float $rand;
	string $uniform[] = ewc_arrayControlNames(3, 1, 1);
	int $uni = `checkBox -query -value $uniform[0]`;
	
	switch ($case)
	{
		case 1: // X
			$lo = `floatField -query -value $fld[0]`;
			$hi = `floatField -query -value $fld[1]`;
			
			// 1D
			if ($size1)
			{
				for ($i = 0; $i < $size1; $i++)
				{
					$rand = rand($lo, $hi);
					$rand = $rand / 100;
					setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".scaleX")
						($ewc_arrayVarPreviewScaleX[$i + 1] * $rand);
						
					$ewc_arrayVarScatterScaleX[$i] = $rand;
					
					if ($uni)
					{
						setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".scaleY")
						($ewc_arrayVarPreviewScaleX[$i + 1] * $rand);
						setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".scaleZ")
						($ewc_arrayVarPreviewScaleX[$i + 1] * $rand);
					}
				}
			}
			
			// 2D
			if ($size2)
			{
				for ($i = 0; $i < $size2; $i++)
				{
					$rand = rand($lo, $hi);
					$rand = $rand / 100;
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleX")
						($ewc_arrayVarPreviewScaleX[$size1 + $i + 1] * $rand);
					
					$ewc_arrayVarScatterScaleX[$size1 + $i] = $rand;
					
					if ($uni)
					{
						setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleY")
						($ewc_arrayVarPreviewScaleX[$size1 + $i + 1] * $rand);
						setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleZ")
						($ewc_arrayVarPreviewScaleX[$size1 + $i + 1] * $rand);
					}
				}
			}
			
			// 3D
			if ($size3)
			{
				for ($i = 0; $i < $size3; $i++)
				{
					$rand = rand($lo, $hi);
					$rand = $rand / 100;
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleX")
						($ewc_arrayVarPreviewScaleX[$size2 + $size1 + $i + 1] * $rand);
					
					$ewc_arrayVarScatterScaleX[$size2 + $size1 + $i] = $rand;
					
					if ($uni)
					{
						setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleY")
						($ewc_arrayVarPreviewScaleX[$size2 + $size1 + $i + 1] * $rand);
						setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleZ")
						($ewc_arrayVarPreviewScaleX[$size2 + $size1 + $i + 1] * $rand);
					}
				}
			}
			
			// Clear if values are both 100
			if ($lo == 100 && $hi == 100)
			{
				clear $ewc_arrayVarScatterScaleX;
				$ewc_arrayVarScatterEnabled[6] = 0;
			} else {
				$ewc_arrayVarScatterEnabled[6] = 1;
			}
			
			break;
			
		case 2: // Y
			$lo = `floatField -query -value $fld[2]`;
			$hi = `floatField -query -value $fld[3]`;
			
			// 1D
			if ($size1)
			{
				for ($i = 0; $i < $size1; $i++)
				{
					$rand = rand($lo, $hi);
					$rand = $rand / 100;
					setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".scaleY")
						($ewc_arrayVarPreviewScaleY[$i + 1] * $rand);
						
					$ewc_arrayVarScatterScaleY[$i] = $rand;
				}
			}
			
			// 2D
			if ($size2)
			{
				for ($i = 0; $i < $size2; $i++)
				{
					$rand = rand($lo, $hi);
					$rand = $rand / 100;
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleY")
						($ewc_arrayVarPreviewScaleY[$size1 + $i + 1] * $rand);
					
					$ewc_arrayVarScatterScaleY[$size1 + $i] = $rand;
				}
			}
			
			// 3D
			if ($size3)
			{
				for ($i = 0; $i < $size3; $i++)
				{
					$rand = rand($lo, $hi);
					$rand = $rand / 100;
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleY")
						($ewc_arrayVarPreviewScaleY[$size2 + $size1 + $i + 1] * $rand);
					
					$ewc_arrayVarScatterScaleY[$size2 + $size1 + $i] = $rand;
				}
			}
			
			// Clear if values are both 100
			if ($lo == 100 && $hi == 100)
			{
				clear $ewc_arrayVarScatterScaleY;
				$ewc_arrayVarScatterEnabled[7] = 0;
			} else {
				$ewc_arrayVarScatterEnabled[7] = 1;
			}
			
			break;
			
		case 3: // Z
			$lo = `floatField -query -value $fld[4]`;
			$hi = `floatField -query -value $fld[5]`;
			
			// 1D
			if ($size1)
			{
				for ($i = 0; $i < $size1; $i++)
				{
					$rand = rand($lo, $hi);
					$rand = $rand / 100;
					setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".scaleZ")
						($ewc_arrayVarPreviewScaleZ[$i + 1] * $rand);
						
					$ewc_arrayVarScatterScaleZ[$i] = $rand;
				}
			}
			
			// 2D
			if ($size2)
			{
				for ($i = 0; $i < $size2; $i++)
				{
					$rand = rand($lo, $hi);
					$rand = $rand / 100;
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleZ")
						($ewc_arrayVarPreviewScaleZ[$size1 + $i + 1] * $rand);
					
					$ewc_arrayVarScatterScaleZ[$size1 + $i] = $rand;
				}
			}
			
			// 3D
			if ($size3)
			{
				for ($i = 0; $i < $size3; $i++)
				{
					$rand = rand($lo, $hi);
					$rand = $rand / 100;
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleZ")
						($ewc_arrayVarPreviewScaleZ[$size2 + $size1 + $i + 1] * $rand);
					
					$ewc_arrayVarScatterScaleZ[$size2 + $size1 + $i] = $rand;
				}
			}
			
			// Clear if values are both 100
			if ($lo == 100 && $hi == 100)
			{
				clear $ewc_arrayVarScatterScaleZ;
				$ewc_arrayVarScatterEnabled[8] = 0;
			} else {
				$ewc_arrayVarScatterEnabled[8] = 1;
			}
			
			break;
	} // End switch
} // ewc_arrayScatterScale
//===========================================
// Interactively update the array
global proc ewc_arrayActiveUpdate(string $field)
{
	// Import globals
	global string	$ewc_arrayVarTargetNameFullPath;
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];
	global float	$ewc_arrayVarPreviewTransformX[];
	global float	$ewc_arrayVarPreviewTransformY[];
	global float	$ewc_arrayVarPreviewTransformZ[];
	global float	$ewc_arrayVarPreviewRotationX[];
	global float	$ewc_arrayVarPreviewRotationY[];
	global float	$ewc_arrayVarPreviewRotationZ[];
	global float	$ewc_arrayVarPreviewScaleX[];
	global float	$ewc_arrayVarPreviewScaleY[];
	global float	$ewc_arrayVarPreviewScaleZ[];
	// scatter
	global float	$ewc_arrayVarScatterTransformX[];
	global float	$ewc_arrayVarScatterTransformY[];
	global float	$ewc_arrayVarScatterTransformZ[];
	global float	$ewc_arrayVarScatterRotationX[];
	global float	$ewc_arrayVarScatterRotationY[];
	global float	$ewc_arrayVarScatterRotationZ[];
	global float	$ewc_arrayVarScatterScaleX[];
	global float	$ewc_arrayVarScatterScaleY[];
	global float	$ewc_arrayVarScatterScaleZ[];
	global int	$ewc_arrayVarScatterEnabled[9];
	
	global int	$ewc_arrayVarStoreActiveSide[3];
	int $totalTranslate = $ewc_arrayVarStoreActiveSide[0];
	int $totalRotate = $ewc_arrayVarStoreActiveSide[1];
	
	// Increment fields
	string $inc[] = ewc_arrayControlNames(4, 0, 9);
	
	// Total fields
	string $tot[] = ewc_arrayControlNames(4, 9, 9);
	
	// Dimension offset fields
	string $dim2D[] = ewc_arrayControlNames(8, 0, 3);
	string $dim3D[] = ewc_arrayControlNames(8, 3, 3);
	
	// Dimension counts
	string $dimInt[] = ewc_arrayControlNames(7, 0, 3);
	int $dimC[3];
	
	for ($i = 0; $i < 3; $i++)
		$dimC[$i] = `intField
				-query
				-value
				$dimInt[$i]`;
	
	//
	string $obj = $ewc_arrayVarTargetNameFullPath;
	int $index;
	int $size;
	int $div;
	int $step = 1;
	int $index = 0;
	int $offset;
	int $s1;
	int $s2;
	int $level1;
	int $level2;
	float $dimVal;
	float $pos;
	float $rand;
	float $val;
	float $dimension;
	
	// Scatter checkboxes
	string $scatterBoxes[] = ewc_arrayControlNames(10, 0, 3);
	int $scatValue[3];
	int $scatEnable[3];
	for ($i = 0; $i < 3; $i++)
	{
		$scatValue[$i] = `checkBox -query -value $scatterBoxes[$i]`;
		$scatEnable[$i] = `checkBox -query -enable $scatterBoxes[$i]`;
	}
	
	
	// Test the active field side
	int $isTotal = stringArrayContains($field, $tot);
	if ($isTotal)
	{
		// If the Total is active find the Increment mirror
		for ($i = 0; $i < size($tot); $i++)
		{
			if ($field == $tot[$i])
			{
				$index = $i;
				break;
			}
		}
	}
	else
	{
		// If the Total is active find the Increment mirror
		for ($i = 0; $i < size($inc); $i++)
		{
			if ($field == $inc[$i])
			{
				$index = $i;
				break;
			}
		}
	}
	
	/*********************************TRANSLATE*************************************************/
	
	// Translate
	if ($index < 3)
	{
		switch ($index)
		{
			case 0: // X___
				// Update 1D
				$ewc_arrayVarPreviewTransformX[0] = `getAttr ($obj + ".translateX")`;
				for ($i = 0; $i < size($ewc_arrayVarNodePreviewArray1D); $i++)
				{
					if ($scatValue[0] && $scatEnable[0] && $ewc_arrayVarScatterEnabled[0])
						$rand = $ewc_arrayVarScatterTransformX[$i];
					else
						$rand = 0;
					
					if ($totalTranslate && $i == (size($ewc_arrayVarNodePreviewArray1D) - 1))
					{
						$pos = `floatField -query -value $tot[0]` + `getAttr ($obj + ".translateX")`;
						setAttr
							($ewc_arrayVarNodePreviewArray1D[$i] + ".translateX") 
							($pos + $rand);
					} else {
						$pos = `getAttr ($obj + ".translateX")` + `floatField -query -value $inc[0]` * ($i + 1);
						setAttr
							($ewc_arrayVarNodePreviewArray1D[$i] + ".translateX") 
							($pos + $rand);
					}
					$ewc_arrayVarPreviewTransformX[$i + 1] = $pos;
					
				}
				
				// Update 2D
				$size = size($ewc_arrayVarNodePreviewArray2D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				if ($size)
				{
					$div = $size / ($dimC[1] - 1);
					$row = $div;
					$index = $s1;
					
					// Reposition roots - this is to compensate for scatter toggling
					$pos = `getAttr ($obj + ".translateX")`;
					$dimension = `floatField -query -value $dim2D[0]`;
					
					// Loop roots
					for ($i = 0; $i < $size; $i += $row)
					{
						if ($scatValue[0] && $scatEnable[0] && $ewc_arrayVarScatterEnabled[0])
							$rand = $ewc_arrayVarScatterTransformX[$s1 + $i];
						else
							$rand = 0;
						
						$val = ($pos + ($dimension * $step));
						
						setAttr
							($ewc_arrayVarNodePreviewArray2D[$i] + ".translateX") 
							($val + $rand);
						$step++;
						
						$ewc_arrayVarPreviewTransformX[$s1 + 1 + $i] = $val;
					}
					
					$step = 1;
					
					// Loop the rest of the array
					
					for ($i = 1; $i < $size; $i++)
					{
						if ($scatValue[0] && $scatEnable[0] && $ewc_arrayVarScatterEnabled[0])
							$rand = $ewc_arrayVarScatterTransformX[$s1 + $i];
						else
							$rand = 0;
						
						if ($i != $div)
						{
							if ($totalTranslate && $i == ($div - 1))
							{
								$pos = $ewc_arrayVarPreviewTransformX[$index + 1] + `floatField -query -value $tot[0]`;
								setAttr
									($ewc_arrayVarNodePreviewArray2D[$i] + ".translateX") 
									($pos + $rand);
								
							} else {
								$pos = $ewc_arrayVarPreviewTransformX[$index + 1] + `floatField -query -value $inc[0]` * $step;
								setAttr
									($ewc_arrayVarNodePreviewArray2D[$i] + ".translateX") 
									($pos + $rand);
							}
							
							// store the new position
							$ewc_arrayVarPreviewTransformX[$row + $i] = $pos;
							
							$step ++;
						} else {
							$div = $div + $row;
							$step = 1;
							$index = $index + $row;
						}
					}
				}
				
				// Update 3D
				$size = size($ewc_arrayVarNodePreviewArray3D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				$s2 = size($ewc_arrayVarNodePreviewArray2D);
				if (!$size)
					return;
				
				$dimension = `floatField -query -value $dim3D[0]`;
				
				// Loop 3D 
				for ($i = 0; $i < $size; $i++)
				{
					if ($scatValue[0] && $scatEnable[0] && $ewc_arrayVarScatterEnabled[0])
						$rand = $ewc_arrayVarScatterTransformX[$s1 + $s2 + $i];
					else
						$rand = 0;
					
					$val = ($dimension + $ewc_arrayVarPreviewTransformX[$i]);
					
					setAttr ($ewc_arrayVarNodePreviewArray3D[$i] + ".translateX") 
						($val + $rand);
					
					$ewc_arrayVarPreviewTransformX[$s1 + $s2 + $i + 1] = $val;
				}
				
				break;
			case 1: // Y___
				// Update 1D
				$ewc_arrayVarPreviewTransformY[0] = `getAttr ($obj + ".translateY")`;
				for ($i = 0; $i < size($ewc_arrayVarNodePreviewArray1D); $i++)
				{
					if ($scatValue[0] && $scatEnable[0] && $ewc_arrayVarScatterEnabled[0])
						$rand = $ewc_arrayVarScatterTransformY[$i];
					else
						$rand = 0;
					
					if ($totalTranslate && $i == (size($ewc_arrayVarNodePreviewArray1D) - 1))
					{
						$pos = `floatField -query -value $tot[1]` + `getAttr ($obj + ".translateY")`;
						setAttr
							($ewc_arrayVarNodePreviewArray1D[$i] + ".translateY") 
							($pos + $rand);
						
					} else {
						$pos = `getAttr ($obj + ".translateY")` + `floatField -query -value $inc[1]` * ($i + 1);
						setAttr
							($ewc_arrayVarNodePreviewArray1D[$i] + ".translateY") 
							($pos + $rand);
					}
					$ewc_arrayVarPreviewTransformY[$i + 1] = $pos;
				}
				
				// Update 2D
				$size = size($ewc_arrayVarNodePreviewArray2D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				if ($size)
				{
					$div = $size / ($dimC[1] - 1);
					$row = $div;
					$index = $s1;
					
					// Reposition roots - this is to compensate for scatter toggling
					$pos = `getAttr ($obj + ".translateY")`;
					$dimension = `floatField -query -value $dim2D[1]`;
					
					// Loop roots
					for ($i = 0; $i < $size; $i += $row)
					{
						if ($scatValue[0] && $scatEnable[0] && $ewc_arrayVarScatterEnabled[1])
							$rand = $ewc_arrayVarScatterTransformY[$s1 + $i];
						else
							$rand = 0;
						
						$val = ($pos + ($dimension * $step));
						
						setAttr
							($ewc_arrayVarNodePreviewArray2D[$i] + ".translateY") 
							($val + $rand);
						$step++;
											
						$ewc_arrayVarPreviewTransformY[$s1 + 1 + $i] = $val;
					}
					
					$step = 1;
					
					// Loop the rest of the array
					for ($i = 1; $i < $size; $i++)
					{
						if ($scatValue[0] && $scatEnable[0] && $ewc_arrayVarScatterEnabled[1])
							$rand = $ewc_arrayVarScatterTransformY[$s1 + $i];
						else
							$rand = 0;
						
						if (($i) != $div)
						{	
							if ($totalTranslate && $i == ($div - 1))
							{
								$pos = $ewc_arrayVarPreviewTransformY[$index + 1] + `floatField -query -value $tot[1]`;
								setAttr
									($ewc_arrayVarNodePreviewArray2D[$i] + ".translateY") 
									($pos + $rand);
								
							} else {
								$pos = $ewc_arrayVarPreviewTransformY[$index + 1] + `floatField -query -value $inc[1]` * $step;
								setAttr
									($ewc_arrayVarNodePreviewArray2D[$i] + ".translateY") 
									($pos + $rand);
							}
							
							// store the new position
							$ewc_arrayVarPreviewTransformY[$row + $i] = $pos;
							
							$step ++;
						} else {
							$div = $div + $row;
							$step = 1;
							$index = $index + $row;
						}
					}
				}
				
				// Update 3D
				$size = size($ewc_arrayVarNodePreviewArray3D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				$s2 = size($ewc_arrayVarNodePreviewArray2D);
				if (!$size)
					return;
				
				$dimension = `floatField -query -value $dim3D[1]`;
				
				// Loop 3D 
				for ($i = 0; $i < $size; $i++)
				{
					if ($scatValue[0] && $scatEnable[0] && $ewc_arrayVarScatterEnabled[1])
						$rand = $ewc_arrayVarScatterTransformY[$s1 + $s2 + $i];
					else
						$rand = 0;
					
					$val = ($dimension + $ewc_arrayVarPreviewTransformY[$i]);
					
					setAttr ($ewc_arrayVarNodePreviewArray3D[$i] + ".translateY") 
						($val + $rand);
					
					$ewc_arrayVarPreviewTransformY[$s1 + $s2 + $i + 1] = $val;
				}
				
				break;
			case 2: // Z___
				// Update 1D
				$ewc_arrayVarPreviewTransformZ[0] = `getAttr ($obj + ".translateZ")`;
				for ($i = 0; $i < size($ewc_arrayVarNodePreviewArray1D); $i++)
				{
					if ($scatValue[0] && $scatEnable[0] && $ewc_arrayVarScatterEnabled[0])
						$rand = $ewc_arrayVarScatterTransformZ[$i];
					else
						$rand = 0;
					
					if ($totalTranslate && $i == (size($ewc_arrayVarNodePreviewArray1D) - 1))
					{
						$pos = `floatField -query -value $tot[2]` + `getAttr ($obj + ".translateZ")`;
						setAttr
							($ewc_arrayVarNodePreviewArray1D[$i] + ".translateZ") 
							($pos + $rand);
						
					} else {
						$pos = `getAttr ($obj + ".translateZ")` + `floatField -query -value $inc[2]` * ($i + 1);
						setAttr
							($ewc_arrayVarNodePreviewArray1D[$i] + ".translateZ") 
							($pos + $rand);
					}
					$ewc_arrayVarPreviewTransformZ[$i + 1] = $pos;
				}
								
				// Update 2D
				$size = size($ewc_arrayVarNodePreviewArray2D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				if ($size)
				{
					$div = $size / ($dimC[1] - 1);
					$row = $div;
					$index = $s1;
					
					// Reposition roots - this is to compensate for scatter toggling
					$pos = `getAttr ($obj + ".translateZ")`;
					$dimension = `floatField -query -value $dim2D[2]`;
					
					// Loop roots
					for ($i = 0; $i < $size; $i += $row)
					{
						if ($scatValue[0] && $scatEnable[0] && $ewc_arrayVarScatterEnabled[2])
							$rand = $ewc_arrayVarScatterTransformZ[$s1 + $i];
						else
							$rand = 0;
						
						$val = ($pos + ($dimension * $step));
						
						setAttr
							($ewc_arrayVarNodePreviewArray2D[$i] + ".translateZ") 
							($val + $rand);
						$step++;
						
						$ewc_arrayVarPreviewTransformZ[$s1 + 1 + $i] = $val;
					}
					
					$step = 1;
					
					// Loop the rest of the array
					
					for ($i = 1; $i < $size; $i++)
					{
						if ($scatValue[0] && $scatEnable[0] && $ewc_arrayVarScatterEnabled[2])
							$rand = $ewc_arrayVarScatterTransformZ[$s1 + $i];
						else
							$rand = 0;
						
						if (($i) != $div)
						{
							if ($totalTranslate && $i == ($div - 1))
							{
								$pos = $ewc_arrayVarPreviewTransformZ[$index + 1] + `floatField -query -value $tot[2]`;
								setAttr
									($ewc_arrayVarNodePreviewArray2D[$i] + ".translateZ") 
									($pos + $rand);
								
							} else {
								$pos = $ewc_arrayVarPreviewTransformZ[$index + 1] + `floatField -query -value $inc[2]` * $step;
								setAttr
									($ewc_arrayVarNodePreviewArray2D[$i] + ".translateZ") 
									($pos + $rand);
							}
							
							// store the new position
							$ewc_arrayVarPreviewTransformZ[$row + $i] = $pos;
							
							$step ++;
						} else {
							$div = $div + $row;
							$step = 1;
							$index = $index + $row;
						}
					}
				}
				
				// Update 3D
				$size = size($ewc_arrayVarNodePreviewArray3D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				$s2 = size($ewc_arrayVarNodePreviewArray2D);
				if (!$size)
					return;
				
				$dimension = `floatField -query -value $dim3D[2]`;
				
				// Loop 3D 
				for ($i = 0; $i < $size; $i++)
				{
					if ($scatValue[0] && $scatEnable[0] && $ewc_arrayVarScatterEnabled[2])
						$rand = $ewc_arrayVarScatterTransformZ[$s1 + $s2 + $i];
					else
						$rand = 0;
					
					$val = ($dimension + $ewc_arrayVarPreviewTransformZ[$i]);
					
					setAttr ($ewc_arrayVarNodePreviewArray3D[$i] + ".translateZ") 
						($val + $rand);
					
					$ewc_arrayVarPreviewTransformZ[$s1 + $s2 + $i + 1] = $val;
				}
				break;
		} // End switch
	}
	
	/*********************************ROTATION*************************************************/
	
	// Rotation
	if ($index >= 3 && $index < 6)
	{
		switch ($index)
		{
			case 3: // X___
				// Update 1D
				$ewc_arrayVarPreviewRotationX[0] = `getAttr ($obj + ".rotateX")`;
				for ($i = 0; $i < size($ewc_arrayVarNodePreviewArray1D); $i++)
				{
					if ($scatValue[1] && $scatEnable[1] && $ewc_arrayVarScatterEnabled[3])
						$rand = $ewc_arrayVarScatterRotationX[$i];
					else
						$rand = 0;
					
					if ($totalRotate && $i == (size($ewc_arrayVarNodePreviewArray1D) - 1))
					{
						$pos = `floatField -query -value $tot[3]` + `getAttr ($obj + ".rotateX")`;
						setAttr
							($ewc_arrayVarNodePreviewArray1D[$i] + ".rotateX") 
							($pos + $rand);
						
					} else {
						$pos = `getAttr ($obj + ".rotateX")` + `floatField -query -value $inc[3]` * ($i + 1);
						setAttr
							($ewc_arrayVarNodePreviewArray1D[$i] + ".rotateX") 
							($pos + $rand);
					}
						
					$ewc_arrayVarPreviewRotationX[$i + 1] = $pos;
				}
				
				// Update 2D
				$size = size($ewc_arrayVarNodePreviewArray2D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				if ($size)
				{
					$div = $size / ($dimC[1] - 1);
					$row = $div;
					$index = $s1;
					
					// Reposition roots - this is to compensate for scatter toggling
					$pos = `getAttr ($obj + ".rotateX")`;
					
					// Loop roots
					for ($i = 0; $i < $size; $i += $row)
					{
						if ($scatValue[1] && $scatEnable[1] && $ewc_arrayVarScatterEnabled[3])
							$rand = $ewc_arrayVarScatterRotationX[$s1 + $i];
						else
							$rand = 0;
						
						setAttr
							($ewc_arrayVarNodePreviewArray2D[$i] + ".rotateX") 
							($pos + $rand);
						
						$ewc_arrayVarPreviewRotationX[$s1 + 1 + $i] = $pos;
					}
					
					// Loop the rest of the array
					
					for ($i = 1; $i < $size; $i++)
					{
						if ($scatValue[1] && $scatEnable[1] && $ewc_arrayVarScatterEnabled[3])
							$rand = $ewc_arrayVarScatterRotationX[$s1 + $i];
						else
							$rand = 0;
						
						if (($i) != $div)
						{
							if ($totalRotate && $i == ($div - 1))
							{
								$pos = $ewc_arrayVarPreviewRotationX[$index + 1] + `floatField -query -value $tot[3]`;
								setAttr
									($ewc_arrayVarNodePreviewArray2D[$i] + ".rotateX") 
									($pos + $rand);
								
							} else {
								$pos = $ewc_arrayVarPreviewRotationX[$index + 1] + `floatField -query -value $inc[3]` * $step;
								setAttr
									($ewc_arrayVarNodePreviewArray2D[$i] + ".rotateX") 
									($pos + $rand);
							}
							
							// store the new position
							$ewc_arrayVarPreviewRotationX[$row + $i] = $pos;
							
							$step ++;
						} else {
							$div = $div + $row;
							$step = 1;
							$index = $index + $row;
						}
					}
				}
				
				// Update 3D
				$size = size($ewc_arrayVarNodePreviewArray3D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				$s2 = size($ewc_arrayVarNodePreviewArray2D);
				if (!$size)
					return;
				
				$offset = $dimC[0] * $dimC[1];
				$div = $size / ($dimC[1] * ($dimC[2] - 1));
				$row = $div;
				$level1 = $offset - $row;
				$level2 = $level1;
				$index = $s2 + $s1;
				$step = 0;
				
				// Reposition roots - this is to compensate for scatter toggling
				$pos = `getAttr ($obj + ".rotateX")`;
				
				// Loop roots
				for ($i = 0; $i < $size; $i += $row)
				{
					if ($scatValue[1] && $scatEnable[1] && $ewc_arrayVarScatterEnabled[3])
						$rand = $ewc_arrayVarScatterRotationX[$s2 + $s1 + $i];
					else
						$rand = 0;
					
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".rotateX") 
						($pos + $rand);
					$step++;
					
					$ewc_arrayVarPreviewRotationX[$offset + $i] = $pos;
					
					if ($i == ($level1))
					{
						$step = 0;
						$level1 = $level2 + $level1 + $row;
					}
				}
				
				$step = 1;
				
				$div = $row;
				
				// Loop the rest of the array
				
				for ($i = 1; $i < $size; $i++)
				{
					if ($scatValue[1] && $scatEnable[1] && $ewc_arrayVarScatterEnabled[3])
						$rand = $ewc_arrayVarScatterRotationX[($s2 + $s1) + $i];
					else
						$rand = 0;
					
					if (($i) != $div)
					{
						// get the root object position of that row
						//$pos = $ewc_arrayVarPreviewRotationX[$index + 1] + `floatField -query -value $inc[3]` * $step;
						$pos = $ewc_arrayVarPreviewRotationX[$i];
						setAttr
							($ewc_arrayVarNodePreviewArray3D[$i] + ".rotateX") 
							($pos + $rand);
							
						
						// store the new position
						$ewc_arrayVarPreviewRotationX[$offset + $i] = $pos;
						
						$step ++;
					} else {
						$div = $div + $row;
						$step = 1;
						$index = $index + $row;
					}
				}
				
				break;
			case 4: // Y___
				// Update 1D
				$ewc_arrayVarPreviewRotationY[0] = `getAttr ($obj + ".rotateY")`;
				for ($i = 0; $i < size($ewc_arrayVarNodePreviewArray1D); $i++)
				{
					if ($scatValue[1] && $scatEnable[1] && $ewc_arrayVarScatterEnabled[4])
						$rand = $ewc_arrayVarScatterRotationY[$i];
					else
						$rand = 0;
					
					if ($totalRotate && $i == (size($ewc_arrayVarNodePreviewArray1D) - 1))
					{
						$pos = `floatField -query -value $tot[4]` + `getAttr ($obj + ".rotateY")`;
						setAttr
							($ewc_arrayVarNodePreviewArray1D[$i] + ".rotateY") 
							($pos + $rand);
						
					} else {
						$pos = `getAttr ($obj + ".rotateY")` + `floatField -query -value $inc[4]` * ($i + 1);
						setAttr
							($ewc_arrayVarNodePreviewArray1D[$i] + ".rotateY") 
							($pos + $rand);
					}
						
					$ewc_arrayVarPreviewRotationY[$i + 1] = $pos;
				}
				
				// Update 2D
				$size = size($ewc_arrayVarNodePreviewArray2D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				if ($size)
				{
					$div = $size / ($dimC[1] - 1);
					$row = $div;
					$index = $s1;
					
					// Reposition roots - this is to compensate for scatter toggling
					$pos = `getAttr ($obj + ".rotateY")`;
					
					// Loop roots
					for ($i = 0; $i < $size; $i += $row)
					{
						if ($scatValue[1] && $scatEnable[1] && $ewc_arrayVarScatterEnabled[4])
							$rand = $ewc_arrayVarScatterRotationY[$s1 + $i];
						else
							$rand = 0;
						
						setAttr
							($ewc_arrayVarNodePreviewArray2D[$i] + ".rotateY") 
							($pos + $rand);
						
						$ewc_arrayVarPreviewRotationY[$s1 + 1 + $i] = $pos;
					}
					
					// Loop the rest of the array
					
					for ($i = 1; $i < $size; $i++)
					{
						if ($scatValue[1] && $scatEnable[1] && $ewc_arrayVarScatterEnabled[4])
							$rand = $ewc_arrayVarScatterRotationY[$s1 + $i];
						else
							$rand = 0;
						
						if (($i) != $div)
						{
							if ($totalRotate && $i == ($div - 1))
							{
								$pos = $ewc_arrayVarPreviewRotationY[$index + 1] + `floatField -query -value $tot[4]`;
								setAttr
									($ewc_arrayVarNodePreviewArray2D[$i] + ".rotateY") 
									($pos + $rand);
								
							} else {
								$pos = $ewc_arrayVarPreviewRotationY[$index + 1] + `floatField -query -value $inc[4]` * $step;
								setAttr
									($ewc_arrayVarNodePreviewArray2D[$i] + ".rotateY") 
									($pos + $rand);
							}
							
							// store the new position
							$ewc_arrayVarPreviewRotationY[$row + $i] = $pos;
							
							$step ++;
						} else {
							$div = $div + $row;
							$step = 1;
							$index = $index + $row;
						}
					}
				}
				
				// Update 3D
				$size = size($ewc_arrayVarNodePreviewArray3D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				$s2 = size($ewc_arrayVarNodePreviewArray2D);
				if (!$size)
					return;
				
				$offset = $dimC[0] * $dimC[1];
				$div = $size / ($dimC[1] * ($dimC[2] - 1));
				$row = $div;
				$level1 = $offset - $row;
				$level2 = $level1;
				$index = $s2 + $s1;
				$step = 0;
				
				// Reposition roots - this is to compensate for scatter toggling
				$pos = `getAttr ($obj + ".rotateY")`;
				
				// Loop roots
				for ($i = 0; $i < $size; $i += $row)
				{
					if ($scatValue[1] && $scatEnable[1] && $ewc_arrayVarScatterEnabled[4])
						$rand = $ewc_arrayVarScatterRotationY[$s2 + $s1 + $i];
					else
						$rand = 0;
					
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".rotateY") 
						($pos + $rand);
					$step++;
					
					$ewc_arrayVarPreviewRotationY[$offset + $i] = $pos;
					
					if ($i == ($level1))
					{
						$step = 0;
						$level1 = $level2 + $level1 + $row;
					}
				}
				
				$step = 1;
				
				$div = $row;
				
				// Loop the rest of the array
				
				for ($i = 1; $i < $size; $i++)
				{
					if ($scatValue[1] && $scatEnable[1] && $ewc_arrayVarScatterEnabled[4])
						$rand = $ewc_arrayVarScatterRotationY[($s2 + $s1) + $i];
					else
						$rand = 0;
					
					if (($i) != $div)
					{
						// get the root object position of that row
						//$pos = $ewc_arrayVarPreviewRotationY[$index + 1] + `floatField -query -value $inc[4]` * $step;
						$pos = $ewc_arrayVarPreviewRotationY[$i];
						setAttr
							($ewc_arrayVarNodePreviewArray3D[$i] + ".rotateY") 
							($pos + $rand);
							
						
						// store the new position
						$ewc_arrayVarPreviewRotationY[$offset + $i] = $pos;
						
						$step ++;
					} else {
						$div = $div + $row;
						$step = 1;
						$index = $index + $row;
					}
				}
				
				break;
			case 5: // Z___
				// Update 1D
				$ewc_arrayVarPreviewRotationZ[0] = $pos = `getAttr ($obj + ".rotateZ")`;
				for ($i = 0; $i < size($ewc_arrayVarNodePreviewArray1D); $i++)
				{
					if ($scatValue[1] && $scatEnable[1] && $ewc_arrayVarScatterEnabled[5])
						$rand = $ewc_arrayVarScatterRotationZ[$i];
					else
						$rand = 0;
					
					if ($totalRotate && $i == (size($ewc_arrayVarNodePreviewArray1D) - 1))
					{
						$pos = `floatField -query -value $tot[5]` + `getAttr ($obj + ".rotateZ")`;
						setAttr
							($ewc_arrayVarNodePreviewArray1D[$i] + ".rotateZ") 
							($pos + $rand);
						
					} else {
						$pos = `getAttr ($obj + ".rotateZ")` + `floatField -query -value $inc[5]` * ($i + 1);
						setAttr
							($ewc_arrayVarNodePreviewArray1D[$i] + ".rotateZ") 
							($pos + $rand);
					}
						
					$ewc_arrayVarPreviewRotationZ[$i + 1] = $pos;
				}
				
				// Update 2D
				$size = size($ewc_arrayVarNodePreviewArray2D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				if ($size)
				{
					$div = $size / ($dimC[1] - 1);
					$row = $div;
					$index = $s1;
					
					// Reposition roots - this is to compensate for scatter toggling
					$pos = `getAttr ($obj + ".rotateZ")`;
					
					// Loop roots
					for ($i = 0; $i < $size; $i += $row)
					{
						if ($scatValue[1] && $scatEnable[1] && $ewc_arrayVarScatterEnabled[5])
							$rand = $ewc_arrayVarScatterRotationZ[$s1 + $i];
						else
							$rand = 0;
						
						setAttr
							($ewc_arrayVarNodePreviewArray2D[$i] + ".rotateZ") 
							($pos + $rand);
						
						$ewc_arrayVarPreviewRotationZ[$s1 + 1 + $i] = $pos;
					}
					
					// Loop the rest of the array
					
					for ($i = 1; $i < $size; $i++)
					{
						if ($scatValue[1] && $scatEnable[1] && $ewc_arrayVarScatterEnabled[5])
							$rand = $ewc_arrayVarScatterRotationZ[$s1 + $i];
						else
							$rand = 0;
						
						if (($i) != $div)
						{
							if ($totalRotate && $i == ($div - 1))
							{
								$pos = $ewc_arrayVarPreviewRotationZ[$index + 1] + `floatField -query -value $tot[5]`;
								setAttr
									($ewc_arrayVarNodePreviewArray2D[$i] + ".rotateZ") 
									($pos + $rand);
								
							} else {
								$pos = $ewc_arrayVarPreviewRotationZ[$index + 1] + `floatField -query -value $inc[5]` * $step;
								setAttr
									($ewc_arrayVarNodePreviewArray2D[$i] + ".rotateZ") 
									($pos + $rand);
							}
							
							// store the new position
							$ewc_arrayVarPreviewRotationZ[$row + $i] = $pos;
							
							$step ++;
						} else {
							$div = $div + $row;
							$step = 1;
							$index = $index + $row;
						}
					}
				}
				
				// Update 3D
				$size = size($ewc_arrayVarNodePreviewArray3D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				$s2 = size($ewc_arrayVarNodePreviewArray2D);
				if (!$size)
					return;
				
				$offset = $dimC[0] * $dimC[1];
				$div = $size / ($dimC[1] * ($dimC[2] - 1));
				$row = $div;
				$level1 = $offset - $row;
				$level2 = $level1;
				$index = $s2 + $s1;
				$step = 0;
				
				// Reposition roots - this is to compensate for scatter toggling
				$pos = `getAttr ($obj + ".rotateZ")`;
				
				// Loop roots
				for ($i = 0; $i < $size; $i += $row)
				{
					if ($scatValue[1] && $scatEnable[1] && $ewc_arrayVarScatterEnabled[5])
						$rand = $ewc_arrayVarScatterRotationZ[$s2 + $s1 + $i];
					else
						$rand = 0;
					
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".rotateZ") 
						($pos + $rand);
					$step++;
					
					$ewc_arrayVarPreviewRotationZ[$offset + $i] = $pos;
					
					if ($i == ($level1))
					{
						$step = 0;
						$level1 = $level2 + $level1 + $row;
					}
				}
				
				$step = 1;
				
				$div = $row;
				
				// Loop the rest of the array
				
				for ($i = 1; $i < $size; $i++)
				{
					if ($scatValue[1] && $scatEnable[1] && $ewc_arrayVarScatterEnabled[5])
						$rand = $ewc_arrayVarScatterRotationZ[($s2 + $s1) + $i];
					else
						$rand = 0;
					
					if (($i) != $div)
					{
						// get the root object position of that row
						//$pos = $ewc_arrayVarPreviewRotationZ[$index + 1] + `floatField -query -value $inc[5]` * $step;
						$pos = $ewc_arrayVarPreviewRotationZ[$i];
						setAttr
							($ewc_arrayVarNodePreviewArray3D[$i] + ".rotateZ") 
							($pos + $rand);
							
						
						// store the new position
						$ewc_arrayVarPreviewRotationZ[$offset + $i] = $pos;
						
						$step ++;
					} else {
						$div = $div + $row;
						$step = 1;
						$index = $index + $row;
					}
				}
				
				break;
		} // End switch
	} // End Rotation
	
	/*********************************SCALE*************************************************/
	
	// Scale
	if ($index >= 6)
	{
		float $scale;
		float $rate;
		switch ($index)
		{
			case 6: // X___
				// Update 1D
				$scale = `getAttr ($obj + ".scaleX")`;
				$rate = `floatField -query -value $inc[6]` / 100;
				for ($i = 0; $i < size($ewc_arrayVarNodePreviewArray1D); $i++)
				{
					if ($scatValue[2] && $scatEnable[2] && $ewc_arrayVarScatterEnabled[6])
						$rand = $ewc_arrayVarScatterScaleX[$i];
					else
						$rand = 1;
					$rand = ((!$rand) ? 1: $rand);
					$ewc_arrayVarPreviewScaleX[$i + 1] = ((!$i) ? ($scale * $rate) : ($ewc_arrayVarPreviewScaleX[$i] * $rate));
					$val = ($ewc_arrayVarPreviewScaleX[$i + 1] * $rand);
					$val = (($val < .001) ? .001: $val);
					
					setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".scaleX") 
						$val;
					
					// Check for uniform, if on update the Y and Z attrs
					string $uniform[] = ewc_arrayControlNames(3, 1, 1);
					if (`checkBox -query -value $uniform[0]`)
					{
						setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".scaleY") 
						$val;
						setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".scaleZ") 
						$val;
					}
				}
				
				
				// Update 2D
				$size = size($ewc_arrayVarNodePreviewArray2D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				if ($size)
				{
					$div = $size / ($dimC[1] - 1);
					$row = $div;
					
					// Reposition roots - this is to compensate for scatter toggling
					$pos = `getAttr ($obj + ".scaleX")`;
					
					// Loop roots
					for ($i = 0; $i < $size; $i += $row)
					{
						if ($scatValue[2] && $scatEnable[2] && $ewc_arrayVarScatterEnabled[6])
							$rand = $ewc_arrayVarScatterScaleX[$s1 + $i];
						else
							$rand = 1;
						$rand = ((!$rand) ? 1: $rand);
						$val = $pos * $rand;
						$val = (($val < .001) ? .001: $val);
						
						setAttr
							($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleX") 
							$val;
						
						$ewc_arrayVarPreviewScaleX[$s1 + 1 + $i] = $pos;
						
						// Check for uniform, if on update the Y and Z attrs
						string $uniform[] = ewc_arrayControlNames(3, 1, 1);
						if (`checkBox -query -value $uniform[0]`)
						{
							setAttr
							($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleY") 
							$val;
							setAttr
							($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleZ") 
							$val;
						}
					}
					
					// Loop the rest of the array
					
					for ($i = 1; $i < $size; $i++)
					{
						if ($scatValue[2] && $scatEnable[2] && $ewc_arrayVarScatterEnabled[6])
							$rand = $ewc_arrayVarScatterScaleX[$s1 + $i];
						else
							$rand = 1;
						$rand = ((!$rand) ? 1: $rand);
						if (($i) != $div)
						{
							// get the the scale of the previous object
							$pos = ($ewc_arrayVarPreviewScaleX[$row + ($i - 1)] * $rate);
							
							$val = $pos * $rand;
							$val = (($val < .001) ? .001: $val);
							
							setAttr
								($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleX") 
								$val;
							
							// store the new position
							$ewc_arrayVarPreviewScaleX[$row + ($i)] = $pos;
							
							// Check for uniform, if on update the Y and Z attrs
							string $uniform[] = ewc_arrayControlNames(3, 1, 1);
							if (`checkBox -query -value $uniform[0]`)
							{
								setAttr
								($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleY") 
								$val;
								setAttr
								($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleZ") 
								$val;
							}
							
						} else {
							$div = $div + $row;
						}
					}
				}
				
				// Update 3D
				$size = size($ewc_arrayVarNodePreviewArray3D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				$s2 = size($ewc_arrayVarNodePreviewArray2D);
				if (!$size)
					return;
				
				$offset = $dimC[0] * $dimC[1];
				$div = $size / ($dimC[1] * ($dimC[2] - 1));
				$row = $div;
				$level1 = $offset - $row;
				$level2 = $level1;
				
				// Reset roots - this is to compensate for scatter toggling
				$pos = `getAttr ($obj + ".scaleX")`;
				
				// Loop roots
				for ($i = 0; $i < $size; $i += $row)
				{
					if ($scatValue[2] && $scatEnable[2] && $ewc_arrayVarScatterEnabled[6])
						$rand = $ewc_arrayVarScatterScaleX[$s2 + $s1 + $i];
					else
						$rand = 1;
					$rand = ((!$rand) ? 1: $rand);
					$val = $pos * $rand;
					$val = (($val < .001) ? .001: $val);
					
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleX") 
						$val;
					$step++;
					
					$ewc_arrayVarPreviewScaleX[$offset + $i] = $pos;
					
					if ($i == ($level1))
						$level1 = $level2 + $level1 + $row;
					
					// Check for uniform, if on update the Y and Z attrs
					string $uniform[] = ewc_arrayControlNames(3, 1, 1);
					if (`checkBox -query -value $uniform[0]`)
					{
						setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleY") 
						$val;
						setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleZ") 
						$val;
					}
				}
				
				$div = $row;
				
				// Loop the rest of the array
				
				for ($i = 1; $i < $size; $i++)
				{
					if ($scatValue[2] && $scatEnable[2] && $ewc_arrayVarScatterEnabled[6])
						$rand = $ewc_arrayVarScatterScaleX[($s2 + $s1) + $i];
					else
						$rand = 1;
					$rand = ((!$rand) ? 1: $rand);
					if (($i) != $div)
					{
						// get the the scale of the previous object
						$pos = ($ewc_arrayVarPreviewScaleX[$row + ($i - 1)] * $rate);
						
						$val = $pos * $rand;
						$val = (($val < .001) ? .001: $val);
							
						setAttr
							($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleX") 
							$val;
							
						
						// store the new position
						$ewc_arrayVarPreviewScaleX[$offset + $i] = $pos;
						
						
						// Check for uniform, if on update the Y and Z attrs
						string $uniform[] = ewc_arrayControlNames(3, 1, 1);
						if (`checkBox -query -value $uniform[0]`)
						{
							setAttr
							($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleY") 
							$val;
							setAttr
							($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleZ") 
							$val;
						}
						
					} else {
						$div = $div + $row;
					}
				}
				
				break;
				
			case 7: // Y___
				// Update 1D
				$scale = `getAttr ($obj + ".scaleY")`;
				$rate = `floatField -query -value $inc[7]` / 100;
				for ($i = 0; $i < size($ewc_arrayVarNodePreviewArray1D); $i++)
				{
					if ($scatValue[2] && $scatEnable[2] && $ewc_arrayVarScatterEnabled[7])
						$rand = $ewc_arrayVarScatterScaleY[$i];
					else
						$rand = 1;
					$rand = ((!$rand) ? 1: $rand);
					$ewc_arrayVarPreviewScaleY[$i + 1] = ((!$i) ? ($scale * $rate) : ($ewc_arrayVarPreviewScaleY[$i] * $rate));
					$val = ($ewc_arrayVarPreviewScaleY[$i + 1] * $rand);
					$val = (($val < .001) ? .001: $val);
					
					setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".scaleY") 
						$val;
				}
				
				// Update 2D
				$size = size($ewc_arrayVarNodePreviewArray2D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				if ($size)
				{
					$div = $size / ($dimC[1] - 1);
					$row = $div;
					
					// Reposition roots - this is to compensate for scatter toggling
					$pos = `getAttr ($obj + ".scaleY")`;
					
					// Loop roots
					for ($i = 0; $i < $size; $i += $row)
					{
						if ($scatValue[2] && $scatEnable[2] && $ewc_arrayVarScatterEnabled[7])
							$rand = $ewc_arrayVarScatterScaleY[$s1 + $i];
						else
							$rand = 1;
						$rand = ((!$rand) ? 1: $rand);
						$val = $pos * $rand;
						$val = (($val < .001) ? .001: $val);
						
						setAttr
							($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleY") 
							$val;
						
						$ewc_arrayVarPreviewScaleY[$s1 + 1 + $i] = $pos;
					}
					
					// Loop the rest of the array
					
					for ($i = 1; $i < $size; $i++)
					{
						if ($scatValue[2] && $scatEnable[2] && $ewc_arrayVarScatterEnabled[7])
							$rand = $ewc_arrayVarScatterScaleY[$s1 + $i];
						else
							$rand = 1;
						$rand = ((!$rand) ? 1: $rand);
						if (($i) != $div)
						{
							// get the the scale of the previous object
							$pos = ($ewc_arrayVarPreviewScaleY[$row + ($i - 1)] * $rate);
							
							$val = $pos * $rand;
							$val = (($val < .001) ? .001: $val);							
							setAttr
								($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleY") 
								$val;
							
							// store the new position
							$ewc_arrayVarPreviewScaleY[$row + ($i)] = $pos;
													
						} else {
							$div = $div + $row;
						}
					}
				}
				
				// Update 3D
				$size = size($ewc_arrayVarNodePreviewArray3D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				$s2 = size($ewc_arrayVarNodePreviewArray2D);
				if (!$size)
					return;
				
				$offset = $dimC[0] * $dimC[1];
				$div = $size / ($dimC[1] * ($dimC[2] - 1));
				$row = $div;
				$level1 = $offset - $row;
				$level2 = $level1;
				
				// Reset roots - this is to compensate for scatter toggling
				$pos = `getAttr ($obj + ".scaleY")`;
				
				// Loop roots
				for ($i = 0; $i < $size; $i += $row)
				{
					if ($scatValue[2] && $scatEnable[2] && $ewc_arrayVarScatterEnabled[7])
						$rand = $ewc_arrayVarScatterScaleY[$s2 + $s1 + $i];
					else
						$rand = 1;
					$rand = ((!$rand) ? 1: $rand);
					$val = $pos * $rand;
					$val = (($val < .001) ? .001: $val);
					
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleY") 
						$val;
					$step++;
					
					$ewc_arrayVarPreviewScaleY[$offset + $i] = $pos;
					
					if ($i == ($level1))
						$level1 = $level2 + $level1 + $row;
				}
				
				$div = $row;
				
				// Loop the rest of the array
				
				for ($i = 1; $i < $size; $i++)
				{
					if ($scatValue[2] && $scatEnable[2] && $ewc_arrayVarScatterEnabled[7])
						$rand = $ewc_arrayVarScatterScaleY[($s2 + $s1) + $i];
					else
						$rand = 1;
					$rand = ((!$rand) ? 1: $rand);
					if (($i) != $div)
					{
						// get the the scale of the previous object
						$pos = ($ewc_arrayVarPreviewScaleY[$row + ($i - 1)] * $rate);
						
						$val = $pos * $rand;
						$val = (($val < .001) ? .001: $val);
					
						setAttr
							($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleY") 
							$val;
							
						
						// store the new position
						$ewc_arrayVarPreviewScaleY[$offset + $i] = $pos;
						
					} else {
						$div = $div + $row;
					}
				}
				
				break;
			case 8: // Z___
				// Update 1D
				$scale = `getAttr ($obj + ".scaleZ")`;
				$rate = `floatField -query -value $inc[8]` / 100;
				for ($i = 0; $i < size($ewc_arrayVarNodePreviewArray1D); $i++)
				{
					if ($scatValue[2] && $scatEnable[2] && $ewc_arrayVarScatterEnabled[8])
						$rand = $ewc_arrayVarScatterScaleZ[$i];
					else
						$rand = 1;
					$rand = ((!$rand) ? 1: $rand);
					$ewc_arrayVarPreviewScaleZ[$i + 1] = ((!$i) ? ($scale * $rate) : ($ewc_arrayVarPreviewScaleZ[$i] * $rate));
					$val = ($ewc_arrayVarPreviewScaleZ[$i + 1] * $rand);
					$val = (($val < .001) ? .001: $val);
					
					setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".scaleZ") 
						$val;
				}
				
				// Update 2D
				$size = size($ewc_arrayVarNodePreviewArray2D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				if ($size)
				{
					$div = $size / ($dimC[1] - 1);
					$row = $div;
					
					// Reposition roots - this is to compensate for scatter toggling
					$pos = `getAttr ($obj + ".scaleZ")`;
					
					// Loop roots
					for ($i = 0; $i < $size; $i += $row)
					{
						if ($scatValue[2] && $scatEnable[2] && $ewc_arrayVarScatterEnabled[8])
							$rand = $ewc_arrayVarScatterScaleZ[$s1 + $i];
						else
							$rand = 1;
						$rand = ((!$rand) ? 1: $rand);
						$val = $pos * $rand;
						$val = (($val < .001) ? .001: $val);
						
						setAttr
							($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleZ") 
							$val;
						
						$ewc_arrayVarPreviewScaleZ[$s1 + 1 + $i] = $pos;
					}
					
					// Loop the rest of the array
					
					for ($i = 1; $i < $size; $i++)
					{
						if ($scatValue[2] && $scatEnable[2] && $ewc_arrayVarScatterEnabled[8])
							$rand = $ewc_arrayVarScatterScaleZ[$s1 + $i];
						else
							$rand = 1;
						$rand = ((!$rand) ? 1: $rand);
						if (($i) != $div)
						{
							// get the the scale of the previous object
							$pos = ($ewc_arrayVarPreviewScaleZ[$row + ($i - 1)] * $rate);
							
							$val = $pos * $rand;
							$val = (($val < .001) ? .001: $val);
							
							setAttr
								($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleZ") 
								$val;
							
							// store the new position
							$ewc_arrayVarPreviewScaleZ[$row + ($i)] = $pos;
							
						} else {
							$div = $div + $row;
						}
					}
				}
				
				// Update 3D
				$size = size($ewc_arrayVarNodePreviewArray3D);
				$s1 = size($ewc_arrayVarNodePreviewArray1D);
				$s2 = size($ewc_arrayVarNodePreviewArray2D);
				if (!$size)
					return;
				
				$offset = $dimC[0] * $dimC[1];
				$div = $size / ($dimC[1] * ($dimC[2] - 1));
				$row = $div;
				$level1 = $offset - $row;
				$level2 = $level1;
				
				// Reset roots - this is to compensate for scatter toggling
				$pos = `getAttr ($obj + ".scaleZ")`;
				
				// Loop roots
				for ($i = 0; $i < $size; $i += $row)
				{
					if ($scatValue[2] && $scatEnable[2] && $ewc_arrayVarScatterEnabled[8])
						$rand = $ewc_arrayVarScatterScaleZ[$s2 + $s1 + $i];
					else
						$rand = 1;
					$rand = ((!$rand) ? 1: $rand);
					$val = $pos * $rand;
					$val = (($val < .001) ? .001: $val);
					
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleZ") 
						$val;
					$step++;
					
					$ewc_arrayVarPreviewScaleZ[$offset + $i] = $pos;
					
					if ($i == ($level1))
						$level1 = $level2 + $level1 + $row;
				}
				
				$div = $row;
				
				// Loop the rest of the array
				
				for ($i = 1; $i < $size; $i++)
				{
					if ($scatValue[2] && $scatEnable[2] && $ewc_arrayVarScatterEnabled[8])
						$rand = $ewc_arrayVarScatterScaleZ[($s2 + $s1) + $i];
					else
						$rand = 1;
					
					$rand = ((!$rand) ? 1: $rand);
					
					if (($i) != $div)
					{
						// get the the scale of the previous object
						$pos = ($ewc_arrayVarPreviewScaleZ[$row + ($i - 1)] * $rate);
						
						$val = $pos * $rand;
						$val = (($val < .001) ? .001: $val);
						
						setAttr
							($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleZ") 
							$val;
							
						
						// store the new position
						$ewc_arrayVarPreviewScaleZ[$offset + $i] = $pos;
						
					} else {
						$div = $div + $row;
					}
				}
				
				break;
		} // End Scale
	} // End switch
} // End ewc_arrayActiveUpdate()
//===========================================
// Randomize the transformations
global proc ewc_arrayScatterTransform(int $case)
{
	// Globals
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];
	global float	$ewc_arrayVarPreviewTransformX[];
	global float	$ewc_arrayVarPreviewTransformY[];
	global float	$ewc_arrayVarPreviewTransformZ[];
	global float	$ewc_arrayVarScatterTransformX[];
	global float	$ewc_arrayVarScatterTransformY[];
	global float	$ewc_arrayVarScatterTransformZ[];
	global int	$ewc_arrayVarScatterEnabled[9];
	
	string $fld[] = ewc_arrayControlNames(11, 0, 6);
	int $size1 = size($ewc_arrayVarNodePreviewArray1D);
	int $size2 = size($ewc_arrayVarNodePreviewArray2D);
	int $size3 = size($ewc_arrayVarNodePreviewArray3D);
	float $hi;
	float $lo;
	float $rand;
	
	switch ($case)
	{
		case 1: // X
			$lo = `floatField -query -value $fld[0]`;
			$hi = `floatField -query -value $fld[1]`;
			
			// 1D
			if ($size1)
			{
				for ($i = 0; $i < $size1; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".translateX")
						($ewc_arrayVarPreviewTransformX[$i + 1] + $rand);
						
					$ewc_arrayVarScatterTransformX[$i] = $rand;
				}
			}
			
			// 2D
			if ($size2)
			{
				for ($i = 0; $i < $size2; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".translateX")
						($ewc_arrayVarPreviewTransformX[$size1 + $i + 1] + $rand);
					
					$ewc_arrayVarScatterTransformX[$size1 + $i] = $rand;
				}
			}
			
			// 3D
			if ($size3)
			{
				for ($i = 0; $i < $size3; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".translateX")
						($ewc_arrayVarPreviewTransformX[$size2 + $size1 + $i + 1] + $rand);
					
					$ewc_arrayVarScatterTransformX[$size2 + $size1 + $i] = $rand;
				}
			}
			
			// Clear if values are both 0
			if ($lo == 0 && $hi == 0)
			{
				clear $ewc_arrayVarScatterTransformX;
				$ewc_arrayVarScatterEnabled[0] = 0;
			} else {
				$ewc_arrayVarScatterEnabled[0] = 1;
			}
			
			break;
			
		case 2: // Y
			$lo = `floatField -query -value $fld[2]`;
			$hi = `floatField -query -value $fld[3]`;
			
			// 1D
			if ($size1)
			{
				for ($i = 0; $i < $size1; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".translateY")
						($ewc_arrayVarPreviewTransformY[$i + 1] + $rand);
						
					$ewc_arrayVarScatterTransformY[$i] = $rand;
				}
			}
			
			// 2D
			if ($size2)
			{
				for ($i = 0; $i < $size2; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".translateY")
						($ewc_arrayVarPreviewTransformY[$size1 + $i + 1] + $rand);
					
					$ewc_arrayVarScatterTransformY[$size1 + $i] = $rand;
				}
			}
			
			// 3D
			if ($size3)
			{
				for ($i = 0; $i < $size3; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".translateY")
						($ewc_arrayVarPreviewTransformY[$size2 + $size1 + $i + 1] + $rand);
					
					$ewc_arrayVarScatterTransformY[$size2 + $size1 + $i] = $rand;
				}
			}
			
			// Clear if values are both 0
			if ($lo == 0 && $hi == 0)
			{
				clear $ewc_arrayVarScatterTransformY;
				$ewc_arrayVarScatterEnabled[1] = 0;
			} else {
				$ewc_arrayVarScatterEnabled[1] = 1;
			}
			
			break;
			
			
		case 3: // Z
			$lo = `floatField -query -value $fld[4]`;
			$hi = `floatField -query -value $fld[5]`;
			
			// 1D
			if ($size1)
			{
				for ($i = 0; $i < $size1; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".translateZ")
						($ewc_arrayVarPreviewTransformZ[$i + 1] + $rand);
						
					$ewc_arrayVarScatterTransformZ[$i] = $rand;
				}
			}
			
			// 2D
			if ($size2)
			{
				for ($i = 0; $i < $size2; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".translateZ")
						($ewc_arrayVarPreviewTransformZ[$size1 + $i + 1] + $rand);
					
					$ewc_arrayVarScatterTransformZ[$size1 + $i] = $rand;
				}
			}
			
			// 3D
			if ($size3)
			{
				for ($i = 0; $i < $size3; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".translateZ")
						($ewc_arrayVarPreviewTransformZ[$size2 + $size1 + $i + 1] + $rand);
					
					$ewc_arrayVarScatterTransformZ[$size2 + $size1 + $i] = $rand;
				}
			}
			
			// Clear if values are both 0
			if ($lo == 0 && $hi == 0)
			{
				clear $ewc_arrayVarScatterTransformZ;
				$ewc_arrayVarScatterEnabled[2] = 0;
			} else {
				$ewc_arrayVarScatterEnabled[2] = 1;
			}
			
			break;
			
		case 4: // Array off
			break;
	} // End switch
} // End ewc_arrayScatterTransform()



//===========================================
// Randomize the rotations
global proc ewc_arrayScatterRotate(int $case)
{
	// Globals
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];
	global float	$ewc_arrayVarPreviewRotationX[];
	global float	$ewc_arrayVarPreviewRotationY[];
	global float	$ewc_arrayVarPreviewRotationZ[];
	global float	$ewc_arrayVarScatterRotationX[];
	global float	$ewc_arrayVarScatterRotationY[];
	global float	$ewc_arrayVarScatterRotationZ[];
	global int	$ewc_arrayVarScatterEnabled[9];
	
	string $fld[] = ewc_arrayControlNames(11, 6, 6);
	int $size1 = size($ewc_arrayVarNodePreviewArray1D);
	int $size2 = size($ewc_arrayVarNodePreviewArray2D);
	int $size3 = size($ewc_arrayVarNodePreviewArray3D);
	float $hi;
	float $lo;
	float $rand;
	
	switch ($case)
	{
		case 1: // X
			$lo = `floatField -query -value $fld[0]`;
			$hi = `floatField -query -value $fld[1]`;
			
			// 1D
			if ($size1)
			{
				for ($i = 0; $i < $size1; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".rotateX")
						($ewc_arrayVarPreviewRotationX[$i + 1] + $rand);
						
					$ewc_arrayVarScatterRotationX[$i] = $rand;
				}
			}
			
			// 2D
			if ($size2)
			{
				for ($i = 0; $i < $size2; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".rotateX")
						($ewc_arrayVarPreviewRotationX[$size1 + $i + 1] + $rand);
					
					$ewc_arrayVarScatterRotationX[$size1 + $i] = $rand;
				}
			}
			
			// 3D
			if ($size3)
			{
				for ($i = 0; $i < $size3; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".rotateX")
						($ewc_arrayVarPreviewRotationX[$size2 + $size1 + $i + 1] + $rand);
					
					$ewc_arrayVarScatterRotationX[$size2 + $size1 + $i] = $rand;
				}
			}
			
			// Clear if values are both 0
			if ($lo == 0 && $hi == 0)
			{
				clear $ewc_arrayVarScatterRotationX;
				$ewc_arrayVarScatterEnabled[3] = 0;
			} else {
				$ewc_arrayVarScatterEnabled[3] = 1;
			}
			
			break;
			
		case 2: // Y
			$lo = `floatField -query -value $fld[2]`;
			$hi = `floatField -query -value $fld[3]`;
			
			// 1D
			if ($size1)
			{
				for ($i = 0; $i < $size1; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".rotateY")
						($ewc_arrayVarPreviewRotationY[$i + 1] + $rand);
						
					$ewc_arrayVarScatterRotationY[$i] = $rand;
				}
			}
			
			// 2D
			if ($size2)
			{
				for ($i = 0; $i < $size2; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".rotateY")
						($ewc_arrayVarPreviewRotationY[$size1 + $i + 1] + $rand);
					
					$ewc_arrayVarScatterRotationY[$size1 + $i] = $rand;
				}
			}
			
			// 3D
			if ($size3)
			{
				for ($i = 0; $i < $size3; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".rotateY")
						($ewc_arrayVarPreviewRotationY[$size2 + $size1 + $i + 1] + $rand);
					
					$ewc_arrayVarScatterRotationY[$size2 + $size1 + $i] = $rand;
				}
			}
			
			// Clear if values are both 0
			if ($lo == 0 && $hi == 0)
			{
				clear $ewc_arrayVarScatterRotationY;
				$ewc_arrayVarScatterEnabled[4] = 0;
			} else {
				$ewc_arrayVarScatterEnabled[4] = 1;
			}
			
			break;
			
		case 3: // Z
			$lo = `floatField -query -value $fld[4]`;
			$hi = `floatField -query -value $fld[5]`;
			
			// 1D
			if ($size1)
			{
				for ($i = 0; $i < $size1; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".rotateZ")
						($ewc_arrayVarPreviewRotationZ[$i + 1] + $rand);
						
					$ewc_arrayVarScatterRotationZ[$i] = $rand;
				}
			}
			
			// 2D
			if ($size2)
			{
				for ($i = 0; $i < $size2; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".rotateZ")
						($ewc_arrayVarPreviewRotationZ[$size1 + $i + 1] + $rand);
					
					$ewc_arrayVarScatterRotationZ[$size1 + $i] = $rand;
				}
			}
			
			// 3D
			if ($size3)
			{
				for ($i = 0; $i < $size3; $i++)
				{
					$rand = rand($lo, $hi);
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".rotateZ")
						($ewc_arrayVarPreviewRotationZ[$size2 + $size1 + $i + 1] + $rand);
					
					$ewc_arrayVarScatterRotationZ[$size2 + $size1 + $i] = $rand;
				}
			}
			
			// Clear if values are both 0
			if ($lo == 0 && $hi == 0)
			{
				clear $ewc_arrayVarScatterRotationZ;
				$ewc_arrayVarScatterEnabled[5] = 0;
			} else {
				$ewc_arrayVarScatterEnabled[5] = 1;
			}
			
			break;
		
		case 4: // All off
			break;
	} // End switch
} // End ewc_arrayScatterRotate()
//===========================================
// Calculate the scale increment and total equivelant
// A big thank you to Craig Davies
global proc float ewc_arrayCalculateScaleOffset(string $side, float $scaleValue, int $count)
{
	switch ($side)
	{
		case "total":	// Calculate total
				float $value = 100;
				float $rate = ($scaleValue / $value);
				
				//float $return;
				for ($i = 0; $i < $count; $i++)
					$value = ($value * $rate);
				
				return $value;
				break;
				
		case "inc":	// Calculate increment
				return (100 * pow($scaleValue / 100.0, 1.0 / $count));
				break;
	} // End switch
} // End ewc_arrayCalculateScaleOffset()








//===========================================
// Update the scatter fields
global proc ewc_arrayUpdateScatterFields(int $dir, string $field, int $scale)
{
	string $scaleFields[]= ewc_arrayControlNames(11,12,6);
	// Query the precision field
	float $step = `floatField
				-query
				-value
				"ewc_fltFldFieldPrecision"`;
				
	float $value = `floatField
			-query
			-value
			$field`;
	
	$value = ((!$dir) ? ($value - $step) : ($value + $step));
	if (stringArrayContains($field, $scaleFields)) {$value = (($value < .001) ? .0011: $value);}
			
	// Update the field
	floatField
		-edit
		-value $value
		$field;
		
} // End ewc_arrayUpdateScatterFields()



//===========================================
// Manual and virtual spinner field updates
global proc ewc_arrayManualSpinnerFieldUpdate(int $side, string $field, string $target, int $scale)
{
	// Query the array count
	string $int[] = ewc_arrayControlNames(7, 0, 1);
	int $count = `intField -query -value $int[0]`;
	float $val  = `floatField -query -value $field`;
	
	// Prevent the user from going to 0% or lower
	if ($scale && $val < .001)
	{
		floatField
			-edit
			-value .001
			$field;
		$val = .001;
	}
	
	// Calculate Move/Rotate fields
	if (!$scale)
		floatField
			-edit
			-value (($side) ? (($count - 1) * $val) : ($val / ($count - 1)))
			$target;
	
	// Calculate Scale fields
	else
	{
		floatField
			-edit
			-value (($side) ? 
					ewc_arrayCalculateScaleOffset("total", `floatField -query -value $field`, ($count - 1)) 
					: 
					ewc_arrayCalculateScaleOffset("inc", `floatField -query -value $field`, ($count - 1)))
			$target;
			
		if (`checkBox -query -value"ewc_cboxUniformArray"`)
		{
			// Field control names
			string $fld[] = ewc_arrayControlNames(4, 7, 11);
			for ($i = 0; $i < 7; $i++)
				stringArrayRemoveAtIndex(2, $fld);
			
			for ($i = 0; $i < size($fld); $i++)
				floatField
					-edit
					-value (($i < 2) ? `floatField -query -value $field` : `floatField -query -value $target`)
					$fld[$i];
		}
	}
	
} // End ewc_arrayManualSpinnerFieldUpdate()
//===========================================
// Procedure to toggle incremental effect on scaling
global proc ewc_arrayToggleIncrementalScaling(int $case)
{
	global int	$ewc_arrayVarStoreActiveSide[3];
	int $step;
	
	// Button control names
	string $btn[] = ewc_arrayControlNames(13, 0, 3);
	
	// Uniform check box
	string $uniform[] = ewc_arrayControlNames(3, 1, 1);
	
	// Field control names
	string $field[] = ewc_arrayControlNames(4, 6, 12);
	
	for ($i = 0; $i < 6; $i++)
		stringArrayRemoveAtIndex(3, $field);
	
	// Eval $case
	switch($case)
	{
		case 0: // Disable Orientation
			
			// Query and store acive side
			if (`floatField -query -enable $field[0]`)
			{
				$ewc_arrayVarStoreActiveSide[2] = 0;
				$step = 0;
			}
			else
			{
				$ewc_arrayVarStoreActiveSide[2] = 1;
				$step = 3;
			}
			
			// Loop thru the controls
			for ($i = $step; $i < ($step + 3); $i++)
			{
				floatField
					-edit
					-enable false
					$field[$i];
				
				for ($j = 1; $j < 3; $j++)
					button
						-edit
						-enable false
						(($j == 1) ? ($btn[0] + ($i + (($step == 0) ? 7 : 13))) 
						: 
						($btn[1] + ($i + (($step == 0) ? 7 : 13))));
			}
			
			// Disable Inc or Total buttons
			for ($i = 3; $i < 7; $i+=3)
				button
					-edit
					-enable false
					($btn[2] + $i);
			
			// Disable uniform check box
			checkBox
				-edit
				-enable false
				$uniform[0];
					
			break;
		case 1: // Enable Orientation
		
			// Test for side to renable
			$step = (!$ewc_arrayVarStoreActiveSide[2]) ? 0 : 3;
			int $uni = ((`checkBox -query -value $uniform[0]`) ? 1: 3);
			
			// Loop thru the controls
			for ($i = $step; $i < ($step + $uni); $i++)
			{
				floatField
					-edit
					-enable true
					$field[$i];
				
				for ($j = 1; $j < $uni; $j++)
					button
						-edit
						-enable true
						(($j == 1) ? ($btn[0] + ($i + (($step == 0) ? 7 : 13))) 
						: 
						($btn[1] + ($i + (($step == 0) ? 7 : 13))));
			}
			
			// Enable Inc or Total buttons
			for ($i = 3; $i < 7; $i+=3)
				button
					-edit
					-enable true
					($btn[2] + $i);
					
			// Enable uniform check box
			checkBox
				-edit
				-enable true
				$uniform[0];
					
			break;
		case 2: // Setup default
			$ewc_arrayVarStoreActiveSide[2] = 0;
			break;
	} // End switch
} // End ewc_arrayToggleIncrementalScaling()



//===========================================
// Store/restore the constrained axis values for plane contraints
global proc ewc_arrayOriginalScaleScatterValues(string $axis, int $state)
{
	global float	$ewc_arrayVarOriginalScatterValues[];
	global string	$ewc_arrayVarStoreCurrentPlaneConstraint;
	string $float[] = ewc_arrayControlNames(11, 12, 6);
	string $rad[] = ewc_arrayControlNames(12, 0, 2);
	
	int $inc;
				
	// Test for active plane
	string $plane = `radioCollection -query -select $rad[0]`;
				
	switch ($state)
	{
		case 0: // Constraint Off: Restore Values
			$inc = ($ewc_arrayVarStoreCurrentPlaneConstraint == "y") ? 2 : 4;
			for ($i = $inc; $i < ($inc + 2); $i++)
				floatField
					-edit
					-value $ewc_arrayVarOriginalScatterValues[$i - 2]
					$float[$i];
			break;
		case 1: // Constraint On: Store Values
			$inc = ($plane == $rad[1]) ? 2 : 4;
			for ($i = $inc; $i < ($inc + 2); $i++)
				$ewc_arrayVarOriginalScatterValues[$i - 2] = `floatField
										-query
										-value
										$float[$i]`;
			// Store current side
			$ewc_arrayVarStoreCurrentPlaneConstraint = ($inc == 2) ? "y" : "z";
			break;
	} // End switch
			
} // End ewc_arrayOriginalScaleScatterValues()


//===========================================
// Procedure to kill the UI's and empty arrays
global proc ewc_arrayCancelMainWindow()
{
	string $importUI[] = ewc_arrayControlNames(0, 0, 1);
	string $mainUI = $importUI[0];
	
	if (`window -exists $mainUI`)
		deleteUI $mainUI;
	
	// Delete the geometry
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];
	global string	$ewc_arrayVarTargetNameFullPath;
	
	if ($ewc_arrayVarTargetNameFullPath!="") {
		setAttr ($ewc_arrayVarTargetNameFullPath+".displayRotatePivot") off;
		setAttr ($ewc_arrayVarTargetNameFullPath+".displayScalePivot") off;
	}
	
	if (size($ewc_arrayVarNodePreviewArray1D))
		delete $ewc_arrayVarNodePreviewArray1D;
	
	if (size($ewc_arrayVarNodePreviewArray2D))
		delete $ewc_arrayVarNodePreviewArray2D;
	
	if (size($ewc_arrayVarNodePreviewArray3D))
		delete $ewc_arrayVarNodePreviewArray3D;
	
	// Empty the array
	ewc_arrayClearGlobals();
	
} // End ewc_arrayCancelMainWindow()



//===========================================
// Procedure to toggle the Array control states
global proc ewc_arrayToggleArrayControls(int $inc, int $total, int $fldID, int $btnID)
{
	global int	$ewc_arrayVarStoreActiveSide[];
	
	// Field control names
	string $field[] = ewc_arrayControlNames(4, 0, 18);
	
	// Button control names
	string $btn[] = ewc_arrayControlNames(13, 0, 2);
	
	// Store the active side
	// Incrememnt
	if ($inc == true)
	{
		switch ($fldID)
		{
			case 0: // Move
				$ewc_arrayVarStoreActiveSide[0] = 0;
				break;
			case 3: // Rotate
				$ewc_arrayVarStoreActiveSide[1] = 0;
				break;
			case 6: // Scale
				$ewc_arrayVarStoreActiveSide[2] = 0;
				break;
		}
	}
	// Total
	else
	{
		switch ($fldID)
		{
			case 0: // Move
				$ewc_arrayVarStoreActiveSide[0] = 1;
				break;
			case 3: // Rotate
				$ewc_arrayVarStoreActiveSide[1] = 1;
				break;
			case 6: // Scale
				$ewc_arrayVarStoreActiveSide[2] = 1;
				break;
		}
	}
	
	// Loop through the XYZ controls and set the states
	for($i = 0; $i < 6; $i++)
	{
		if ($i < 3)
		{
			floatField
				-edit
				-enable $inc
				$field[$i + $fldID];
			
			// +
			button
				-edit
				-enable $inc
				($btn[0] + ($i + $btnID));
				
			// -
			button
				-edit
				-enable $inc
				($btn[1] + ($i + $btnID));
		}
		
		else
		{
			floatField
				-edit
				-enable $total
				$field[$i + 6 + $fldID];
			
			// +
			button
				-edit
				-enable $total
				($btn[0] + ($i + 6 + $btnID));
				
			// -
			button
				-edit
				-enable $total
				($btn[1] + ($i + 6 + $btnID));

		}
	} // End for loop
	
	//Query the Uniform state
	int $uniform = `checkBox
				-query
				-value
				"ewc_cboxUniformArray"`;
	
	// If test is true disable the correct YZ controls
	if ($uniform)
	{
		// Disable translate YZ
		if ($fldID == 6 && $inc == true)
		{
			for ($i = 1; $i < 3; $i++)
			{
				floatField
					-edit
					-enable false
					$field[$i + $fldID];
					
				// +
				button
					-edit
					-enable false
					($btn[0] + ($i + $btnID));
					
				// -
				button
					-edit
					-enable false
					($btn[1] + ($i + $btnID));
			}
		}
		// Disable total YZ
		else if ($fldID == 6 && $inc == false)
		{
			for ($i = 10; $i < 12; $i++)
			{
				floatField
					-edit
					-enable false
					$field[$i + $fldID];
					
				// +
				button
					-edit
					-enable false
					($btn[0] + ($i + $btnID));
					
				// -
				button
					-edit
					-enable false
					($btn[1] + ($i + $btnID));
			}
		}

	}
	//ewc_arrayToggleUniformScale
} // End ewc_arrayToggleArrayControls()
//===========================================
// Create final array
global proc ewc_arrayCreateFinal()
{
	// Globals
	global string	$ewc_arrayVarTempArraySuffix;
	global string	$ewc_arrayVarTargetNameFullPath;
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];
	
	vector $rootRot = `xform -query -absolute -rotation $ewc_arrayVarTargetNameFullPath`;
	string $dupObj = ("duplicatedObject" + $ewc_arrayVarTempArraySuffix);
	
	string $obj = $ewc_arrayVarTargetNameFullPath;
	string $tok[];
	int $tsize = `tokenize $obj "|" $tok`;
	string $tokOBJ = $tok[$tsize - 1];
	
	// preview
	global float	$ewc_arrayVarPreviewTransformX[];
	global float	$ewc_arrayVarPreviewTransformY[];
	global float	$ewc_arrayVarPreviewTransformZ[];
	global float	$ewc_arrayVarPreviewRotationX[];
	global float	$ewc_arrayVarPreviewRotationY[];
	global float	$ewc_arrayVarPreviewRotationZ[];
	global float	$ewc_arrayVarPreviewScaleX[];
	global float	$ewc_arrayVarPreviewScaleY[];
	global float	$ewc_arrayVarPreviewScaleZ[];
	
	// scatter
	global float	$ewc_arrayVarScatterTransformX[];
	global float	$ewc_arrayVarScatterTransformY[];
	global float	$ewc_arrayVarScatterTransformZ[];
	global float	$ewc_arrayVarScatterRotationX[];
	global float	$ewc_arrayVarScatterRotationY[];
	global float	$ewc_arrayVarScatterRotationZ[];
	global float	$ewc_arrayVarScatterScaleX[];
	global float	$ewc_arrayVarScatterScaleY[];
	global float	$ewc_arrayVarScatterScaleZ[];
	global int	$ewc_arrayVarScatterEnabled[9];
	
	// Rotation vars
	float $rotX;
	float $rotY;
	float $rotZ;
	
	// turn off pivot display
	setAttr ($ewc_arrayVarTargetNameFullPath+".displayRotatePivot") off;
	setAttr ($ewc_arrayVarTargetNameFullPath+".displayScalePivot") off;
	
	// Get size of final array
	int $size;
	$size = size($ewc_arrayVarNodePreviewArray1D) + size($ewc_arrayVarNodePreviewArray2D) + size($ewc_arrayVarNodePreviewArray3D);
	
	if (!$size)
		return;
	
	// Determine instance or duplicate
	string $duplicate;
	string $testDuplicate;
	string $evalCMD;
	string $geoControls[] = ewc_arrayControlNames(5, 0, 3);
	$testDuplicate = `radioCollection -query -select $geoControls[0]`;
	
	if ($testDuplicate == $geoControls[1])
		 $duplicate = ("duplicate");
	else
		$duplicate = ("instance");
	
	// Determine grouping
	int $groupID;
	string $parent;
	string $tok[];
	string $tempDupObjects[];
	string $groupRad[] = ewc_arrayControlNames(5, 3, 4);
	string $groupSel = `radioCollection -query -select $groupRad[0]`;
	if ($groupSel == $groupRad[1])
		$groupID = 0;
	else if ($groupSel == $groupRad[2])
		$groupID = 1;
	else if ($groupSel == $groupRad[3])
		$groupID = 2;
	
	// Test for active random, if inactive clear arrays
	string $randCBox[] = ewc_arrayControlNames(10, 0, 3);
	int $randCBoxVal[3];
	float $randX;
	float $randY;
	float $randZ;
	for ($i = 0; $i < 3; $i++)
		$randCBoxVal[$i] = `checkBox -query -value $randCBox[$i]`;
	
		// transform
		if (!$randCBoxVal[0])
		{
			clear $ewc_arrayVarScatterTransformX;
			clear $ewc_arrayVarScatterTransformY;
			clear $ewc_arrayVarScatterTransformZ;
		}
		
		// rotate
		if (!$randCBoxVal[1])
		{
			clear $ewc_arrayVarScatterRotationX;
			clear $ewc_arrayVarScatterRotationY;
			clear $ewc_arrayVarScatterRotationZ;
		}
		
		// scale
		if (!$randCBoxVal[2])
		{
			clear $ewc_arrayVarScatterScaleX;
			clear $ewc_arrayVarScatterScaleY;
			clear $ewc_arrayVarScatterScaleZ;
		}
	
	// Uniform scale
	string $uniform[] = ewc_arrayControlNames(3, 1, 1);
	int $uniState = `checkBox -query -value $uniform[0]`;
	
	// Re-Orient toggle
	string $reorient[] = ewc_arrayControlNames(3, 0, 1);
	int $orient = `checkBox -query -value $reorient[0]`;
	
	// User defined renaming convention
	string $rename[] = ewc_arrayControlNames(12, 2, 3);
	string $nameField;
	string $newName;
	int $padding, $cap, $k;
	int $doRename = `checkBox -query -value $rename[2]`;
	string $userName, $buffer;
	
	if ($doRename) {
		$nameField = `textField -query -text $rename[0]`;
		$padding = `intField -query -value $rename[1]`;
	}
	
	// Delete the preview
	if (size($ewc_arrayVarNodePreviewArray1D))
		delete $ewc_arrayVarNodePreviewArray1D;
	if (size($ewc_arrayVarNodePreviewArray2D))
		delete $ewc_arrayVarNodePreviewArray2D;
	if (size($ewc_arrayVarNodePreviewArray3D))
		delete $ewc_arrayVarNodePreviewArray3D;
	
	$parent = firstParentOf($obj);
	string $RENAME;
	
	for ($i = 0; $i < $size; $i++)
	{
		$evalCMD = $duplicate + " -name " + $dupObj + " " + $obj;
		
		eval($evalCMD);
		
		// store and test rand scale vars
		$randX = $ewc_arrayVarScatterScaleX[$i];
		$randX = ((!$randX) ? 1: $randX);
		$randY = $ewc_arrayVarScatterScaleY[$i];
		$randY = ((!$randY) ? 1: $randY);
		$randZ = $ewc_arrayVarScatterScaleZ[$i];
		$randZ = ((!$randZ) ? 1: $randZ);
		
		// Test for uniform - store if active
		if ($uniState)
		{
			$randY = $randX;
			$randZ = $randX;
		}
		
		// Re-Orient toggle
		$rotX = (($orient) ? ($ewc_arrayVarPreviewRotationX[$i + 1] + $ewc_arrayVarScatterRotationX[$i]): ($rootRot.x));
		$rotY = (($orient) ? ($ewc_arrayVarPreviewRotationY[$i + 1] + $ewc_arrayVarScatterRotationY[$i]): ($rootRot.y));
		$rotZ = (($orient) ? ($ewc_arrayVarPreviewRotationZ[$i + 1] + $ewc_arrayVarScatterRotationZ[$i]): ($rootRot.z));
		
		xform
			-absolute
			-translation
				($ewc_arrayVarPreviewTransformX[$i + 1] + $ewc_arrayVarScatterTransformX[$i])
				($ewc_arrayVarPreviewTransformY[$i + 1] + $ewc_arrayVarScatterTransformY[$i])
				($ewc_arrayVarPreviewTransformZ[$i + 1] + $ewc_arrayVarScatterTransformZ[$i])
					
			-rotation
				$rotX
				$rotY
				$rotZ
				
			-scale
				($ewc_arrayVarPreviewScaleX[$i + 1] * $randX)
				($ewc_arrayVarPreviewScaleY[$i + 1] * $randY)
				($ewc_arrayVarPreviewScaleZ[$i + 1] * $randZ)
				
			$dupObj;
		
		if ($doRename)
		{
			$k = $i + 1;
			$cap=$padding-1;
			if ($k<=9) {
			for ($j=1;$j<=$cap;$j++)
				$buffer=$buffer+"0";
			} else if ($k>=10&&$k<=99) {
				for ($j=1;$j<=$cap-1;$j++)
					$buffer=$buffer+"0";
			} else if ($k>=100&&$k<=999) {
				for ($j=1;$j<=$cap-2;$j++)
					$buffer=$buffer+"0";
			} else if ($k>=1000&&$k<=9999) {
				for ($j=1;$j<=$cap-3;$j++)
					$buffer=$buffer+"0";
			} else if ($k>=10000&&$k<=99999) {
				for ($j=1;$j<=$cap-4;$j++)
					$buffer=$buffer+"0";
			} else if ($k>=100000&&$k<=999999) {
				for ($j=1;$j<=$cap-5;$j++)
					$buffer=$buffer+"0";
			} else if ($k>=1000000&&$k<=9999999) {
				for ($j=1;$j<=$cap-6;$j++)
					$buffer=$buffer+"0";
			}
			$newName = $nameField + $buffer + $k;
			$buffer = "";
		} else {
			$newName = $tokOBJ;
		}	
			
			
			
		if ($groupID == 0)
			rename $dupObj $newName;
			
		// parent to world
		
		if ($groupID == 1 && $parent != "")
		{
			if ($doRename)
				$RENAME = `rename $dupObj $newName`;
			else
				$RENAME = `rename $dupObj ($dupObj + $i)`;
			$tempDupObjects[$i] = ($dupObj + $i);
		} else if ($groupID == 1 && $parent == "") {
			rename $dupObj $newName;
		}
		
		// group objects test
		if ($groupID == 2 && !$doRename)
		{
			$RENAME = `rename $dupObj ($dupObj + $i)`;
			$tempDupObjects[$i] = $RENAME;
		} else if ($groupID == 2 && $doRename) {
			$RENAME = `rename $dupObj $newName`;
			$tempDupObjects[$i] = $RENAME;
		}
	}
	
	// move then rename array
	if ($groupID == 1 && $parent != "")
	{
		parent -world $tempDupObjects;
		if (!$doRename) {
			for ($each in $tempDupObjects)
				rename $each $newName;
		}
	}
	// group then rename array
	if ($groupID == 2)
	{	
		if ($parent != "")
			parent -world $tempDupObjects;
		group $tempDupObjects;
		if (!$doRename) {
			for ($each in $tempDupObjects)
				rename $each $newName;
		}
	}
	
	// Close the interface
	
	ewc_arrayClearGlobals();

	string $window[] = ewc_arrayControlNames(0, 0, 1);
	
	deleteUI $window[0];
		
	// Print final message to user
	if ($testDuplicate == $geoControls[1])
		 print ($size + " duplicate objects of " + $tokOBJ + " created.\n");
	else
		 print ($size + " instanced objects of " + $tokOBJ + " created.\n");
	
} // End ewc_arrayCreateFinal()
//===========================================
// Control the enable sate of controls when toggling Re-Orient check box
global proc ewc_arrayToggleReorientStates(int $case)
{
	// Globals
	global string	$ewc_arrayVarReorientStoreActiveSide;
	global string	$ewc_arrayVarTargetNameFullPath;
	global float	$ewc_arrayVarPreviewRotationX[];
	global float	$ewc_arrayVarPreviewRotationY[];
	global float	$ewc_arrayVarPreviewRotationZ[];
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];
	global int	$ewc_arrayVarActivePreviewStatus;
	
	string $obj = $ewc_arrayVarTargetNameFullPath;
	
	// Checkboxes
	string $cbox[] = ewc_arrayControlNames(3, 0, 1);
	int $step;
	
	// Button control names
	string $btn[] = ewc_arrayControlNames(13, 0, 4);
	
	// Field control names
	string $field[] = ewc_arrayControlNames(4, 3, 12);
	
	for ($i = 0; $i < 6; $i++)
		stringArrayRemoveAtIndex(3, $field);
	
	// Scatter controls
	string $scatRot[] = ewc_arrayControlNames(10, 1, 1);
	int $scatVal = `checkBox -query -value $scatRot[0]`;
	string $seedAll[] = ewc_arrayControlNames(13, 9, 1);
	string $seed[] = ewc_arrayControlNames(13, 14, 3);
	string $float[] = ewc_arrayControlNames(11, 6, 6);
	string $satBtn[] = ewc_arrayControlNames(13, 6, 2);
	
	// Eval $case
	switch($case)
	{
		case 0: // Disable Orientation
			
			// Query and store acive side
			if (`floatField -query -enable $field[0]`)
			{
				$ewc_arrayVarReorientStoreActiveSide = "inc";
				$step = 0;
			}
			else
			{
				$ewc_arrayVarReorientStoreActiveSide = "total";
				$step = 3;
			}
			
			// Loop thru the controls
			for ($i = $step; $i < ($step + 3); $i++)
			{
				floatField
					-edit
					-enable false
					$field[$i];
				
				for ($j = 1; $j < 3; $j++)
					button
						-edit
						-enable false
						(($j == 1) ? ($btn[0] + ($i + (($step == 0) ? 4 : 10))) 
						: 
						($btn[1] + ($i + (($step == 0) ? 4 : 10))));
			}
			
			// Disable Inc or Total buttons
			for ($i = 2; $i < 6; $i+=3)
				button
					-edit
					-enable false
					($btn[2] + $i);
					
			// Set array objects to root rotations
			float $x = `getAttr ($obj + ".rotateX")`;
			float $y = `getAttr ($obj + ".rotateY")`;
			float $z = `getAttr ($obj + ".rotateZ")`;
			
			// 1D
			if (size($ewc_arrayVarNodePreviewArray1D))
			{
				for ($each in $ewc_arrayVarNodePreviewArray1D)
				{
					setAttr ($each + ".rotateX") $x;
					setAttr ($each + ".rotateY") $y;
					setAttr ($each + ".rotateZ") $z;
				}
			}
			
			// 2D
			if (size($ewc_arrayVarNodePreviewArray2D))
			{
				for ($each in $ewc_arrayVarNodePreviewArray2D)
				{
					setAttr ($each + ".rotateX") $x;
					setAttr ($each + ".rotateY") $y;
					setAttr ($each + ".rotateZ") $z;
				}
			}
			
			// 3D
			if (size($ewc_arrayVarNodePreviewArray3D))
			{
				for ($each in $ewc_arrayVarNodePreviewArray3D)
				{
					setAttr ($each + ".rotateX") $x;
					setAttr ($each + ".rotateY") $y;
					setAttr ($each + ".rotateZ") $z;
				}
			}
			
			// Disable rotate scatter
			checkBox -edit -enable false $scatRot[0];
			button -edit -enable false $seedAll[0];
			for ($each in $seed)
				button -edit -enable false $each;
			for ($each in $float)
				floatField -edit -enable false $each;
			for ($i = 7; $i < 13; $i++)
			{
				button -edit -enable false ($satBtn[0] + $i);
				button -edit -enable false ($satBtn[1] + $i);
			}
			break;
		
		//-----------------------------------------------
		
		case 1: // Enable Orientation
		
			// Test for side to renable
			$step = ($ewc_arrayVarReorientStoreActiveSide == "inc") ? 0 : 3;
			
			// Loop thru the controls
			for ($i = $step; $i < ($step + 3); $i++)
			{
				floatField
					-edit
					-enable true
					$field[$i];
				
				for ($j = 1; $j < 3; $j++)
					button
						-edit
						-enable true
						(($j == 1) ? ($btn[0] + ($i + (($step == 0) ? 4 : 10))) 
						: 
						($btn[1] + ($i + (($step == 0) ? 4 : 10))));
			}
			
			// Enable Inc or Total buttons
			for ($i = 2; $i < 6; $i+=3)
				button
					-edit
					-enable true
					($btn[2] + $i);
			
			// Globals
			global float	$ewc_arrayVarScatterRotationX[];
			global float	$ewc_arrayVarScatterRotationY[];
			global float	$ewc_arrayVarScatterRotationZ[];
			float $randX;
			float $randY;
			float $randZ;
			
			// Disable rotate scatter
			checkBox -edit -enable true $scatRot[0];
			if ($scatVal && $ewc_arrayVarActivePreviewStatus)
			{
				button -edit -enable true $seedAll[0];
				for ($each in $seed)
					button -edit -enable true $each;
				for ($each in $float)
					floatField -edit -enable true $each;
				for ($i = 7; $i < 13; $i++)
				{
					button -edit -enable true ($satBtn[0] + $i);
					button -edit -enable true ($satBtn[1] + $i);
				}
			}
			
			string $scatterBox[] = ewc_arrayControlNames(10, 1, 1);
			int $scatValue = `checkBox -query -value $scatterBox[0]`;
			int $scatEnable = `checkBox -query -enable $scatterBox[0]`;
			
			// Restore Rotations
			int $size1 = size($ewc_arrayVarNodePreviewArray1D);
			int $size2 = size($ewc_arrayVarNodePreviewArray2D);
			int $size3 = size($ewc_arrayVarNodePreviewArray3D);
			
			
			
			// 1D
			if ($size1)
			{
				for ($i = 0; $i < $size1; $i++)
				{
					if ($scatValue && $scatEnable)
					{
						$randX = $ewc_arrayVarScatterRotationX[$i];
						$randY = $ewc_arrayVarScatterRotationY[$i];
						$randZ = $ewc_arrayVarScatterRotationZ[$i];
					} else {
						$randX = 0;
						$randY = 0;
						$randZ = 0;
					}
					
					setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".rotateX")
						(($ewc_arrayVarPreviewRotationX[$i + 1]) + $randX);
					setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".rotateY")
						(($ewc_arrayVarPreviewRotationY[$i + 1]) + $randY);
					setAttr
						($ewc_arrayVarNodePreviewArray1D[$i] + ".rotateZ")
						(($ewc_arrayVarPreviewRotationZ[$i + 1]) + $randZ);
				}
			}
			
			// 2D
			if ($size2)
			{
				for ($i = 0; $i < $size2; $i++)
				{
					if ($scatValue && $scatEnable)
					{
						$randX = $ewc_arrayVarScatterRotationX[$size1 + $i];
						$randY = $ewc_arrayVarScatterRotationY[$size1 + $i];
						$randZ = $ewc_arrayVarScatterRotationZ[$size1 + $i];
					} else {
						$randX = 0;
						$randY = 0;
						$randZ = 0;
					}
					
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".rotateX")
						(($ewc_arrayVarPreviewRotationX[($size1 + 1) + $i]) + $randX);
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".rotateY")
						(($ewc_arrayVarPreviewRotationY[($size1 + 1) + $i]) + $randY);
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".rotateZ")
						(($ewc_arrayVarPreviewRotationZ[($size1 + 1) + $i]) + $randZ);
				}
			}
			
			// 3D
			if ($size3)
			{
				for ($i = 0; $i < $size3; $i++)
				{
					if ($scatValue && $scatEnable)
					{
						$randX = $ewc_arrayVarScatterRotationX[$size1 + $size2 + $i];
						$randY = $ewc_arrayVarScatterRotationY[$size1 + $size2 + $i];
						$randZ = $ewc_arrayVarScatterRotationZ[$size1 + $size2 + $i];
					} else {
						$randX = 0;
						$randY = 0;
						$randZ = 0;
					}
					
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".rotateX")
						(($ewc_arrayVarPreviewRotationX[($size1 + $size2 + 1) + $i]) + $randX);
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".rotateY")
						(($ewc_arrayVarPreviewRotationY[($size1 + $size2 + 1) + $i]) + $randY);
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".rotateZ")
						(($ewc_arrayVarPreviewRotationZ[($size1 + $size2 + 1) + $i]) + $randZ);
				}
			}
			
			
			break;
		//-----------------------------------------------
		
		case 2: // Setup default
			$ewc_arrayVarReorientStoreActiveSide = "inc";
			break;
	} // End switch
} // End ewc_arrayToggleReorientStates()
//===========================================
// Create the array preview
global proc ewc_arrayCreatePreview()
{
	// Import globals
	global string 	$ewc_arrayVarTempArraySuffix;
	global string	$ewc_arrayVarTargetNameFullPath;
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];
	global float	$ewc_arrayVarPreviewTransformX[];
	global float	$ewc_arrayVarPreviewTransformY[];
	global float	$ewc_arrayVarPreviewTransformZ[];
	global float	$ewc_arrayVarPreviewRotationX[];
	global float	$ewc_arrayVarPreviewRotationY[];
	global float	$ewc_arrayVarPreviewRotationZ[];
	global float	$ewc_arrayVarPreviewScaleX[];
	global float	$ewc_arrayVarPreviewScaleY[];
	global float	$ewc_arrayVarPreviewScaleZ[];
	global int	$ewc_arrayVarScatterEnabled[9];
	global int	$ewc_arrayVarActivePreviewStatus;
	
	global int	$ewc_arrayVarStoreActiveSide[3];
	int $totalTranslate = $ewc_arrayVarStoreActiveSide[0];
	int $totalRotate = $ewc_arrayVarStoreActiveSide[1];
	
	int $step = 1;
	
	// Dimension count fields
	string $dimCtrl[] = ewc_arrayControlNames(7, 0, 3);
	int $dimTotal[];
	
	// Increment fields
	string $xForm[] = ewc_arrayControlNames(4, 0, 9);
	float $xVal[9];
	
	// Total fields
	string $tot[] = ewc_arrayControlNames(4, 9, 6);
	float $totVals[];
	for ($i = 0; $i < size($tot); $i++)
		$totVals[$i] = `floatField -query -value $tot[$i]`;
	
	// Query and store the values for all fields
	for ($i = 0; $i < 9; $i++)
		$xVal[$i] = `floatField
				-query
				-value
				$xForm[$i]`;
	
	// Normalize scale fields
	for ($i = 6; $i < 9; $i++)
		$xVal[$i] = $xVal[$i] / 100;
	
	// Query the active dimensions
	for ($i = 0; $i < 3; $i++)
	{
		if (`intField -query -enable $dimCtrl[$i]`)
			 $dimTotal[$i] = `intField
		 				-query
						-value
						$dimCtrl[$i]`;
	}
	
	// Query the selected
	string $obj = $ewc_arrayVarTargetNameFullPath;
	
	$ewc_arrayVarPreviewTransformX[0] = `getAttr ($obj + ".translateX")`;
	$ewc_arrayVarPreviewTransformY[0] = `getAttr ($obj + ".translateY")`;
	$ewc_arrayVarPreviewTransformZ[0] = `getAttr ($obj + ".translateZ")`;
	$ewc_arrayVarPreviewRotationX[0] = `getAttr ($obj + ".rotateX")`;
	$ewc_arrayVarPreviewRotationY[0] = `getAttr ($obj + ".rotateY")`;
	$ewc_arrayVarPreviewRotationZ[0] = `getAttr ($obj + ".rotateZ")`;
	$ewc_arrayVarPreviewScaleX[0] = `getAttr ($obj + ".scaleX")`;
	$ewc_arrayVarPreviewScaleY[0] = `getAttr ($obj + ".scaleY")`;
	$ewc_arrayVarPreviewScaleZ[0] = `getAttr ($obj + ".scaleZ")`;

	// Value needed for calculations
	float $val[3];
	$val[0] = $ewc_arrayVarPreviewScaleX[0];
	$val[1] = $ewc_arrayVarPreviewScaleY[0];
	$val[2] = $ewc_arrayVarPreviewScaleZ[0];
	
	string $source;
	
	// Create 1D
	for ($i = 1; $i < $dimTotal[0]; $i++)
	{
		// Calculate and store values
		$ewc_arrayVarPreviewTransformX[$i] = ($ewc_arrayVarPreviewTransformX[0] + $xVal[0] * $i);
		$ewc_arrayVarPreviewTransformY[$i] = ($ewc_arrayVarPreviewTransformY[0] + $xVal[1] * $i);
		$ewc_arrayVarPreviewTransformZ[$i] = ($ewc_arrayVarPreviewTransformZ[0] + $xVal[2] * $i);
		$ewc_arrayVarPreviewRotationX[$i] = ($ewc_arrayVarPreviewRotationX[0] + $xVal[3] * $i);
		$ewc_arrayVarPreviewRotationY[$i] = ($ewc_arrayVarPreviewRotationY[0] + $xVal[4] * $i);
		$ewc_arrayVarPreviewRotationZ[$i] = ($ewc_arrayVarPreviewRotationZ[0] + $xVal[5] * $i);
		$ewc_arrayVarPreviewScaleX[$i] = ($val[0] = $val[0] * $xVal[6]);
		$ewc_arrayVarPreviewScaleY[$i] = ($val[1] = $val[1] * $xVal[7]);
		$ewc_arrayVarPreviewScaleZ[$i] = ($val[2] = $val[2] * $xVal[8]);
		
		// Create and store object name
		$ewc_arrayVarNodePreviewArray1D[$i - 1] = ($obj + $ewc_arrayVarTempArraySuffix + "_1D_" + $i);
		
		// Create instance
		instance -name $ewc_arrayVarNodePreviewArray1D[$i - 1] $obj;
		editDisplayLayerMembers -noRecurse "defaultLayer" $ewc_arrayVarNodePreviewArray1D[$i - 1];
		
		
		// test for locked
		$source = `connectionInfo -sourceFromDestination ($ewc_arrayVarNodePreviewArray1D[$i - 1] + ".overrideEnabled")`;
		
		if ($source != "")
			disconnectAttr $source ($ewc_arrayVarNodePreviewArray1D[$i - 1] + ".drawOverride");
		
		// Drawing
		setAttr ($ewc_arrayVarNodePreviewArray1D[$i - 1] + ".overrideEnabled") true;
		
		// Total side test
		if ($totalTranslate && $i == ($dimTotal[0] - 1))
		{
			if ($totVals[0])
				$ewc_arrayVarPreviewTransformX[$i] = $totVals[0] + $ewc_arrayVarPreviewTransformX[0];
			if ($totVals[1])
				$ewc_arrayVarPreviewTransformY[$i] = $totVals[1] + $ewc_arrayVarPreviewTransformY[0];
			if ($totVals[2])
				$ewc_arrayVarPreviewTransformZ[$i] = $totVals[2] + $ewc_arrayVarPreviewTransformZ[0];
		}
		
		if ($totalRotate && $i == ($dimTotal[0] - 1))
		{
			if ($totVals[3])
				$ewc_arrayVarPreviewRotationX[$i] = $totVals[3];
			if ($totVals[4])
				$ewc_arrayVarPreviewRotationY[$i] = $totVals[4];
			if ($totVals[5])
				$ewc_arrayVarPreviewRotationZ[$i] = $totVals[5];
		}
		
		// Transform instance
		xform	-absolute
			-translation
				$ewc_arrayVarPreviewTransformX[$i]
				$ewc_arrayVarPreviewTransformY[$i]
				$ewc_arrayVarPreviewTransformZ[$i]
			-rotation
				$ewc_arrayVarPreviewRotationX[$i]
				$ewc_arrayVarPreviewRotationY[$i]
				$ewc_arrayVarPreviewRotationZ[$i]
			-scale
				$ewc_arrayVarPreviewScaleX[$i]
				$ewc_arrayVarPreviewScaleY[$i]
				$ewc_arrayVarPreviewScaleZ[$i]
			$ewc_arrayVarNodePreviewArray1D[$i - 1];
			
			
	} // End 1D creation
	
	// Dimension float fields
	string $dimFld[] = ewc_arrayControlNames(8, 0, 6);
	
	// Get 2D values
	float $dim2D[];
	for ($i = 0; $i < 3; $i++)
		$dim2D[$i] = `floatField
				-query
				-value
				$dimFld[$i]`;
	
	// Get 3D values
	float $dim3D[];
	for ($i = 0; $i < 3; $i++)
		$dim3D[$i] = `floatField
				-query
				-value
				$dimFld[$i + 3]`;
	
	//
	int $full2D;
	int $d2D = $dimTotal[1] - 1;
	int $rowFixed;
	int $rowDynamic;
	int $index;
	int $sub;
	
	$full2D = (($dimTotal[1] - 1) * $dimTotal[0] + 1);
	
	// Create 2D
	if (`intField -query -enable $dimCtrl[1]` && $dimTotal[1] > 1)
	{
		$rowFixed = $full2D / $d2D;
		$rowDynamic = $rowFixed ;
		$index = $dimTotal[0];
		$sub = $index;
		
		//$ewc_arrayVarPreviewRotationY[$index - 1] = `getAttr ($obj + ".rotateY")`;
		
		for ($i = 1; $i < $full2D; $i++)
		{
			// Calculate and store values
			$ewc_arrayVarPreviewTransformX[$index] = ($ewc_arrayVarPreviewTransformX[$index - $sub] + $dim2D[0]);
			$ewc_arrayVarPreviewTransformY[$index] = ($ewc_arrayVarPreviewTransformY[$index - $sub] + $dim2D[1]);
			$ewc_arrayVarPreviewTransformZ[$index] = ($ewc_arrayVarPreviewTransformZ[$index - $sub] + $dim2D[2]);
			$ewc_arrayVarPreviewRotationX[$index] = $ewc_arrayVarPreviewRotationX[$index - $sub];
			$ewc_arrayVarPreviewRotationY[$index] = $ewc_arrayVarPreviewRotationY[$index - $sub];
			$ewc_arrayVarPreviewRotationZ[$index] = $ewc_arrayVarPreviewRotationZ[$index - $sub];
			$ewc_arrayVarPreviewScaleX[$index] = $ewc_arrayVarPreviewScaleX[$index - $sub];
			$ewc_arrayVarPreviewScaleY[$index] = $ewc_arrayVarPreviewScaleY[$index - $sub];
			$ewc_arrayVarPreviewScaleZ[$index] = $ewc_arrayVarPreviewScaleZ[$index - $sub];
			
			// Create and store name
			$ewc_arrayVarNodePreviewArray2D[$i - 1] = ($obj + $ewc_arrayVarTempArraySuffix + "_2D_" + $i);
			
			// Duplicate and tranform
			instance -name $ewc_arrayVarNodePreviewArray2D[$i - 1] $obj;
			editDisplayLayerMembers -noRecurse "defaultLayer" $ewc_arrayVarNodePreviewArray2D[$i - 1];
			
			// test for locked
			$source = `connectionInfo -sourceFromDestination ($ewc_arrayVarNodePreviewArray2D[$i - 1] + ".overrideEnabled")`;
			
			if ($source != "")
				disconnectAttr $source ($ewc_arrayVarNodePreviewArray2D[$i - 1] + ".drawOverride");
			
			// Drawing
			setAttr ($ewc_arrayVarNodePreviewArray2D[$i - 1] + ".overrideEnabled") true;
			
			// Test for totals
			if ($totalTranslate && $i == $rowDynamic)
			{
				if ($totVals[0] != 0)
					$ewc_arrayVarPreviewTransformX[$index] = $totVals[0] + $ewc_arrayVarPreviewTransformX[0] + ($dim2D[0] * $step);
				if ($totVals[1] != 0)
					$ewc_arrayVarPreviewTransformY[$index] = $totVals[1] + $ewc_arrayVarPreviewTransformY[0] + ($dim2D[1] * $step);
				if ($totVals[2] != 0)
					$ewc_arrayVarPreviewTransformZ[$index] = $totVals[2] + $ewc_arrayVarPreviewTransformZ[0] + ($dim2D[2] * $step);
				$step++;
			}
			
			if ($totalRotate && $i == $rowDynamic)
			{
				if ($totVals[3] != 0)
					$ewc_arrayVarPreviewRotationX[$index] = $totVals[3];
				if ($totVals[4] != 0)
					$ewc_arrayVarPreviewRotationY[$index] = $totVals[4];
				if ($totVals[5] != 0)
					$ewc_arrayVarPreviewRotationZ[$index] = $totVals[5];
			}
			
			if ($i == $rowDynamic)
				$rowDynamic = $rowFixed + $rowDynamic;
			
			xform
			 -absolute
			 -translation
				$ewc_arrayVarPreviewTransformX[$index]
				$ewc_arrayVarPreviewTransformY[$index]
				$ewc_arrayVarPreviewTransformZ[$index]
			-rotation
				$ewc_arrayVarPreviewRotationX[$index]
				$ewc_arrayVarPreviewRotationY[$index]
				$ewc_arrayVarPreviewRotationZ[$index]
			-scale
				$ewc_arrayVarPreviewScaleX[$index]
				$ewc_arrayVarPreviewScaleY[$index]
				$ewc_arrayVarPreviewScaleZ[$index]
			$ewc_arrayVarNodePreviewArray2D[$i - 1];
			
			// Increment
			$index++;
		}
	} // End 2D creation
	
	// Create 3D
	int $total3D;
	
	if (`intField -query -enable $dimCtrl[2]` && $dimTotal[2] > 1)
	{
		$total3D = $dimTotal[0] * $dimTotal[1];
		//$index = $total3D * $dimTotal[2];
		int $tdc;
		
		for ($i = 1; $i < (($total3D * ($dimTotal[2] - 1)) + 1); $i++)
		{
			// If 2D was skipped generate new index
			if ($i == 1 && $dimTotal[1] == 1)
				$index = $dimTotal[0];
			
			// Avoid negative index errors
			if ($total3D > $index)
				$tdc = $total3D - $index;
			else
				$tdc = abs($index - $total3D);
			
			// Query the 2D positions
			// Calculate and store values
			$ewc_arrayVarPreviewTransformX[$index] = ($ewc_arrayVarPreviewTransformX[$tdc] + $dim3D[0]);
			$ewc_arrayVarPreviewTransformY[$index] = ($ewc_arrayVarPreviewTransformY[$tdc] + $dim3D[1]);
			$ewc_arrayVarPreviewTransformZ[$index] = ($ewc_arrayVarPreviewTransformZ[$tdc] + $dim3D[2]);
			$ewc_arrayVarPreviewRotationX[$index] = $ewc_arrayVarPreviewRotationX[$tdc];
			$ewc_arrayVarPreviewRotationY[$index] = $ewc_arrayVarPreviewRotationY[$tdc];
			$ewc_arrayVarPreviewRotationZ[$index] = $ewc_arrayVarPreviewRotationZ[$tdc];
			$ewc_arrayVarPreviewScaleX[$index] = $ewc_arrayVarPreviewScaleX[$tdc];
			$ewc_arrayVarPreviewScaleY[$index] = $ewc_arrayVarPreviewScaleY[$tdc];
			$ewc_arrayVarPreviewScaleZ[$index] = $ewc_arrayVarPreviewScaleZ[$tdc];
			
			// Create and store name
			$ewc_arrayVarNodePreviewArray3D[$i - 1] = ($obj + $ewc_arrayVarTempArraySuffix + "_3D_" + $i);
			
			// Duplicate and tranform
			instance -name $ewc_arrayVarNodePreviewArray3D[$i - 1] $obj;
			editDisplayLayerMembers -noRecurse "defaultLayer" $ewc_arrayVarNodePreviewArray3D[$i - 1];
			
			// test for locked
			$source = `connectionInfo -sourceFromDestination ($ewc_arrayVarNodePreviewArray3D[$i - 1] + ".overrideEnabled")`;
			
			if ($source != "")
				disconnectAttr $source ($ewc_arrayVarNodePreviewArray3D[$i - 1] + ".drawOverride");
			
			// Drawing
			setAttr ($ewc_arrayVarNodePreviewArray3D[$i - 1] + ".overrideEnabled") true;
			
			xform
			 -absolute
			 -translation
				$ewc_arrayVarPreviewTransformX[$index]
				$ewc_arrayVarPreviewTransformY[$index]
				$ewc_arrayVarPreviewTransformZ[$index]
			-rotation
				$ewc_arrayVarPreviewRotationX[$index]
				$ewc_arrayVarPreviewRotationY[$index]
				$ewc_arrayVarPreviewRotationZ[$index]
			-scale
				$ewc_arrayVarPreviewScaleX[$index]
				$ewc_arrayVarPreviewScaleY[$index]
				$ewc_arrayVarPreviewScaleZ[$index]
			$ewc_arrayVarNodePreviewArray3D[$i - 1];
			
			// Increment
			$index++;
		}
	} // End 3D creation
	
	
	// Update scatter, if active
	string $scatterBoxes[] = ewc_arrayControlNames(10, 0, 3);
	int $scatValue[3];
	int $scatEnable[3];
	for ($i = 0; $i < 3; $i++)
	{
		$scatValue[$i] = `checkBox -query -value $scatterBoxes[$i]`;
		$scatEnable[$i] = `checkBox -query -enable $scatterBoxes[$i]`;
	}
	
	//if ()
	if ($ewc_arrayVarScatterEnabled[0] && $scatValue[0] && $scatEnable[0])
		ewc_arrayScatterTransform(1);
	if ($ewc_arrayVarScatterEnabled[1] && $scatValue[0] && $scatEnable[0])
		ewc_arrayScatterTransform(2);
	if ($ewc_arrayVarScatterEnabled[2] && $scatValue[0] && $scatEnable[0])
		ewc_arrayScatterTransform(3);
	if ($ewc_arrayVarScatterEnabled[3] && $scatValue[1] && $scatEnable[1])
		ewc_arrayScatterRotate(1);
	if ($ewc_arrayVarScatterEnabled[4] && $scatValue[1] && $scatEnable[1])
		ewc_arrayScatterRotate(2);
	if ($ewc_arrayVarScatterEnabled[5] && $scatValue[1] && $scatEnable[1])
		ewc_arrayScatterRotate(3);
	if ($ewc_arrayVarScatterEnabled[6] && $scatValue[2] && $scatEnable[2])
		ewc_arrayScatterScale(1);
	if ($ewc_arrayVarScatterEnabled[7] && $scatValue[2] && $scatEnable[2])
		ewc_arrayScatterScale(2);
	if ($ewc_arrayVarScatterEnabled[8] && $scatValue[2] && $scatEnable[2])
		ewc_arrayScatterScale(3);
	
	$ewc_arrayVarActivePreviewStatus = 1;
	
	select -clear;
	
} // End ewc_arrayCreatePreview()
//===========================================
// Toggle the uniform scaling of the array
global proc ewc_arrayToggleUniformScale(int $case)
{
	// Globals
	global float	$ewc_arrayVarOriginalYZScaleValues[4];
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];
	global float	$ewc_arrayVarPreviewScaleX[];
	global float	$ewc_arrayVarPreviewScaleY[];
	global float	$ewc_arrayVarPreviewScaleZ[];
	global float	$ewc_arrayVarScatterScaleX[];
	global float	$ewc_arrayVarScatterScaleY[];
	global float	$ewc_arrayVarScatterScaleZ[];
	global int	$ewc_arrayVarScatterEnabled[9];
	
	int $size1;
	int $size2;
	int $size3;
	float $pos;
	float $randX;
	float $randY;
	float $randZ;
	
	// Field control names
	string $field[] = ewc_arrayControlNames(4, 6, 12);
	string $btn[] = ewc_arrayControlNames(13, 0, 2);
	
	for ($i = 0; $i < 6; $i++)
		stringArrayRemoveAtIndex(3, $field);
	
	// Query the active side
	int $side = `floatField
			-query
			-enable
			$field[0]`;
			
	// Scatter controls
	string $scatterCbox[] = ewc_arrayControlNames(10, 2, 1);
	int $scatValue = `checkBox -query -value $scatterCbox[0]`;
	int $scatState = `checkBox -query -enable $scatterCbox[0]`;
				
	// Query case and execute the correct block
	switch ($case)
	{
		case 0: // Toggle off uniform
			// Incremental side
			if ($side)
			{
				for ($i = 1; $i < 3; $i++)
				{
					floatField
						-edit
						-enable true
						$field[$i];
					button
						-edit
						-enable true
						($btn[0] + ($i + 7));
					button
						-edit
						-enable true
						($btn[1] + ($i + 7));
				}
			}
			// Total side
			else
			{
				for ($i = 4; $i < 6; $i++)
				{
					floatField
						-edit
						-enable true
						$field[$i];
					button
						-edit
						-enable true
						($btn[0] + ($i + 13));
					button
						-edit
						-enable true
						($btn[1] + ($i + 13));
				}
			}
			
			// Reset the YZ fields to original values
			floatField
				-edit
				-value $ewc_arrayVarOriginalYZScaleValues[0]
				$field[1];
				
			floatField
				-edit
				-value $ewc_arrayVarOriginalYZScaleValues[1]
				$field[2];
				
			floatField
				-edit
				-value $ewc_arrayVarOriginalYZScaleValues[2]
				$field[4];
				
			floatField
				-edit
				-value $ewc_arrayVarOriginalYZScaleValues[3]
				$field[5];
				
			// 1D
			$size1 = size($ewc_arrayVarNodePreviewArray1D);
			
			for ($i = 1; $i < ($size1 + 1); $i++)
			{
				if ($scatValue && $scatState)
				{
					$randX = $ewc_arrayVarScatterScaleX[$i - 1];
					$randY = $ewc_arrayVarScatterScaleY[$i - 1];
					$randZ = $ewc_arrayVarScatterScaleZ[$i - 1];
					$randX = ((!$randX) ? 1: $randX);
					$randY = ((!$randY) ? 1: $randY);
					$randZ = ((!$randZ) ? 1: $randZ);
				}
				else
				{
					$randX = 1;
					$randY = 1;
					$randZ = 1;
				}
				
				setAttr
					($ewc_arrayVarNodePreviewArray1D[$i - 1] + ".scaleX")
					($ewc_arrayVarPreviewScaleX[$i - 1] * $randX);
					
				setAttr
					($ewc_arrayVarNodePreviewArray1D[$i - 1] + ".scaleY")
					($ewc_arrayVarPreviewScaleY[$i - 1] * $randY);
					
				setAttr
					($ewc_arrayVarNodePreviewArray1D[$i - 1] + ".scaleZ")
					($ewc_arrayVarPreviewScaleZ[$i - 1] * $randZ);
			}
			
			// 2D
			$size2 = size($ewc_arrayVarNodePreviewArray2D);
			if ($size1)
			{
				for ($i = 0; $i < $size2; $i++)
				{
					if ($scatValue && $scatState)
					{
						$randX = $ewc_arrayVarScatterScaleX[$size1 + $i];
						$randY = $ewc_arrayVarScatterScaleY[$size1 + $i];
						$randZ = $ewc_arrayVarScatterScaleZ[$size1 + $i];
						$randX = ((!$randX) ? 1: $randX);
						$randY = ((!$randY) ? 1: $randY);
						$randZ = ((!$randZ) ? 1: $randZ);
					}
					else
					{
						$randX = 1;
						$randY = 1;
						$randZ = 1;
					}
					
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleX")
						($ewc_arrayVarPreviewScaleX[$size1 + $i + 1] * $randX);
					
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleY")
						($ewc_arrayVarPreviewScaleY[$size1 + $i + 1] * $randY);
						
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleZ")
						($ewc_arrayVarPreviewScaleZ[$size1 + $i + 1] * $randZ);
				}
			}
			
			// 3D
			$size3 = size($ewc_arrayVarNodePreviewArray3D);
			if ($size3)
			{
				for ($i = 0; $i < $size3; $i++)
				{
					if ($scatValue && $scatState)
					{
						$randX = $ewc_arrayVarScatterScaleX[$size1 + $size2 + $i];
						$randY = $ewc_arrayVarScatterScaleY[$size1 + $size2 + $i];
						$randZ = $ewc_arrayVarScatterScaleZ[$size1 + $size2 + $i];
						$randX = ((!$randX) ? 1: $randX);
						$randY = ((!$randY) ? 1: $randY);
						$randZ = ((!$randZ) ? 1: $randZ);
					}
					else
					{
						$randX = 1;
						$randY = 1;
						$randZ = 1;
					}
					
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleX")
						($ewc_arrayVarPreviewScaleX[$size1 + $size2 + $i + 1] * $randX);
						
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleY")
						($ewc_arrayVarPreviewScaleY[$size1 + $size2 + $i + 1] * $randY);
						
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleZ")
						($ewc_arrayVarPreviewScaleZ[$size1 + $size2 + $i + 1] * $randZ);
				}
			}
			
			// Query the 2D constraint
			string $scatter[] = ewc_arrayControlNames(10, 2, 1);
			string $seed[] = ewc_arrayControlNames(13, 18, 2);
			string $btnS[] = ewc_arrayControlNames(13, 6, 2);
			string $all[] = ewc_arrayControlNames(13, 10, 1);
			string $fldS[] = ewc_arrayControlNames(11, 14, 4);
			
			if (`checkBox -query -value $scatter[0]`)
			{
				if ($size1)
				{
					button -edit -enable true $all[0];
					button -edit -enable true $seed[0];
					button -edit -enable true $seed[1];
				}
				
				for ($i = 0; $i < 4; $i++)
					floatField -edit -enable true $fldS[$i];
				
				for ($i = 0; $i < 4; $i++)
				{
					button -edit -enable true ($btnS[0] + (15 + $i));
					button -edit -enable true ($btnS[1] + (15 + $i));
				}
				
				/*checkBox
					-edit
					-enable false
					$scatter[1];*/
			}
			
			break;
		case 1: // Toggle on uniform
			// Incremental side
			if ($side)
			{
				for ($i = 1; $i < 3; $i++)
				{
					floatField
						-edit
						-enable false
						$field[$i];
					button
						-edit
						-enable false
						($btn[0] + ($i + 7));
					button
						-edit
						-enable false
						($btn[1] + ($i + 7));
				}
			}
			// Total side
			else
			{
				for ($i = 4; $i < 6; $i++)
				{
					floatField
						-edit
						-enable false
						$field[$i];
					button
						-edit
						-enable false
						($btn[0] + ($i + 13));
					button
						-edit
						-enable false
						($btn[1] + ($i + 13));
				}
			}
			
			// Store the original values before updating
			$ewc_arrayVarOriginalYZScaleValues[0] = `floatField
								-query
								-value
								$field[1]`;
								
			$ewc_arrayVarOriginalYZScaleValues[1] = `floatField
								-query
								-value
								$field[2]`;
								
			$ewc_arrayVarOriginalYZScaleValues[2] = `floatField
								-query
								-value
								$field[4]`;
								
			$ewc_arrayVarOriginalYZScaleValues[3] = `floatField
								-query
								-value
								$field[5]`;
			
			
			ewc_arrayToggleUniformScale(2);
			
			// 1D
			$size1 = size($ewc_arrayVarNodePreviewArray1D);
			
			for ($i = 1; $i < ($size1 + 1); $i++)
			{
				if ($scatValue && $scatState && $ewc_arrayVarScatterEnabled[6])
				{
					$pos = $ewc_arrayVarPreviewScaleX[$i - 1] * $ewc_arrayVarScatterScaleX[$i - 1];
					$pos = ((!$pos) ? $ewc_arrayVarPreviewScaleX[$i - 1]: $pos);
				}
				else
					$pos = $ewc_arrayVarPreviewScaleX[$i - 1];
				
				
				setAttr
					($ewc_arrayVarNodePreviewArray1D[$i - 1] + ".scaleY")
					$pos;
					
				setAttr
					($ewc_arrayVarNodePreviewArray1D[$i - 1] + ".scaleZ")
					$pos;
			}
			
			// 2D
			$size2 = size($ewc_arrayVarNodePreviewArray2D);
			if ($size2)
			{
				for ($i = 0; $i < $size2; $i++)
				{
					if ($scatValue && $scatState && $ewc_arrayVarScatterEnabled[6])
					{
						$pos = $ewc_arrayVarPreviewScaleX[$size1 + $i + 1] * $ewc_arrayVarScatterScaleX[$size1 + $i];
						$pos = ((!$pos) ? $ewc_arrayVarPreviewScaleX[$size1 + $i + 1]: $pos);
					}
					else
						$pos = $ewc_arrayVarPreviewScaleX[$size1 + $i + 1];
					
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleY")
						$pos;
						
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".scaleZ")
						$pos;
				}
			}
			
			// 3D
			$size3 = size($ewc_arrayVarNodePreviewArray3D);
			if ($size3)
			{
				for ($i = 0; $i < $size3; $i++)
				{	
					if ($scatValue && $scatState && $ewc_arrayVarScatterEnabled[6])
					{
						$pos = $ewc_arrayVarPreviewScaleX[$size1 + $size2 + $i + 1] * $ewc_arrayVarScatterScaleX[$size1 + $size2 + $i];
						$pos = ((!$pos) ? $ewc_arrayVarPreviewScaleX[$size1 + $size2 + $i + 1]: $pos);
					}
					else
						$pos = $ewc_arrayVarPreviewScaleX[$size1 + $size2 + $i + 1];
					
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleY")
						$pos;
						
					setAttr
						($ewc_arrayVarNodePreviewArray3D[$i] + ".scaleZ")
						$pos;
				}
			}
			
			// Query the 2D constraint
			string $scatter[] = ewc_arrayControlNames(10, 2, 1);
			string $seed[] = ewc_arrayControlNames(13, 18, 2);
			string $btnS[] = ewc_arrayControlNames(13, 6, 2);
			string $all[] = ewc_arrayControlNames(13, 10, 1);
			string $fldS[] = ewc_arrayControlNames(11, 14, 4);
			
			if (`checkBox -query -value $scatter[0]`)
			{
				button -edit -enable false $all[0];
				button -edit -enable false $seed[0];
				button -edit -enable false $seed[1];
				
				for ($i = 0; $i < 4; $i++)
					floatField -edit -enable false $fldS[$i];
				
				for ($i = 0; $i < 4; $i++)
				{
					button -edit -enable false ($btnS[0] + (15 + $i));
					button -edit -enable false ($btnS[1] + (15 + $i));
				}
			}
			
			break;
			
		case 2: // Uniform field update
			// Query the X values and edit the YZ fields
			int $n;
			for ($i = 1; $i < 5; $i++)
				floatField
					-edit
					-value (`floatField
						-query
						-value
						$field[$n = (($i < 3) ? 0: 3)]`)
					$field[$n = (($i < 3) ? $i: $i + 1)];
			
			break;
	} // End switch

} // End ewc_arrayToggleUniformScale()
//===========================================
// Update the transformation fields when updating dimension count
global proc ewc_arrayDimensionCount(int $dir, string $field)
{
	// Get current count
	int $count = `intField
			-query
			-value
			$field`;
	
	// Stop the counter from going below 0
	if ($count == 1 && $dir == 0)
		return;
	
	// Update the field
	switch ($dir)
	{
		case 0:
			intField
				-edit
				-value ($count - 1)
				$field;
			break;
		case 1:
			intField
				-edit
				-value ($count + 1)
				$field;
			break;
	} // End switch
	
	if ($field == "ewc_intFldDimensionCount1D")
		ewc_array1DUpdateTransformationField();
	
} // End ewc_arrayDimensionCount()




//===========================================
// Update transformation and total float fields
global proc ewc_arrayUpdateTransformationFields(int $dir, string $incFld, string $totFld, int $side)
{
	// Query the field values
	float $currValue = `floatField
				-query
				-value
				(($side) ? $incFld : $totFld)`;
	
	// Query the precision field
	float $step = `floatField
				-query
				-value
				"ewc_fltFldFieldPrecision"`;
	// Array count
	int $count = `intField
			-query
			-value
			"ewc_intFldDimensionCount1D"`;
	
	float $fieldValue;
	$count = $count - 1;
	// Determine step addition/subtraction
	switch ($dir)
	{
		case 0: // Subtraction
			$fieldValue = ($currValue - $step);
			break;
		case 1: // Addition
			$fieldValue = ($currValue + $step);
			break;
	} // End switch
	
	// Import field control names
	string $fld[] =  ewc_arrayControlNames(4, 6, 12);
	for ($i = 0; $i < 6; $i++)
		stringArrayRemoveAtIndex(3, $fld);
	
	// Test for negative values
	
	if ((stringArrayContains($incFld, $fld) || stringArrayContains($totFld, $fld)) && $fieldValue < .001)
	{
		floatField
			-edit
			-value .001
			(($side) ? $incFld : $totFld);
		$fieldValue = .001;
	}
	
	// Incrememntal Side
	if ($incFld != $fld[0] && $incFld != $fld[1] && $incFld != $fld[2])
		floatField
			-edit
			-value (($side) ? $fieldValue : ($fieldValue / $count))
			$incFld;
	else
		floatField
			-edit
			-value (($side) ? $fieldValue : (ewc_arrayCalculateScaleOffset("inc", $fieldValue, $count)))
			$incFld;
	
	// Total Side
	if ($totFld != $fld[3] && $totFld != $fld[4] && $totFld != $fld[5])
		floatField
			-edit
			-value (($side) ? ($fieldValue * $count) : $fieldValue)
			$totFld;
	else
	{
		floatField
			-edit
			-value (($side) ? (ewc_arrayCalculateScaleOffset("total", $fieldValue, $count)) : $fieldValue)
			$totFld;
	}
	
	// Test for uniform
	if (($incFld == $fld[0] || $incFld == $fld[3]) && `checkBox -query -value "ewc_cboxUniformArray"`)
	{
		// YZ control names
		string $yz[] = {$fld[1], $fld[2], $fld[4], $fld[5]};
		
		for ($i = 0; $i < 4; $i++)
			floatField
				-edit
				-value (($i < 2) ? (`floatField -query -value $fld[0]`) : (`floatField -query -value $fld[3]`))
				$yz[$i];
	}
	
	// Update array
	ewc_arrayActiveUpdate($incFld);
	
} // End ewc_arrayUpdateTransformationFields()
//===========================================
// Toggle the drawing states of the the array preview
global proc ewc_arrayPreviewDrawStates(int $type, int $state)
{
	// Control names
	string $cbox[] = ewc_arrayControlNames(9, 0, 3);
	
	// Import the array
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];
	//ewc_arrayPreviewDrawStates(1, off)
	// Eval $type
	switch ($type)
	{
		case 1: // Bounding Box
			for ($each in $ewc_arrayVarNodePreviewArray1D)
			{
				setAttr ($each + ".overrideEnabled") true;
				setAttr ($each + ".overrideLevelOfDetail") $state;
			}
			for ($each in $ewc_arrayVarNodePreviewArray2D)
			{
				setAttr ($each + ".overrideEnabled") true;
				setAttr ($each + ".overrideLevelOfDetail") $state;
			}
			for ($each in $ewc_arrayVarNodePreviewArray3D)
			{
				setAttr ($each + ".overrideEnabled") true;
				setAttr ($each + ".overrideLevelOfDetail") $state;
			}
			
			if ($state)
				checkBox -edit -enable false $cbox[1];
			else
				checkBox -edit -enable true $cbox[1];
			break;
		case 2: // Wireframe
			for ($each in $ewc_arrayVarNodePreviewArray1D)
			{
				setAttr ($each + ".overrideEnabled") true;
				setAttr ($each + ".overrideShading") $state;
			}
			for ($each in $ewc_arrayVarNodePreviewArray2D)
			{
				setAttr ($each + ".overrideEnabled") true;
				setAttr ($each + ".overrideShading") $state;
			}
			for ($each in $ewc_arrayVarNodePreviewArray3D)
			{
				setAttr ($each + ".overrideEnabled") true;
				setAttr ($each + ".overrideShading") $state;
			}
			break;
		case 3: // Visibility
			for ($each in $ewc_arrayVarNodePreviewArray1D)
			{
				setAttr ($each + ".overrideVisibility") true;
				setAttr ($each + ".overrideVisibility") $state;
			}
			for ($each in $ewc_arrayVarNodePreviewArray2D)
			{
				setAttr ($each + ".overrideEnabled") true;
				setAttr ($each + ".overrideVisibility") $state;
			}
			for ($each in $ewc_arrayVarNodePreviewArray3D)
			{
				setAttr ($each + ".overrideEnabled") true;
				setAttr ($each + ".overrideVisibility") $state;
			}
			if ($state)
			{
				checkBox -edit -enable true $cbox[0];
				checkBox -edit -enable true $cbox[1];
			} else {
				checkBox -edit -enable false $cbox[0];
				checkBox -edit -enable false $cbox[1];
			}
			break;
	} // End switch
} // End ewc_arrayPreviewDrawStates()



//===========================================
// Using the current time generate a unique prefix
global proc ewc_arrayLoadCurrentSuffix()
{
	global string $ewc_arrayVarTempArraySuffix;
	
	// Get the current time to be used as
	// a prefix for the temporary array
	string $time = `date -time`;
	
	// Remove the colons
	string $strip[];
	tokenize $time ":" $strip;

	// Store in the global var
	$ewc_arrayVarTempArraySuffix = ($strip[0] + $strip[1] + $strip[2]);
	
} // End ewc_arrayLoadCurrentSuffix()



//===========================================
// Clear globals
global proc ewc_arrayClearGlobals()
{
	// standard
	global string	$ewc_arrayVarTempArraySuffix;
	$ewc_arrayVarTempArraySuffix = "";
	global string	$ewc_arrayVarTargetNameFullPath;
	$ewc_arrayVarTargetNameFullPath = "";
	
	// preview names
	global string	$ewc_arrayVarNodePreviewArray1D[];
	clear $ewc_arrayVarNodePreviewArray1D;
	global string	$ewc_arrayVarNodePreviewArray2D[];
	clear $ewc_arrayVarNodePreviewArray2D;
	global string	$ewc_arrayVarNodePreviewArray3D[];
	clear $ewc_arrayVarNodePreviewArray3D;
	
	// preview values
	global float	$ewc_arrayVarPreviewTransformX[];
	clear $ewc_arrayVarPreviewTransformX;
	global float	$ewc_arrayVarPreviewTransformY[];
	clear $ewc_arrayVarPreviewTransformY;
	global float	$ewc_arrayVarPreviewTransformZ[];
	clear $ewc_arrayVarPreviewTransformZ;
	global float	$ewc_arrayVarPreviewRotationX[];
	clear $ewc_arrayVarPreviewRotationX;
	global float	$ewc_arrayVarPreviewRotationY[];
	clear $ewc_arrayVarPreviewRotationY;
	global float	$ewc_arrayVarPreviewRotationZ[];
	clear $ewc_arrayVarPreviewRotationZ;
	global float	$ewc_arrayVarPreviewScaleX[];
	clear $ewc_arrayVarPreviewScaleX;
	global float	$ewc_arrayVarPreviewScaleY[];
	clear $ewc_arrayVarPreviewScaleY;
	global float	$ewc_arrayVarPreviewScaleZ[];
	clear $ewc_arrayVarPreviewScaleZ;
	
	
	
	// scatter
	global float	$ewc_arrayVarScatterTransformX[];
	clear $ewc_arrayVarScatterTransformX;
	global float	$ewc_arrayVarScatterTransformY[];
	clear $ewc_arrayVarScatterTransformY;
	global float	$ewc_arrayVarScatterTransformZ[];
	clear $ewc_arrayVarScatterTransformZ;
	global float	$ewc_arrayVarScatterRotationX[];
	clear $ewc_arrayVarScatterRotationX;
	global float	$ewc_arrayVarScatterRotationY[];
	clear $ewc_arrayVarScatterRotationY;
	global float	$ewc_arrayVarScatterRotationZ[];
	clear $ewc_arrayVarScatterRotationZ;
	global float	$ewc_arrayVarScatterScaleX[];
	clear $ewc_arrayVarScatterScaleX;
	global float	$ewc_arrayVarScatterScaleY[];
	clear $ewc_arrayVarScatterScaleY;
	global float	$ewc_arrayVarScatterScaleZ[];
	clear $ewc_arrayVarScatterScaleZ;
	global int	$ewc_arrayVarScatterEnabled[9];
	clear $ewc_arrayVarScatterEnabled;
		
	// Store scale values for uniform toggle
	global float	$ewc_arrayVarOriginalYZScaleValues[];
	clear $ewc_arrayVarOriginalYZScaleValues;
	
	// Scatter/Scale pane toggle
	global float	$ewc_arrayVarOriginalScatterValues[];
	clear $ewc_arrayVarOriginalScatterValues;
	
	//
	global int	$ewc_arrayVarStoreActiveSide[];
	clear $ewc_arrayVarStoreActiveSide;
	
	//
	global string	$ewc_arrayVarReorientStoreActiveSide;
	$ewc_arrayVarReorientStoreActiveSide = "";
	global string	$ewc_arrayVarStoreCurrentPlaneConstraint;
	$ewc_arrayVarStoreCurrentPlaneConstraint = "";
	global string	$ewc_arrayVarConstrainedPlaneAxisLabel;
	$ewc_arrayVarConstrainedPlaneAxisLabel = "";

} // End ewc_arrayClearGlobals()
//===========================================
// Update the dimensional offsets of the array
global proc ewc_arrayUpdateDimensionalOffset(int $case)
{
	// Float control names
	string $ctrl2D[] = ewc_arrayControlNames(8, 0, 3);
	string $ctrl3D[] = ewc_arrayControlNames(8, 3, 3);
	
	// Import globals
	global string	$ewc_arrayVarTargetNameFullPath;
	global string	$ewc_arrayVarNodePreviewArray3D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global float	$ewc_arrayVarPreviewTransformX[];
	global float	$ewc_arrayVarPreviewTransformY[];
	global float	$ewc_arrayVarPreviewTransformZ[];
	
	// scatter
	global float	$ewc_arrayVarScatterTransformX[];
	global float	$ewc_arrayVarScatterTransformY[];
	global float	$ewc_arrayVarScatterTransformZ[];
	
	string $obj = $ewc_arrayVarTargetNameFullPath;
	int $s1 = size($ewc_arrayVarNodePreviewArray1D);
	int $s2 = size($ewc_arrayVarNodePreviewArray2D);
	
	global int	$ewc_arrayVarStoreActiveSide[3];
	int $totalTranslate = $ewc_arrayVarStoreActiveSide[0];
	
	// dimension controls, 2D and 3D only
	string $dimInt[] = ewc_arrayControlNames(7, 1, 2);
	int $dimC[2];
	
	for ($i = 0; $i < 2; $i++)
		$dimC[$i] = `intField
				-query
				-value
				$dimInt[$i]`;
				
	// Offset fields
	string $offset2D[] = ewc_arrayControlNames(8, 0, 3);
	string $offset3D[] = ewc_arrayControlNames(8, 3, 3);
	
	// Increment fields
	string $inc[] = ewc_arrayControlNames(4, 0, 3);
	
	// Tot fields
	string $tot[] = ewc_arrayControlNames(4, 9, 3);
	
	// vars for calculations
	int $size;
	int $div;
	int $row;
	int $index;
	int $level1;
	int $level2;
	int $counter = 1;
	int $step = 1;
	int $step2 = 1;
	float $pos;
	float $val;
	float $original;
	float $off3d;
	float $off2d;
	float $xform;
	float $rand;
	float $dimension;
	int $scatValue;
	int $scatEnable;
	
	// Scatter checkboxes
	string $scatterBoxes[] = ewc_arrayControlNames(10, 0, 1);
	$scatValue = `checkBox -query -value $scatterBoxes[0]`;
	$scatEnable = `checkBox -query -enable $scatterBoxes[0]`;
	
	// eval axis
	switch ($case)
	{
		case 1: // Update the 2D X axis
			$size = size($ewc_arrayVarNodePreviewArray2D);
			
			if ($size)
			{
				$div = $size / ($dimC[0] - 1);
				$row = $div;
				$index = 0;
				
				// Reposition roots
				$original = `getAttr ($obj + ".translateX")`;
				$dimension = `floatField -query -value $offset2D[0]`;
				
				// Loop roots
				for ($i = 0; $i < $size; $i += $row)
				{
					if ($scatValue && $scatEnable)
						$rand = $ewc_arrayVarScatterTransformX[$s1 + $i];
					else
						$rand = 0;
					
					$val = ($original + ($step * $dimension));
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".translateX") 
						($val + $rand);
					$step++;
					
					$ewc_arrayVarPreviewTransformX[$s1 + 1 + $i] = $val;
				}
				
				$step = 1;
				
				// Loop each row skipping the roots
				for ($i = 1; $i < $size; $i++)
				{
					if ($scatValue && $scatEnable)
						$rand = $ewc_arrayVarScatterTransformX[$s1 + $i];
					else
						$rand = 0;
					
					// Reposition arrays past roots
					if (($i) != $div)
					{
						if ($totalTranslate && $i == ($div - 1))
						{
							$pos = $original + `floatField -query -value $tot[0]` + (`floatField -query -value $offset2D[0]` * $step2);
							setAttr
								($ewc_arrayVarNodePreviewArray2D[$i] + ".translateX") 
								($pos + $rand);
							$step2++;
						} else {
							$pos = $ewc_arrayVarPreviewTransformX[$index + $s1 + 1] + `floatField -query -value $inc[0]` * $step;
							setAttr
								($ewc_arrayVarNodePreviewArray2D[$i] + ".translateX") 
								($pos + $rand);
						}
						
						// store the new position
						$ewc_arrayVarPreviewTransformX[$row + $i] = $pos;
						
						$step ++;
					} else {
						$div = $div + $row;
						$step = 1;
						$index = $index + $row;
					}
				}
			}
			
			
			// Update the 3D__________
			$size = size($ewc_arrayVarNodePreviewArray3D);
			$off3d = `floatField -query -value $offset3D[0]`;
			
			if(!$size)
				return;
			
			// Loop 3D 
			for ($i = 0; $i < $size; $i++)
			{
				if ($scatValue && $scatEnable)
					$rand = $ewc_arrayVarScatterTransformX[$s1 + $s2 + $i];
				else
					$rand = 0;
				
				$val = ($off3d + $ewc_arrayVarPreviewTransformX[$i]);
				
				setAttr ($ewc_arrayVarNodePreviewArray3D[$i] + ".translateX") 
					($val + $rand);
				
				$ewc_arrayVarPreviewTransformX[$s1 + $s2 + $i + 1] = $val;
			}
			
			break;
			
			
		case 2: // Update the 2D Y axis
			$size = size($ewc_arrayVarNodePreviewArray2D);
			
			if ($size)
			{
				$div = $size / ($dimC[0] - 1);
				$row = $div;
				$index = 0;
				
				// Reposition roots
				$original = `getAttr ($obj + ".translateY")`;
				$dimension = `floatField -query -value $offset2D[1]`;
				
				// Loop roots
				for ($i = 0; $i < $size; $i += $row)
				{
					if ($scatValue && $scatEnable)
						$rand = $ewc_arrayVarScatterTransformY[$s1 + $i];
					else
						$rand = 0;
					
					$val = ($original + ($step * $dimension));
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".translateY") 
						($val + $rand);
					$step++;
					
					$ewc_arrayVarPreviewTransformY[$s1 + 1 + $i] = $val;
				}
				
				$step = 1;
				
				// Loop each row skipping the roots
				for ($i = 1; $i < $size; $i++)
				{
					if ($scatValue && $scatEnable)
						$rand = $ewc_arrayVarScatterTransformY[$s1 + $i];
					else
						$rand = 0;
					
					// Reposition arrays past roots
					if (($i) != $div)
					{
						if ($totalTranslate && $i == ($div - 1))
						{
							$pos = $original + `floatField -query -value $tot[1]` + (`floatField -query -value $offset2D[1]` * $step2);
							setAttr
								($ewc_arrayVarNodePreviewArray2D[$i] + ".translateY") 
								($pos + $rand);
							$step2++;
						} else {
							$pos = $ewc_arrayVarPreviewTransformY[$index + $s1 + 1] + `floatField -query -value $inc[1]` * $step;
							setAttr
								($ewc_arrayVarNodePreviewArray2D[$i] + ".translateY") 
								($pos + $rand);
						}
						
						// store the new position
						$ewc_arrayVarPreviewTransformY[$row + $i] = $pos;
						
						$step ++;
					} else {
						$div = $div + $row;
						$step = 1;
						$index = $index + $row;
					}
				}
			}
			
			
			// Update the 3D__________
			$size = size($ewc_arrayVarNodePreviewArray3D);
			$off3d = `floatField -query -value $offset3D[1]`;
			
			if(!$size)
				return;
			
			// Loop 3D 
			for ($i = 0; $i < $size; $i++)
			{
				if ($scatValue && $scatEnable)
					$rand = $ewc_arrayVarScatterTransformY[$s1 + $s2 + $i];
				else
					$rand = 0;
				
				$val = ($off3d + $ewc_arrayVarPreviewTransformY[$i]);
				
				setAttr ($ewc_arrayVarNodePreviewArray3D[$i] + ".translateY") 
					($val + $rand);
				
				$ewc_arrayVarPreviewTransformY[$s1 + $s2 + $i + 1] = $val;
			}
			
			break;
			
			
		case 3: // Update the 2D Z axis
			$size = size($ewc_arrayVarNodePreviewArray2D);
			
			if ($size)
			{
				$div = $size / ($dimC[0] - 1);
				$row = $div;
				$index = 0;
				
				// Reposition roots
				$original = `getAttr ($obj + ".translateZ")`;
				$dimension = `floatField -query -value $offset2D[2]`;
				
				// Loop roots
				for ($i = 0; $i < $size; $i += $row)
				{
					if ($scatValue && $scatEnable)
						$rand = $ewc_arrayVarScatterTransformZ[$s1 + $i];
					else
						$rand = 0;
					
					$val = ($original + ($step * $dimension));
					setAttr
						($ewc_arrayVarNodePreviewArray2D[$i] + ".translateZ") 
						($val + $rand);
					$step++;
					
					$ewc_arrayVarPreviewTransformZ[$s1 + 1 + $i] = $val;
				}
				
				$step = 1;
				
				// Loop each row skipping the roots
				for ($i = 1; $i < $size; $i++)
				{
					if ($scatValue && $scatEnable)
						$rand = $ewc_arrayVarScatterTransformZ[$s1 + $i];
					else
						$rand = 0;
					
					// Reposition arrays past roots
					if (($i) != $div)
					{
						if ($totalTranslate && $i == ($div - 1))
						{
							$pos = $original + `floatField -query -value $tot[2]` + (`floatField -query -value $offset2D[2]` * $step2);
							setAttr
								($ewc_arrayVarNodePreviewArray2D[$i] + ".translateZ") 
								($pos + $rand);
							$step2++;
						} else {
							$pos = $ewc_arrayVarPreviewTransformZ[$index + $s1 + 1] + `floatField -query -value $inc[2]` * $step;
							setAttr
								($ewc_arrayVarNodePreviewArray2D[$i] + ".translateZ") 
								($pos + $rand);
						}
						
						// store the new position
						$ewc_arrayVarPreviewTransformZ[$row + $i] = $pos;
						
						$step ++;
					} else {
						$div = $div + $row;
						$step = 1;
						$index = $index + $row;
					}
				}
			}
			
			// Update the 3D__________
			$size = size($ewc_arrayVarNodePreviewArray3D);
			$off3d = `floatField -query -value $offset3D[2]`;
			
			if(!$size)
				return;
			
			// Loop 3D 
			for ($i = 0; $i < $size; $i++)
			{
				if ($scatValue && $scatEnable)
					$rand = $ewc_arrayVarScatterTransformZ[$s1 + $s2 + $i];
				else
					$rand = 0;
				
				$val = ($off3d + $ewc_arrayVarPreviewTransformZ[$i]);
				
				setAttr ($ewc_arrayVarNodePreviewArray3D[$i] + ".translateZ") 
					$val;
					
				$ewc_arrayVarPreviewTransformZ[$s1 + $s2 + $i + 1] = $val;
			}
			
		//--------------------3D Updates Only----------------------------------
			
			break;
		case 4: // Update the 3D X axis
			$size = size($ewc_arrayVarNodePreviewArray3D);
			$off3d = `floatField -query -value $offset3D[0]`;
			
			// Prevent 'divide by zero' error
			if (!$size)
				return;
			
			// Loop 3D 
			for ($i = 0; $i < $size; $i++)
			{
				if ($scatValue && $scatEnable)
					$rand = $ewc_arrayVarScatterTransformX[$s1 + $s2 + $i];
				else
					$rand = 0;
				
				$val = ($off3d + $ewc_arrayVarPreviewTransformX[$i]);
				
				setAttr ($ewc_arrayVarNodePreviewArray3D[$i] + ".translateX") 
						($val + $rand);
						
				
				
				$ewc_arrayVarPreviewTransformX[$s1 + $s2 + $i + 1] = $val;
			}
			
			break;
			
			
		case 5: // Update the 3D Y axis
			$size = size($ewc_arrayVarNodePreviewArray3D);
			$off3d = `floatField -query -value $offset3D[1]`;
			
			// Prevent 'divide by zero' error
			if (!$size)
				return;
			
			// Loop 3D 
			for ($i = 0; $i < $size; $i++)
			{
				if ($scatValue && $scatEnable)
					$rand = $ewc_arrayVarScatterTransformY[$s1 + $s2 + $i];
				else
					$rand = 0;
				
				$val = ($off3d + $ewc_arrayVarPreviewTransformY[$i]);
				
				setAttr ($ewc_arrayVarNodePreviewArray3D[$i] + ".translateY") 
						($val + $rand);
				
				$ewc_arrayVarPreviewTransformY[$s1 + $s2 + $i + 1] = $val;
			}
			
			break;
			
			
		case 6: // Update the 3D Z axis
			$size = size($ewc_arrayVarNodePreviewArray3D);
			$off3d = `floatField -query -value $offset3D[2]`;
			
			// Prevent 'divide by zero' error
			if (!$size)
				return;
			
			// Loop 3D 
			for ($i = 0; $i < $size; $i++)
			{
				if ($scatValue && $scatEnable)
					$rand = $ewc_arrayVarScatterTransformZ[$s1 + $s2 + $i];
				else
					$rand = 0;
				
				$val = ($off3d + $ewc_arrayVarPreviewTransformZ[$i]);
				
				setAttr ($ewc_arrayVarNodePreviewArray3D[$i] + ".translateZ") 
						($val + $rand);
				
				$ewc_arrayVarPreviewTransformZ[$s1 + $s2 + $i + 1] = $val;
			}
			
			break;
	} // End switch
	
} // End ewc_arrayUpdateDimensionalOffset()
//===========================================
// Reset all parameters
global proc ewc_arrayResetArrayParameters()
{
	// TRANSFORMATION____
	string $tFld[] = ewc_arrayControlNames(4, 0, 18);
	string $tBtn[] = ewc_arrayControlNames(13, 0, 3);
	string $tCbx[] = ewc_arrayControlNames(3, 0, 2);
	
	// Float fields
	for ($i = 0; $i < 18; $i++)
		floatField
			-edit
			-value ((($i >= 6 && $i < 9) || ($i >= 15 && $i < 18)) ? 100 : 0)
			-enable (($i >= 0 && $i < 9) ? true : false)
			$tFld[$i];
	
	// Buttons (+) (-)
	for ($i = 1; $i < 19; $i++)
	{
		// +
		button
			-edit
			-enable (($i < 10) ? true : false)
			($tBtn[0] + $i);
		// -
		button
			-edit
			-enable (($i < 10) ? true : false)
			($tBtn[1] + $i);
	}
	
	// <>
	for ($i = 1; $i < 7; $i++)
	{
		button
			-edit
			-enable true
			($tBtn[2] + $i);
	}
	
	// Check boxes
	for ($i = 0; $i < 2; $i++)
	{
		checkBox
			-edit
			-value ((!$i) ? true : false)
			-enable true
			($tCbx[$i]);
	}
	
	// RESET ACTIVE SIDE
	global int	$ewc_arrayVarStoreActiveSide[];
	for ($i = 0; $i < 3; $i++)
		$ewc_arrayVarStoreActiveSide[$i] = 0;
	
	// GROUP/GEOMETRY_____
	string $gRad[] = ewc_arrayControlNames(5, 1, 4);
	
	for ($i = 0; $i < 5; $i += 3)
		radioButton
			-edit
			-select
			$gRad[$i];
	
	// DIMENSIONS____
	string $dFld[] = ewc_arrayControlNames(8, 0, 6);
	string $dInt[] = ewc_arrayControlNames(7, 0, 3);
	string $dBtn[] = ewc_arrayControlNames(13, 3, 2);
	string $dRad[] = ewc_arrayControlNames(6, 1, 1);
	
	// Float fields
	for ($i = 0; $i < 6; $i++)
		floatField
			-edit
			-value 0
			-enable false
			$dFld[$i];
	
	// Int fields
	for ($i = 0; $i < 3; $i++)
		intField
			-edit
			-value ((!$i) ? (ewc_arrayDefaultIntegerValues(2)) : 1)
			-enable ((!$i) ? true : false)
			$dInt[$i];
	
	// Buttons
	for ($i = 2; $i < 10; $i++)
	{
		// +				
		button
			-edit
			-enable (($i == 1) ? true : false)
			($dBtn[0] + $i);
		// -				
		button
			-edit
			-enable (($i == 1) ? true : false)
			($dBtn[1] + $i);
	}
	
	radioButton
		-edit
		-select
		$dRad[0];
	
	// SCATTER_____
	string $sFld[] = ewc_arrayControlNames(11, 0, 18);
	string $sBtn[] = ewc_arrayControlNames(13, 6, 14);
	string $sCbx[] = ewc_arrayControlNames(10, 0, 3);
	//string $sRad[] = ewc_arrayControlNames(12, 1, 3);
	string $sTxt[] = ewc_arrayControlNames(14, 2, 1);
	
	// Float fields
	for ($i = 0; $i < 18; $i++)
		floatField
			-edit
			-value (($i < 12) ? 0 : 100)
			-enable false
			$sFld[$i];

	// Buttons
	for ($i = 1; $i < 19; $i++)
	{
		button
			-edit
			-enable false
			($sBtn[0] + $i);
		button
			-edit
			-enable false
			($sBtn[1] + $i);
	}
	
	for ($i = 2; $i < 14; $i++)
		button
			-edit
			-enable false
			$sBtn[$i];
	
	// Check boxes
	for ($i = 0; $i < 3; $i++)
		checkBox
			-edit
			-value 0
			$sCbx[$i];
	
	
	// Main UI components 
	string $topUI[] = ewc_arrayControlNames(2, 4, 3);
	text	-edit
		-label (ewc_arrayDefaultIntegerValues(2))
		$topUI[0];
	floatField
		-edit
		-value (ewc_arrayDefaultIntegerValues(1))
		$topUI[2];
		
	// Delete the geometry and flush the arrays
	ewc_arrayDeleteClearArray(0);
	ewc_arrayCreatePreview();
	
} // End ewc_arrayResetArrayParameters()










//===========================================
// Script Jobs for modeless window
global proc ewc_arrayScriptJobs(int $case)
{
	global string	$ewc_arrayVarTargetNameFullPath;
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];
	
	switch ($case)
	{
		case 1: // Force deselect of array
			string $sel[] = `ls -selection -flatten`;
			
			if (stringArrayContains($ewc_arrayVarTargetNameFullPath, $sel))
			{
				select -clear;
				print "-- Can not select root object while Array is active. --\n";
			}
			
			if (size($ewc_arrayVarNodePreviewArray1D))
			{
				for ($each in $ewc_arrayVarNodePreviewArray1D)
				{
					if (stringArrayContains($each, $sel))
					{
						select -clear;
						print "-- Can not select duplicated objects while Array is active. --\n";
						return;
					}
				}
			}
			
			if (size($ewc_arrayVarNodePreviewArray2D))
			{
				for ($each in $ewc_arrayVarNodePreviewArray2D)
				{
					if (stringArrayContains($each, $sel))
					{
						select -clear;
						print "-- Can not select duplicated objects while Array is active. --\n";
						return;
					}
				}
			}
			
			if (size($ewc_arrayVarNodePreviewArray3D))
			{
				for ($each in $ewc_arrayVarNodePreviewArray3D)
				{
					if (stringArrayContains($each, $sel))
					{
						undo;
						print "-- Can not select duplicated objects while Array is active. --\n";
						return;
					}
				}
			}
			
			break;
			
		case 2: // Undo renaming
			string $sel[] = `ls -selection -flatten`;
			
			if (!objExists($ewc_arrayVarTargetNameFullPath))
			{
				undo;
			}
			
			if (size($ewc_arrayVarNodePreviewArray1D))
			{
				for ($each in $ewc_arrayVarNodePreviewArray1D)
				{
					if (!objExists($each))
					{
						undo;
						return;
					}
				}
			}
			
			if (size($ewc_arrayVarNodePreviewArray2D))
			{
				for ($each in $ewc_arrayVarNodePreviewArray2D)
				{
					if (!objExists($each))
					{
						undo;
						return;
					}
				}
			}
			
			if (size($ewc_arrayVarNodePreviewArray3D))
			{
				for ($each in $ewc_arrayVarNodePreviewArray3D)
				{
					if (stringArrayContains($each, $sel))
					{
						undo;
						print "-- Can not select duplicated objects while Array is active. --\n";
						return;
					}
				}
			}
			break;
	} // End switch
} // End ewc_arrayScriptJobs()



//===========================================
// Toggle the scattering of arrayed objects
global proc ewc_arrayToggleActiveScatter(int $case)
{
	string $field[] = ewc_arrayControlNames(4, 0, 9);
	int $size;
	
	switch ($case)
	{
		case 1: // Transform
			global float	$ewc_arrayVarScatterTransformX[];
			global float	$ewc_arrayVarScatterTransformY[];
			global float	$ewc_arrayVarScatterTransformZ[];
			
			if (size($ewc_arrayVarScatterTransformX))
				ewc_arrayActiveUpdate($field[0]);
			if (size($ewc_arrayVarScatterTransformY))
				ewc_arrayActiveUpdate($field[1]);
			if (size($ewc_arrayVarScatterTransformZ))
				ewc_arrayActiveUpdate($field[2]);
			
			break;
		case 2: // Rotate
			global float	$ewc_arrayVarScatterRotationX[];
			global float	$ewc_arrayVarScatterRotationY[];
			global float	$ewc_arrayVarScatterRotationZ[];
			
			if (size($ewc_arrayVarScatterRotationX))
				ewc_arrayActiveUpdate($field[3]);
			if (size($ewc_arrayVarScatterRotationY))
				ewc_arrayActiveUpdate($field[4]);
			if (size($ewc_arrayVarScatterRotationZ))
				ewc_arrayActiveUpdate($field[5]);
			
			break;
		case 3: // Scale
			global float	$ewc_arrayVarScatterScaleX[];
			global float	$ewc_arrayVarScatterScaleY[];
			global float	$ewc_arrayVarScatterScaleZ[];
			
			if (size($ewc_arrayVarScatterScaleX))
				ewc_arrayActiveUpdate($field[6]);
			if (size($ewc_arrayVarScatterScaleY))
				ewc_arrayActiveUpdate($field[7]);
			if (size($ewc_arrayVarScatterScaleZ))
				ewc_arrayActiveUpdate($field[8]);
			
			break;
	} // End switch
	
} // End ewc_arrayToggleActiveScatter()
//===========================================
//update the pivot via the +- buttons
global proc ewc_arrayUpdatePivotPoint(int $index, int $dir, string $field)
{
	// global vars
	global string	$ewc_arrayVarTargetNameFullPath;
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];

	// control names
	string $ppFld[] = ewc_arrayControlNames(17,0,3);
	string $rad[] = ewc_arrayControlNames(15, 18, 3);
	string $attr1[] = {".rotatePivotX", ".rotatePivotY", ".rotatePivotZ"};
	string $attr2[] = {".scalePivotX", ".scalePivotY", ".scalePivotZ"};
	float $precision = `floatField -q -v ewc_fltFldFieldPrecision`;
	float $val;
	
	// test radio button
	int $isRotate;
	string $sl = `radioCollection -q -sl $rad[0]`;
	
	if ($sl==$rad[1]) {
		$isRotate=1;
	} else if ($sl==$rad[2]) {
		$isRotate=0;
	}
	
	if ($isRotate) {
		$val = `getAttr ($ewc_arrayVarTargetNameFullPath+$attr1[$index])`;
	} else {$val = `getAttr ($ewc_arrayVarTargetNameFullPath+$attr2[$index])`;}
	$val = ($dir) ? $val + $precision: $val - $precision;
	floatField -e -v $val $ppFld[$index];
	
	// edit root
	if ($isRotate) {
		setAttr ($ewc_arrayVarTargetNameFullPath+$attr1[$index]) $val;
	} else {
		setAttr ($ewc_arrayVarTargetNameFullPath+$attr2[$index]) $val;
	}
	
	// edit 1d
	for ($each in $ewc_arrayVarNodePreviewArray1D) {
		if ($isRotate) {
			$val = `getAttr ($each+$attr1[$index])`;
		} else {$val = `getAttr ($each+$attr2[$index])`;}
		$val = ($dir) ? $val + $precision: $val - $precision;
		if ($isRotate) {
			setAttr ($each+$attr1[$index]) $val;
		} else {setAttr ($each+$attr2[$index]) $val;}
	}
	
	// edit 2d
	for ($each in $ewc_arrayVarNodePreviewArray2D) {
		if ($isRotate) {
			$val = `getAttr ($each+$attr1[$index])`;
		} else {$val = `getAttr ($each+$attr2[$index])`;}
		$val = ($dir) ? $val + $precision: $val - $precision;
		if ($isRotate) {
			setAttr ($each+$attr1[$index]) $val;
		} else {setAttr ($each+$attr2[$index]) $val;}
	}
	
	// edit 3d
	for ($each in $ewc_arrayVarNodePreviewArray3D) {
		if ($isRotate) {
			$val = `getAttr ($each+$attr1[$index])`;
		} else {$val = `getAttr ($each+$attr2[$index])`;}
		$val = ($dir) ? $val + $precision: $val - $precision;
		if ($isRotate) {
			setAttr ($each+$attr1[$index]) $val;
		} else {setAttr ($each+$attr2[$index]) $val;}
	}
	
}



//===========================================
//Update the pivot point via the float fields
global proc ewc_arrayUpdatePivotPointFields(int $index)
{
	// global vars
	global string	$ewc_arrayVarTargetNameFullPath;
	global string	$ewc_arrayVarNodePreviewArray1D[];
	global string	$ewc_arrayVarNodePreviewArray2D[];
	global string	$ewc_arrayVarNodePreviewArray3D[];
	
	// control names
	string $ppFld[] = ewc_arrayControlNames(17,0,3);
	string $rad[] = ewc_arrayControlNames(15, 18, 3);
	string $attr1[] = {".rotatePivotX", ".rotatePivotY", ".rotatePivotZ"};
	string $attr2[] = {".scalePivotX", ".scalePivotY", ".scalePivotZ"};
	float $ppVal,$val1,$dif,$dir;
	
	// test radio button
	int $isRotate;
	string $sl = `radioCollection -q -sl $rad[0]`;
	
	if ($sl==$rad[1]) {
		$isRotate=1;
	} else if ($sl==$rad[2]) {
		$isRotate=0;
	}
	
	$val1  = `floatField -q -v $ppFld[$index]`;
	
	// get direction
	$ppVal = `getAttr ($ewc_arrayVarTargetNameFullPath+$attr1[$index])`;
	print ("Field: "+$val1+", Pivot: "+$ppVal+"\n");
	if ($val1 > $ppVal) {
		$dir = 1;
	} else if ($val1 < $ppVal) {
		$dir = 0;
	} else if ($val1 == $ppVal) {
		return;
	}
	
	// edit root
	if ($isRotate) {
		setAttr ($ewc_arrayVarTargetNameFullPath+$attr1[$index]) $val1;
	} else {setAttr ($ewc_arrayVarTargetNameFullPath+$attr2[$index]) $val1;}
	
	// edit 1d
	for ($each in $ewc_arrayVarNodePreviewArray1D) {
		$ppVal = `getAttr ($each+$attr1[$index])`;
		//print ($ppVal+"\n");
		$dif = $val1 - $ppVal;
		//print ($dif+"\n");
		$val2 = $ppVal + $dif;
		//print ($each+": "+$val2+"\n--------------------\n");
		if ($isRotate) {
			setAttr ($each+$attr1[$index]) $val2;
		} else {setAttr ($each+$attr2[$index]) $val2;}
	}
	
	// edit 2d
	for ($each in $ewc_arrayVarNodePreviewArray2D) {
		$ppVal = `getAttr ($each+$attr1[$index])`;
		//print ($ppVal+"\n");
		$dif = $val1 - $ppVal;
		//print ($dif+"\n");
		$val2 = $ppVal + $dif;
		//print ($each+": "+$val2+"\n--------------------\n");
		if ($isRotate) {
			setAttr ($each+$attr1[$index]) $val2;
		} else {setAttr ($each+$attr2[$index]) $val2;}
	}
	
	// edit 3d
	for ($each in $ewc_arrayVarNodePreviewArray3D) {
		$ppVal = `getAttr ($each+$attr1[$index])`;
		//print ($ppVal+"\n");
		$dif = $val1 - $ppVal;
		//print ($dif+"\n");
		$val2 = $ppVal + $dif;
		//print ($each+": "+$val2+"\n--------------------\n");
		if ($isRotate) {
			setAttr ($each+$attr1[$index]) $val2;
		} else {setAttr ($each+$attr2[$index]) $val2;}
	}
}




